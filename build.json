[
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk1va29vMG1WRUFV",
    "videoId": "Mokoo0mVEAU",
    "title": "Fetching and Posting Data in React",
    "date": "2022-10-03T14:00:11Z",
    "slug": "fetching-and-posting-data-in-react",
    "image": {
      "name": "fetching-and-posting-data-in-react.jpg",
      "alt": "Fetching and Posting Data in React",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/fetching-and-posting-data-in-react/images/fetching-and-posting-data-in-react.jpg"
    },
    "status": "published",
    "description": "Learn how to make network requests in a react app to fetch data on load, and post data when users submit a form.",
    "tags": [
      "axios",
      "get",
      "post",
      "useEffect",
      "onSubmit"
    ],
    "dirPath": "content/videos/videos/fetching-and-posting-data-in-react",
    "indexPath": "content/videos/videos/fetching-and-posting-data-in-react/index.mdx",
    "imagesPath": "content/videos/videos/fetching-and-posting-data-in-react/images",
    "hash": "068d440b6a4b1bdf81bf2c74eafa3d68a4323497",
    "text": "Learn how to make network requests in a react app to fetch data on load, and post data when users submit a form.\n\nJoin this channel to get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)\n\nThis is video #10 in my react series: \n\n* #9 useEffect Everything You Need To Know: [https://youtu.be/c8R4Cba7PPY](https://youtu.be/c8R4Cba7PPY)\n\nReact Proxy | Easiest Fix to CORS Errors: [https://youtu.be/N4yUiQiTvwU](https://youtu.be/N4yUiQiTvwU)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:05 Fetch Data in useEffect\n* 4:40 Error State\n* 7:37 Loading State\n* 9:55 Custom Hook\n* 12:26 Suspense\n* 13:49 Implementing Search\n* 15:23 Race Condition\n* 17:05 Abort Controller\n* 19:22 Posting Form Data\n* 22:44 Sharing State\n* 27:54 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmM4UjRDYmE3UFBZ",
    "videoId": "c8R4Cba7PPY",
    "title": "useEffect Everything You Need To Know",
    "date": "2022-09-29T14:00:33Z",
    "slug": "useeffect-everything-you-need-to-know",
    "image": {
      "name": "useeffect-everything-you-need-to-know.jpg",
      "alt": "useEffect Everything You Need To Know",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/useeffect-everything-you-need-to-know/images/useeffect-everything-you-need-to-know.jpg"
    },
    "status": "published",
    "description": "Learn everything you need to know about the useEffect hook and side effects in a react app.",
    "tags": [],
    "dirPath": "content/videos/videos/useeffect-everything-you-need-to-know",
    "indexPath": "content/videos/videos/useeffect-everything-you-need-to-know/index.mdx",
    "imagesPath": "content/videos/videos/useeffect-everything-you-need-to-know/images",
    "hash": "e1fc46d30f98c3af54587a16d8b095405b89d397",
    "text": "Learn everything you need to know about the useEffect hook and side effects in a react app.\n\nThis is video #9 in my react series: \n\n* #8 Conditional Rendering Components in React: [https://youtu.be/xRKvjWDZlW8](https://youtu.be/xRKvjWDZlW8)\n* #10 Networking in React: Coming Soon\n\nJoin this channel to get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)\n\n## Chapters:\n\n* 0:00 Intro\n* 0:27 Component Lifecycle\n* 2:26 Side Effects\n* 6:52 useEffect\n* 13:03 Dependency Array\n* 17:34 [] componentDidMount \n* 23:45 Cleanup Functions\n* 25:59 Dependency Props\n* 29:50 Battery Status Component\n* 32:32 Event Listeners\n* 34:53 async useEffect\n* 39:14 Custom Hooks\n* 40:21 async await \n* 42:19 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnhSS3ZqV0RabFc4",
    "videoId": "xRKvjWDZlW8",
    "title": "Conditional Rendering Components in React",
    "date": "2022-09-26T14:00:37Z",
    "slug": "conditional-rendering-components-in-react",
    "image": {
      "name": "conditional-rendering-components-in-react.jpg",
      "alt": "Conditional Rendering Components in React",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/conditional-rendering-components-in-react/images/conditional-rendering-components-in-react.jpg"
    },
    "status": "published",
    "description": "Learn how conditionally render components using conditional ternary (? : ) and logical and (&&) operators, and if else statements. ",
    "tags": [],
    "dirPath": "content/videos/videos/conditional-rendering-components-in-react",
    "indexPath": "content/videos/videos/conditional-rendering-components-in-react/index.mdx",
    "imagesPath": "content/videos/videos/conditional-rendering-components-in-react/images",
    "hash": "820d7abc1fe8bfa2ad2522988c78e38f749b9d28",
    "text": "Learn how conditionally render components using conditional ternary (? : ) and logical and (&&) operators, and if else statements. \n\nThis is video #8 in my react series: \n\n* #7 React State Array of Objects: [https://youtu.be/95r9A5_taNo](https://youtu.be/95r9A5_taNo)\n* #9 useEffect Everything You Need To Know: [https://youtu.be/c8R4Cba7PPY](https://youtu.be/c8R4Cba7PPY)\n\nJoin this channel to get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:04 return different markup\n* 3:25 jsx in varaibles\n* 4:28 &&\n* 6:50 if else \n* 10:30 ternary (? : ) \n* 11:45 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjk1cjlBNV90YU5v",
    "videoId": "95r9A5_taNo",
    "title": "React State Array of Objects",
    "date": "2022-09-22T13:59:52Z",
    "slug": "react-state-array-of-objects",
    "image": {
      "name": "react-state-array-of-objects.jpg",
      "alt": "React State Array of Objects",
      "width": 640,
      "height": 480,
      "url": "content/videos/videos/react-state-array-of-objects/images/react-state-array-of-objects.jpg"
    },
    "status": "published",
    "description": "Learn how to use useState to keep track of arrays of objects in a react app.",
    "tags": [],
    "dirPath": "content/videos/videos/react-state-array-of-objects",
    "indexPath": "content/videos/videos/react-state-array-of-objects/index.mdx",
    "imagesPath": "content/videos/videos/react-state-array-of-objects/images",
    "hash": "6d33a4c078e509736740b7a7a09dc18dd84f6d8e",
    "text": "Learn how to use useState to keep track of arrays of objects in a react app.\n\n🔗Starter Code:\n[https://github.com/Sam-Meech-Ward/react-state-arrays-jokes/tree/3c3251eaac856f77081e7a4c7192cfa8d64dbfc0](https://github.com/Sam-Meech-Ward/react-state-arrays-jokes/tree/3c3251eaac856f77081e7a4c7192cfa8d64dbfc0)\n\n🔗Final Code:\n[https://github.com/Sam-Meech-Ward/react-state-arrays-jokes](https://github.com/Sam-Meech-Ward/react-state-arrays-jokes)\n\nThis is video #7 in my react series: \n\n* #6 useState: [https://youtu.be/_wPGcpoZQn8](https://youtu.be/_wPGcpoZQn8)\n* #8 Conditional Rendering: [https://youtu.be/xRKvjWDZlW8](https://youtu.be/xRKvjWDZlW8)\n\nJoin this channel to support these videos and get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:38 Adding an object to the array\n* 5:12 Deleting an object from the array\n* 8:52 Update an object in the array\n* 15:37 Sort the array of objects\n* 19:09 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnBQaWFaU05SOW9B",
    "videoId": "pPiaZSNR9oA",
    "title": "$100 DIY EBIKE",
    "date": "2022-09-21T14:00:34Z",
    "slug": "$100-diy-ebike",
    "image": {
      "name": "$100-diy-ebike.jpg",
      "alt": "$100 DIY EBIKE",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/$100-diy-ebike/images/$100-diy-ebike.jpg"
    },
    "status": "published",
    "description": "I tried to repair a broken e-bike scooter thing to avoid spending money on a brand new one. ",
    "tags": [],
    "dirPath": "content/videos/videos/$100-diy-ebike",
    "indexPath": "content/videos/videos/$100-diy-ebike/index.mdx",
    "imagesPath": "content/videos/videos/$100-diy-ebike/images",
    "hash": "779ed25827ea2eb1278f568a4dcffc5fad3696bf",
    "text": "I tried to repair a broken e-bike scooter thing to avoid spending money on a brand new one. \n\n🔗My Links\nMy Website: [https://www.sammeechward.com](https://www.sammeechward.com)\nInstagram: [https://www.instagram.com/meech_ward](https://www.instagram.com/meech_ward)\nTwitter: [https://twitter.com/Meech_Ward](https://twitter.com/Meech_Ward)\nGithub: https://github.com/orgs/Sam-Meech-Ward"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLl93UEdjcG9aUW44",
    "videoId": "_wPGcpoZQn8",
    "title": "useState",
    "date": "2022-09-19T14:00:18Z",
    "slug": "usestate",
    "image": {
      "name": "usestate.jpg",
      "alt": "useState",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/usestate/images/usestate.jpg"
    },
    "status": "published",
    "description": "Learn how to use useState in a react app to:",
    "tags": [
      "react",
      "useState",
      "hooks",
      "javascript"
    ],
    "dirPath": "content/videos/videos/usestate",
    "indexPath": "content/videos/videos/usestate/index.mdx",
    "imagesPath": "content/videos/videos/usestate/images",
    "hash": "33c9b1451f2ee96eee066a329a892dfc1d7f0834",
    "text": "Learn how to use useState in a react app to:\n\n* Keep track of state for a single component\n* Update state with values and updater functions\n* Share state between multiple components\n* Keep track of state for form inputs and share that with a parent component\n\n\n\n🔗Starter Code:\n[https://github.com/Sam-Meech-Ward/react-state-jokes](https://github.com/Sam-Meech-Ward/react-state-jokes)\n\n🔗Final Code:\n[https://github.com/Sam-Meech-Ward/react-state-jokes/tree/finalCode](https://github.com/Sam-Meech-Ward/react-state-jokes/tree/finalCode)\n\n\n\nThis is video #6 in my react series: \n\n* #5 Event Listeners in React: [https://youtu.be/lE31_0cXeAg](https://youtu.be/lE31_0cXeAg)\n* #7 Arrays in state: coming soon\n\n\n\nJoin this channel to support these videos and get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:59 The Wrong Way\n* 2:59 Introducing useState\n* 4:01 useState Explained\n* 6:50 useState is async\n* 8:35 Setter Functions\n* 9:34 Updated Variable\n* 10:04 Multiple State Variables\n* 12:18 Sharing State between Components\n* 16:03 State and Forms\n* 20:25 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmxFMzFfMGNYZUFn",
    "videoId": "lE31_0cXeAg",
    "title": "Event Listeners in React",
    "date": "2022-09-15T14:00:25Z",
    "slug": "event-listeners-in-react",
    "image": {
      "name": "event-listeners-in-react.jpg",
      "alt": "Event Listeners in React",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/event-listeners-in-react/images/event-listeners-in-react.jpg"
    },
    "status": "published",
    "description": "Learn how to handle events like button clicks and form submissions in a react app. ",
    "tags": [],
    "dirPath": "content/videos/videos/event-listeners-in-react",
    "indexPath": "content/videos/videos/event-listeners-in-react/index.mdx",
    "imagesPath": "content/videos/videos/event-listeners-in-react/images",
    "hash": "8c2160002773b0b81c049758f0b3f9463d4796eb",
    "text": "Learn how to handle events like button clicks and form submissions in a react app. \n\nThis is video #5 in my react series: \n\n* #4 Rendering a List of Components: [https://youtu.be/f640Z6QZawc](https://youtu.be/f640Z6QZawc)\n* #6 useState: [https://youtu.be/_wPGcpoZQn8](https://youtu.be/_wPGcpoZQn8)\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:34 button onClick\n* 2:03 form onSubmit\n* 3:33 input onChange\n* 4:47 inline arrow functions\n* 5:29 events in child components\n* 8:27 Summary\n\nJoin this channel to get access to perks:\n[https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join](https://www.youtube.com/channel/UC6aTLuI_j4-0wiDSzmaPctQ/join)"
  },
  {
    "type": "video",
    "title": "What is React.js?",
    "description": "Get started with React using Vite",
    "slug": "what-is-react-js",
    "image": {
      "name": "what-is-react.png",
      "width": 1280,
      "height": 720,
      "url": "content/videos/react/10_What is React/images/what-is-react.png"
    },
    "videoId": "-DTUdOJv8w8",
    "status": "published",
    "date": "2022-09-10",
    "tags": [
      "nodejs",
      "react",
      "javascript"
    ],
    "dirPath": "content/videos/react/10_What is React",
    "indexPath": "content/videos/react/10_What is React/index.mdx",
    "imagesPath": "content/videos/react/10_What is React/images",
    "hash": "20e1a277127a76b52d86998b0c14de98fc6674dd",
    "text": "Get a fast paced introduction to React.js, JSX, and how to setup a react project using Vite. This video takes a big picture look at what react is and why you would want to use React when making web apps."
  },
  {
    "type": "video",
    "title": "Creating Components in React",
    "description": "Learn how to Creating Components in React",
    "slug": "creating-components-in-react",
    "image": {
      "name": "creating-components-in-react.png",
      "width": 1280,
      "height": 720,
      "url": "content/videos/react/20_creating-components-in-react/images/creating-components-in-react.png"
    },
    "videoId": "PbkwqVZsUgs",
    "status": "published",
    "date": "2022-09-10",
    "tags": [
      "nodejs",
      "react",
      "javascript"
    ],
    "dirPath": "content/videos/react/20_creating-components-in-react",
    "indexPath": "content/videos/react/20_creating-components-in-react/index.mdx",
    "imagesPath": "content/videos/react/20_creating-components-in-react/images",
    "hash": "bb1330590fcc59e8a679b5d475bb3376cdd58a4b",
    "text": "Start by making a new react app using vite. For this, make sure you've got yarn installed. You can do this with \n\n```\nnpm i -g yarn\n```\n\nThen run \n\n```\nyarn create vite\n```\n\nSelect `react`, you could also selected `react-ts` if you want to try out using typescript. \n\nOnce you've got your app created, cd into it and run \n\n```\nyarn\n```\n\nTo install dependencies.\n\nTo run the dev server, use the following command:\n\n```\nyarn dev\n```\n\nNow we've got all that **placeholder** code inside of **App.jsx**, let's delete it all. Also, delete everything in App.css except for `#root` . App.jsx is the entry point to the application, so try adding some HTML.\n\n```js\nfunction App() {\n  return (\n    <h1>Hello</h1>\n  )\n}\n\nexport default App\n```\n\n## JSX\n\n### The rules of jsx... and tsx\n\n* Return a single root element, div or empty tag `<>`\n* All tags must close, so you can `<img></img>` or self close tags like `<img />`\n* This is js, not html, so any reserved word in JavaScript has a different name here like `className` instead of `class`\n\n```js\nreturn (\n    <div>\n      <h1 className=\"header\">Hello</h1>\n      <h2>World</h2>\n      <img className=\"image\" src=\"https://picsum.photos/200\" alt=\"random\"></img>\n    </div>\n  )\n```\n\n## CSS in JS\n\nThere are countless ways of using CSS in a react project. And each way deserves it's own video, so for now, in the beginning, we'll keep it simple. When you want to add a style add a classname, then add a style\n\n```js\n<div className=\"someName\">\n```\n\nAnd since this is in App.js, we can add the style to App.css\n\n```js\n.someName {\n  color: red;\n}\n```\n\n## JavaScript in JSX\n\nSo like I said, this is js, so you can inject js into jsx. \n\n**Not rendered as JS:**\n\n<p>6 + 9</p>\n\n**Rendered as JS:**\n\n<p>{6 + 9}</p>\n\nTry adding more JS things to your markup:\n\n```js\nreturn (\n    <div className=\"App\">\n      <h1 className=\"heading\">Hello</h1>\n      <h2>World</h2>\n      <h3>{new Date().toString()}</h3>\n    </div>\n)\n```\n\nor \n\nA component couples the UI logic and markup together in the same file. So instead of separating your js and html into separate files, it all goes in the same file and we split the app into separate components instead. \n\n**Rendering logic and markup live together in the same place—components.**\n\n\n## More components and Child components\n\nIf we want to create another component, we can just create a new function with an uppercase character that returns markup:\n\n```jsx\nfunction SomeNewComponent() {\n  return (\n    <h1>Some Markup</h1>\n  )\n}\n```\n\nUsually we put each component in their own file, even if they're very small like this one, so create a new file with the same name as the component and put it in there:\n\n```\nSomeNewComponent.jsx\n```\n\n`import` and `export` using esmodules synax:\n\n**SomeNewComponent.jsx**\n```jsx\nexport default function SomeNewComponent() {\n  return (\n    <h1>Some Markup</h1>\n  )\n}\n```\n\n**App.jsx**\n```jsx\nimport SomeNewComponent from './SomeNewComponent.jsx'\n```\n\n\nThen include it in the markup:\n\n```jsx\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"heading\">Hello</h1>\n      <h2>World</h2>\n      <h3>{new Date().toString()}</h3>\n      <SomeNewComponent />\n    </div>\n  )\n}\n```"
  },
  {
    "type": "video",
    "title": "React Props Explained",
    "description": "Learn how to use props in react to pass data to child components",
    "slug": "react-props-explained",
    "image": {
      "name": "react-props-explained.png",
      "width": 1280,
      "height": 720,
      "url": "content/videos/react/30-react-props/images/react-props-explained.png"
    },
    "videoId": "hpZmKR9FmQw",
    "status": "published",
    "date": "2022-09-10",
    "tags": [
      "nodejs",
      "react",
      "javascript"
    ],
    "dirPath": "content/videos/react/30-react-props",
    "indexPath": "content/videos/react/30-react-props/index.mdx",
    "imagesPath": "content/videos/react/30-react-props/images",
    "hash": "e5fe3b925fd87a50e5c3550e40b931452bf90e16",
    "text": "## Destructing Props\n\nAll properties that are passed into a component are passed in as a single object. \n\nRemember that the following three examples are equivalent:\n\n```jsx\nexport default function Joke({ rating = 0, joke }) {\n```\n\n```jsx\nexport default function Joke(props) {\n  let { rating = 0, joke } = props\n```\n\n\n```jsx\nexport default function Joke(props) {\n  let rating = props.rating || 0\n  let joke = props.joke\n```\n\n\n## Code\n\n\n```jsx\nexport default function Joke({ rating = 0, joke }) {\n   \n  let stars = \"\"\n  for (let i = 0; i < 5; i++) {\n    if (i < rating) {\n      stars += \"⭐\"\n    } else {\n      stars += \"☆\"\n    }\n  }\n\n  return (\n    <div>\n      <p>{joke}</p>\n      <p>{stars}</p>\n    </div>\n  )\n}\n```\n\n**App.jsx**\n\n```jsx\nimport './App.css'\nimport Joke from './Joke'\n\nfunction App() {\n  \n  return (\n    <div className=\"\">\n      <h1>Dad Jokes</h1>\n\n      <Joke joke={\"I used to be a banker, but then I lost interest!\"} rating={3} />\n\n    </div>\n  )\n}\n\nexport default App\n```"
  },
  {
    "type": "video",
    "title": "Rendering a List of Components",
    "description": "Learn how to render a list of components in react using the map function.",
    "slug": "rendering-a-list-of-components",
    "image": {
      "name": "rendering-a-list-of-components.png",
      "width": 1280,
      "height": 720,
      "url": "content/videos/react/40_Rendering lists/images/rendering-a-list-of-components.png"
    },
    "videoId": "f640Z6QZawc",
    "status": "published",
    "date": "2022-09-10",
    "tags": [
      "nodejs",
      "react",
      "javascript"
    ],
    "dirPath": "content/videos/react/40_Rendering lists",
    "indexPath": "content/videos/react/40_Rendering lists/index.mdx",
    "imagesPath": "content/videos/react/40_Rendering lists/images",
    "hash": "0b72a53f905a09f3f49944787469a52e04eb387c",
    "text": "```jsx\njokes.map(joke => (\n  <Joke key={joke.id} joke={joke.joke} rating={joke.rating} />\n))\n```\n\nUsing map like this is super common in React. You need to know how this code works and how to use it.\n\n\nA component can be stored in an array and we can just dump the array of components into jsx and it will render them:\n\n\n```js\nconst jokes = [\n  {\n    id: 1,\n    joke: \"What do you call a cow with no legs?\",\n    rating: 4,\n  },\n  {\n    id: 2,\n    joke: \"What do you call a cow with two legs?\",\n    rating: 3,\n  }\n]\n\nconst jokesComponents = [\n  <Joke joke={joke.joke} rating={joke.rating} />,\n  <Joke joke={joke.joke} rating={joke.rating} />\n]\n\nreturn (\n  <div>\n    {jokesComponents}\n  </div>\n)\n```\n\nBut this is a very hard coded brute force approach, let's make it a little bit more dynamic\n\n## For Loop\n\nOne way of making this dynamic is to use a normal for loop:\n\n```js\nconst jokesComponents = []\nfor (let i = 0; i < jokes.length; i++) {\n  const joke = jokes[i]\n  jokesComponents.push(<Joke joke={joke.joke} rating={joke.rating} />)\n}\n```\n\nBut since we're just creating a new array, we can use the map function instead:\n\n## Map\n\n```js\nconst jokesComponents = jokes.map(joke => (\n  <Joke joke={joke.joke} rating={joke.rating} />\n))\n```\n\nAnd map is the preferred way of doing this.\n\n## Keys\n\nWe just need to make sure we include a key for each component in the array:\n\n```js\nconst jokesComponents = jokes.map(joke => (\n  <Joke key={joke.id} joke={joke.joke} rating={joke.rating} />\n))\n```\n\nRead more about [**Why does React need keys?](https://beta.reactjs.org/learn/rendering-lists#why-does-react-need-keys)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk40eVVpUWlUdndV",
    "videoId": "N4yUiQiTvwU",
    "title": "React Proxy | Easiest Fix to CORS Errors",
    "date": "2022-08-29T14:00:19Z",
    "slug": "react-proxy-easiest-fix-to-cors-errors",
    "image": {
      "name": "react-proxy-easiest-fix-to-cors-errors.jpg",
      "alt": "React Proxy | Easiest Fix to CORS Errors",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/react-proxy-easiest-fix-to-cors-errors/images/react-proxy-easiest-fix-to-cors-errors.jpg"
    },
    "status": "published",
    "description": "Proxying API Requests in Development using Vite, Parcel, or Create React App. If your plan is to host your react app from the same origin as your web server, then this is super helpful. Conveniently, this also avoids CORS issues. I'll also show you how to deploy your react app using your express server and railway.",
    "tags": [],
    "dirPath": "content/videos/videos/react-proxy-easiest-fix-to-cors-errors",
    "indexPath": "content/videos/videos/react-proxy-easiest-fix-to-cors-errors/index.mdx",
    "imagesPath": "content/videos/videos/react-proxy-easiest-fix-to-cors-errors/images",
    "hash": "a007a5b59d5a65c6148afc5254b9e132bd4498f7",
    "text": "Proxying API Requests in Development using Vite, Parcel, or Create React App. If your plan is to host your react app from the same origin as your web server, then this is super helpful. Conveniently, this also avoids CORS issues. I'll also show you how to deploy your react app using your express server and railway.\n\nThis is video #8 in my react series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTe_vJIlAQQo0IEgPgk9er3g](https://www.youtube.com/playlist?list=PL0X6fGhFFNTe_vJIlAQQo0IEgPgk9er3g)\n\n## Chapters:\n\n* 0:00​ Intro\n* 2:56 CORS\n* 3:38 Deploying a React App\n* 7:04 What is React Proxy\n* 8:10 Adding a Proxy\n* 11:14 Building the app for production\n* 13:10 Deploying the app into production\n* 15:13 Summary\n\n🔗The Docs\n[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin)\n[https://create-react-app.dev/docs/proxying-api-requests-in-development/](https://create-react-app.dev/docs/proxying-api-requests-in-development/)\n[https://vitejs.dev/config/server-options.html#server-proxy](https://vitejs.dev/config/server-options.html#server-proxy)\n[https://parceljs.org/features/development/#api-proxy](https://parceljs.org/features/development/#api-proxy)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLi1EVFVkT0p2OHc4",
    "videoId": "-DTUdOJv8w8",
    "title": "What is React.js? Get started with React using Vite",
    "date": "2022-08-22T14:00:00Z",
    "slug": "what-is-reactjs-get-started-with-react-using-vite",
    "image": {
      "name": "what-is-reactjs-get-started-with-react-using-vite.jpg",
      "alt": "What is React.js? Get started with React using Vite",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/what-is-reactjs-get-started-with-react-using-vite/images/what-is-reactjs-get-started-with-react-using-vite.jpg"
    },
    "status": "published",
    "description": "Get a fast paced introduction to React.js, JSX, and how to setup a react project using Vite. This video takes a big picture look at what react is and why you would want to use React when making web apps. ",
    "tags": [],
    "dirPath": "content/videos/videos/what-is-reactjs-get-started-with-react-using-vite",
    "indexPath": "content/videos/videos/what-is-reactjs-get-started-with-react-using-vite/index.mdx",
    "imagesPath": "content/videos/videos/what-is-reactjs-get-started-with-react-using-vite/images",
    "hash": "14be100222b4e21cbc251ecc4898093a4a9b3770",
    "text": "Get a fast paced introduction to React.js, JSX, and how to setup a react project using Vite. This video takes a big picture look at what react is and why you would want to use React when making web apps. \n\nThis is video #1 in my react series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTe_vJIlAQQo0IEgPgk9er3g](https://www.youtube.com/playlist?list=PL0X6fGhFFNTe_vJIlAQQo0IEgPgk9er3g)\n\n* #2 Creating Components in React [https://youtu.be/PbkwqVZsUgs](https://youtu.be/PbkwqVZsUgs)\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:59 Vanilla JS \n* 4:01 Using React.js\n* 8:12 JSX\n* 9:18 React Toolchains\n* 10:48 Using Vite to Create a React App\n* 15:01 importing npm modules\n* 16:39 Building a vite app\n* 17:51 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmxaQUdJeTFlM0pB",
    "videoId": "lZAGIy1e3JA",
    "title": "Deleting files from S3 and CloudFront | Invalidate CloudFront Cache",
    "date": "2022-08-15T14:00:26Z",
    "slug": "deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache",
    "image": {
      "name": "deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache.jpg",
      "alt": "Deleting files from S3 and CloudFront | Invalidate CloudFront Cache",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache/images/deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache.jpg"
    },
    "status": "published",
    "description": "When you delete an image from s3, it stays in the CloudFront cache until the cache is cleared, usually 24 hours. In this video, learn how to invalidate the cloud front cache so that any updates or deletes to a file are immediately seen in CloudFront.",
    "tags": [],
    "dirPath": "content/videos/videos/deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache",
    "indexPath": "content/videos/videos/deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache/index.mdx",
    "imagesPath": "content/videos/videos/deleting-files-from-s3-and-cloudfront-invalidate-cloudfront-cache/images",
    "hash": "5b429dac3a0b3d2afbc815a775e9cf8ded5d34b8",
    "text": "When you delete an image from s3, it stays in the CloudFront cache until the cache is cleared, usually 24 hours. In this video, learn how to invalidate the cloud front cache so that any updates or deletes to a file are immediately seen in CloudFront.\n\n🔗Code Snippets: [https://github.com/meech-ward/s3-get-put-and-delete/blob/master/InvalidateCloudfront.md](https://github.com/meech-ward/s3-get-put-and-delete/blob/master/InvalidateCloudfront.md)\n\n🔗Storing Images in S3 from Node Server: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\n🔗Set up a CloudFront CDN for an S3 Bucket: [https://youtu.be/kbI7kRWAU-w](https://youtu.be/kbI7kRWAU-w)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:28 Adding the CloudFront client\n* 5:38 IAM\n* 7:44 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkVJWXJoYkJrN2Rv",
    "videoId": "EIYrhbBk7do",
    "title": "CloudFront Signed URLs with Node.js",
    "date": "2022-08-08T14:00:13Z",
    "slug": "cloudfront-signed-urls-with-nodejs",
    "image": {
      "name": "cloudfront-signed-urls-with-nodejs.jpg",
      "alt": "CloudFront Signed URLs with Node.js",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/cloudfront-signed-urls-with-nodejs/images/cloudfront-signed-urls-with-nodejs.jpg"
    },
    "status": "published",
    "description": "Create signed urls to access files in a CloudFront distribution. Learn how to generate the signed URLs using a private key in a node application.",
    "tags": [],
    "dirPath": "content/videos/videos/cloudfront-signed-urls-with-nodejs",
    "indexPath": "content/videos/videos/cloudfront-signed-urls-with-nodejs/index.mdx",
    "imagesPath": "content/videos/videos/cloudfront-signed-urls-with-nodejs/images",
    "hash": "148ad99a7c21cfae33d9b69848edae8948eae719",
    "text": "Create signed urls to access files in a CloudFront distribution. Learn how to generate the signed URLs using a private key in a node application.\n\n🔗Code Snippets: [https://github.com/meech-ward/s3-get-put-and-delete/blob/master/CloudFrontSignedURL.md](https://github.com/meech-ward/s3-get-put-and-delete/blob/master/CloudFrontSignedURL.md)\n\n🔗Storing Images in S3 from Node Server: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\n🔗Set up a CloudFront CDN for an S3 Bucket: [https://youtu.be/kbI7kRWAU-w](https://youtu.be/kbI7kRWAU-w)\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:42 Why Sign URLs?\n* 3:58 Generating an RSA Key Pair\n* 5:32 Create a Public Key in AWS\n* 6:41 Restrict CloudFront Access\n* 7:59 Sign URLs in Node Server\n* 12:21 Conclusion"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmtiSTdrUldBVS13",
    "videoId": "kbI7kRWAU-w",
    "title": "Set up a CloudFront CDN for an S3 Bucket",
    "date": "2022-08-01T15:40:46Z",
    "slug": "set-up-a-cloudfront-cdn-for-an-s3-bucket",
    "image": {
      "name": "set-up-a-cloudfront-cdn-for-an-s3-bucket.jpg",
      "alt": "Set up a CloudFront CDN for an S3 Bucket",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/set-up-a-cloudfront-cdn-for-an-s3-bucket/images/set-up-a-cloudfront-cdn-for-an-s3-bucket.jpg"
    },
    "status": "published",
    "description": "Learn how to setup a CloudFront distribution for your S3 Bucket to securely deliver files with low latency over a CDN.",
    "tags": [],
    "dirPath": "content/videos/videos/set-up-a-cloudfront-cdn-for-an-s3-bucket",
    "indexPath": "content/videos/videos/set-up-a-cloudfront-cdn-for-an-s3-bucket/index.mdx",
    "imagesPath": "content/videos/videos/set-up-a-cloudfront-cdn-for-an-s3-bucket/images",
    "hash": "b254f9c2a2074ae962c75d9cf7293e4bed03704c",
    "text": "Learn how to setup a CloudFront distribution for your S3 Bucket to securely deliver files with low latency over a CDN.\n\n🔗Storing Images in S3 from Node Server: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\n\n## Chapters:\n\n* 0:00​ Intro\n* 2:09 Setting up CloudFront\n* 5:42 Getting Images from CloudFront\n* 6:53 Using CloudFront with a Node server\n* 10:07 What Next"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmVRQUlvamNBclJZ",
    "videoId": "eQAIojcArRY",
    "title": "Storing Images in S3 from Node Server",
    "date": "2022-07-25T14:00:16Z",
    "slug": "storing-images-in-s3-from-node-server",
    "image": {
      "name": "storing-images-in-s3-from-node-server.jpg",
      "alt": "Storing Images in S3 from Node Server",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/storing-images-in-s3-from-node-server/images/storing-images-in-s3-from-node-server.jpg"
    },
    "status": "published",
    "description": "Learn how to store your web app's files in an s3 bucket. Upload, Download, Update, and Delete images from the s3 bucket. ",
    "tags": [
      "s3",
      "aws",
      "cdn"
    ],
    "dirPath": "content/videos/videos/storing-images-in-s3-from-node-server",
    "indexPath": "content/videos/videos/storing-images-in-s3-from-node-server/index.mdx",
    "imagesPath": "content/videos/videos/storing-images-in-s3-from-node-server/images",
    "hash": "b48349c294ec4afb290cfe42fda1decd10a2c379",
    "text": "Learn how to store your web app's files in an s3 bucket. Upload, Download, Update, and Delete images from the s3 bucket. \n\n\nUploading an image goes through the express server allowing us to modify the image before it's stored in the s3 bucket. Downloading the image happens directly from the s3 bucket to put less strain on the server and make it easier to integrate our bucket with a CDN in the future. \n\n\n🔗Code: [https://github.com/meech-ward/s3-get-put-and-delete](https://github.com/meech-ward/s3-get-put-and-delete)\n\n🔗CloudFront CDN: [https://youtu.be/kbI7kRWAU-w](https://youtu.be/kbI7kRWAU-w)\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 3:17 Post a photo with multipart/form-data\n* 5:06 Multer\n* 8:40 Create an S3 Bucket\n* 11:38 IAM User and Policy\n* 16:36 AWS SDK S3 Client\n* 19:00 Uploading an image to S3\n* 22:07 Updating an image\n* 23:18 Random Image Names\n* 25:16 Resizing Images\n* 27:36 Saving data to the database\n* 29:55 Getting images with signed url\n* 35:28 Deleting an image\n* 38:19 Summary\n\n🔗Libraries\nMulter: [https://www.npmjs.com/package/multer](https://www.npmjs.com/package/multer)\nAWS S3 Client: [https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-s3/index.html](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-s3/index.html)\nS3 request presigner: [https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_s3_request_presigner.html](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/modules/_aws_sdk_s3_request_presigner.html)\n\n\n\n🔗AWS & Cloud Computing tutorials:\nIntro to IAM Roles and Policies on AWS: [https://youtu.be/BSodkwWB-8s](https://youtu.be/BSodkwWB-8s)\nAWS CLI: [https://youtu.be/_DIRSI07kxY](https://youtu.be/_DIRSI07kxY)\nS3 bucket for static website: [https://youtu.be/RoY3ekCCxKc](https://youtu.be/RoY3ekCCxKc)\n\n\n🔗Other tutorials:\nOlder version of this tutorial: [https://youtu.be/NZElg91l_ms](https://youtu.be/NZElg91l_ms)\nUpload Images Directly to S3 from Front End: [https://youtu.be/yGYeYJpRWPM](https://youtu.be/yGYeYJpRWPM)\nImage upload with mutler without s3: [https://sammeechward.com/uploading-images-express-and-react/](https://sammeechward.com/uploading-images-express-and-react/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkF6QV9MVERvRnFZ",
    "videoId": "AzA_LTDoFqY",
    "title": "Hashing Passwords in Node and Express using bcrypt",
    "date": "2022-07-14T13:00:07Z",
    "slug": "hashing-passwords-in-node-and-express-using-bcrypt",
    "image": {
      "name": "hashing-passwords-in-node-and-express-using-bcrypt.jpg",
      "alt": "Hashing Passwords in Node and Express using bcrypt",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/hashing-passwords-in-node-and-express-using-bcrypt/images/hashing-passwords-in-node-and-express-using-bcrypt.jpg"
    },
    "status": "published",
    "description": "Learn how to correctly hash and store your passwords for any web app using node.js and express. The only things you need to take away from the video are:",
    "tags": [],
    "dirPath": "content/videos/videos/hashing-passwords-in-node-and-express-using-bcrypt",
    "indexPath": "content/videos/videos/hashing-passwords-in-node-and-express-using-bcrypt/index.mdx",
    "imagesPath": "content/videos/videos/hashing-passwords-in-node-and-express-using-bcrypt/images",
    "hash": "f15863b5d34c3d8b8127a9bf39ffa22f47265d84",
    "text": "Learn how to correctly hash and store your passwords for any web app using node.js and express. The only things you need to take away from the video are:\n*  \n* 1. Don't store passwords in plain text\n* 2. Hash your passwords using bcrypt\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:30 Hashing with bcrypt\n* 2:30 Other Hashing Algorithms\n* 4:30 Salt\n* 6:30 bcrypt cost factor\n* 9:03 Comparing Passwords\n* 10:28 Express App\n* 16:43 Summary"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjVEVnFBRmhmU3NF",
    "videoId": "5DVqAFhfSsE",
    "title": "WTF is Truthy and Falsy !!",
    "date": "2022-07-11T13:00:04Z",
    "slug": "wtf-is-truthy-and-falsy-!!",
    "image": {
      "name": "wtf-is-truthy-and-falsy-!!.jpg",
      "alt": "WTF is Truthy and Falsy !!",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/wtf-is-truthy-and-falsy-!!/images/wtf-is-truthy-and-falsy-!!.jpg"
    },
    "status": "published",
    "description": "What happens when you evaluate a value in a boolean context? JavaScript will interpret any value as either true or false, because every value in JavaScript is either truthy or falsy. And on that note, what's up with ! (bang) and !! (double bang)?",
    "tags": [],
    "dirPath": "content/videos/videos/wtf-is-truthy-and-falsy-!!",
    "indexPath": "content/videos/videos/wtf-is-truthy-and-falsy-!!/index.mdx",
    "imagesPath": "content/videos/videos/wtf-is-truthy-and-falsy-!!/images",
    "hash": "07abda67df5a6b2148bcd9a5a8dba111bc9fcffc",
    "text": "What happens when you evaluate a value in a boolean context? JavaScript will interpret any value as either true or false, because every value in JavaScript is either truthy or falsy. And on that note, what's up with ! (bang) and !! (double bang)?\n\n## Chapters:\n\n* 0:00​ Intro\n\n🔗Music\n[https://www.epidemicsound.com/track/UWK1vKftvJ/](https://www.epidemicsound.com/track/UWK1vKftvJ/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLm54M243VXlRVzNz",
    "videoId": "nx3n7UyQW3s",
    "title": "What you don't know about + in JavaScript",
    "date": "2022-07-07T13:00:25Z",
    "slug": "what-you-don't-know-about-in-javascript",
    "image": {
      "name": "what-you-don't-know-about-in-javascript.jpg",
      "alt": "What you don't know about + in JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/what-you-don't-know-about-in-javascript/images/what-you-don't-know-about-in-javascript.jpg"
    },
    "status": "published",
    "description": "Learn how the addition operator + really works in JavaScript. Understand the type coercion and how JavaScript decides if the operation should be string concatenation or addition.  ",
    "tags": [],
    "dirPath": "content/videos/videos/what-you-don't-know-about-in-javascript",
    "indexPath": "content/videos/videos/what-you-don't-know-about-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/what-you-don't-know-about-in-javascript/images",
    "hash": "becd0757f6ac70e19f7529e8d8a7d8b17cd97e27",
    "text": "Learn how the addition operator + really works in JavaScript. Understand the type coercion and how JavaScript decides if the operation should be string concatenation or addition.  \n\n🔗Song: [https://www.epidemicsound.com/track/FhKgzwY2Jm/](https://www.epidemicsound.com/track/FhKgzwY2Jm/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLldzYzJ4a3FEczdB",
    "videoId": "Wsc2xkqDs7A",
    "title": "JavaScript Recursion Explained",
    "date": "2022-07-04T13:00:30Z",
    "slug": "javascript-recursion-explained",
    "image": {
      "name": "javascript-recursion-explained.jpg",
      "alt": "JavaScript Recursion Explained",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/javascript-recursion-explained/images/javascript-recursion-explained.jpg"
    },
    "status": "published",
    "description": "What is recursion and how do you use recursion in JavaScript? In this video I'll explain what recursion is and how you can use recursion to solve recursive problems in JavaScript. I'll also show you how to traverse the DOM using a depth first search.",
    "tags": [],
    "dirPath": "content/videos/videos/javascript-recursion-explained",
    "indexPath": "content/videos/videos/javascript-recursion-explained/index.mdx",
    "imagesPath": "content/videos/videos/javascript-recursion-explained/images",
    "hash": "f956f21b421c929e998a11fc284ef4e11380e23f",
    "text": "What is recursion and how do you use recursion in JavaScript? In this video I'll explain what recursion is and how you can use recursion to solve recursive problems in JavaScript. I'll also show you how to traverse the DOM using a depth first search.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:29 Solving with a for loop\n* 5:45 Solving with recursion\n* 10:25 What is Recursion?\n* 15:26 Recursion in the browser\n* 21:29 Depth First Search"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmxQVmdmU1hURTFZ",
    "videoId": "lPVgfSXTE1Y",
    "title": "Deploy React App to CloudFront with HTTPS Custom Domain",
    "date": "2022-06-30T14:00:20Z",
    "slug": "deploy-react-app-to-cloudfront-with-https-custom-domain",
    "image": {
      "name": "deploy-react-app-to-cloudfront-with-https-custom-domain.jpg",
      "alt": "Deploy React App to CloudFront with HTTPS Custom Domain",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/deploy-react-app-to-cloudfront-with-https-custom-domain/images/deploy-react-app-to-cloudfront-with-https-custom-domain.jpg"
    },
    "status": "published",
    "description": "Learn how to deploy a react app, or any static website, to a Cloud Front distribution custom domain name and SSL Certificate.",
    "tags": [],
    "dirPath": "content/videos/videos/deploy-react-app-to-cloudfront-with-https-custom-domain",
    "indexPath": "content/videos/videos/deploy-react-app-to-cloudfront-with-https-custom-domain/index.mdx",
    "imagesPath": "content/videos/videos/deploy-react-app-to-cloudfront-with-https-custom-domain/images",
    "hash": "7f9d3f37d8d27db4083c7a74bd15ea360a014286",
    "text": "Learn how to deploy a react app, or any static website, to a Cloud Front distribution custom domain name and SSL Certificate.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:59 Building the react app\n* 1:35 Create an S3 bucket\n* 2:37 Create CloudFront Distribution\n* 4:16 Custom Domain Name\n* 5:19 SSL Certificate\n* 7:08 DNS Record in Route 53\n* 8:26 Custom Error Page for React\n* 10:46 Updating the Website\n* 12:05 CloudFront Invalidate Files\n* 13:06 AWS CLI\n\naws s3 sync directory-path \"s3://your-bucket-name/\" \naws cloudfront create-invalidation --distribution-id your-distribution-id --paths '/*'\n\n🔗Route 53 Domain Name\n[https://youtu.be/jDz4j_kkyLA](https://youtu.be/jDz4j_kkyLA)\n\n🔗 AWS CLI\n[https://youtu.be/_DIRSI07kxY](https://youtu.be/_DIRSI07kxY)\n\n🔗S3 Static Website AWS CLI\n[https://sammeechward.com/aws-cli-s3-static-website/](https://sammeechward.com/aws-cli-s3-static-website/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjdkak1aNU9UR19F",
    "videoId": "7djMZ5OTG_E",
    "title": "Deploy React App to S3 with Custom Domain",
    "date": "2022-06-27T14:00:07Z",
    "slug": "deploy-react-app-to-s3-with-custom-domain",
    "image": {
      "name": "deploy-react-app-to-s3-with-custom-domain.jpg",
      "alt": "Deploy React App to S3 with Custom Domain",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/deploy-react-app-to-s3-with-custom-domain/images/deploy-react-app-to-s3-with-custom-domain.jpg"
    },
    "status": "published",
    "description": "Learn how to deploy a react app, or any static website, to an s3 bucket with a custom domain name.",
    "tags": [],
    "dirPath": "content/videos/videos/deploy-react-app-to-s3-with-custom-domain",
    "indexPath": "content/videos/videos/deploy-react-app-to-s3-with-custom-domain/index.mdx",
    "imagesPath": "content/videos/videos/deploy-react-app-to-s3-with-custom-domain/images",
    "hash": "03049e71f22f60876502e31e70b8579bb0a978e3",
    "text": "Learn how to deploy a react app, or any static website, to an s3 bucket with a custom domain name.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:46 Building the react app\n* 2:09 Create an S3 bucket\n* 3:54 Upload files to S3\n* 4:28 S3 Static Website Hosting\n* 6:04 S3 Policy Permission\n* 8:18 Custom Domain Name\n* 10:15 Deploy Site Updates\n* 11:13 Deploy Updates with AWS CLI\n* 13:15 HTTPS\n\n\n🔗Code Snippets:\n[https://gist.github.com/meech-ward/c0ee31fc2256c7fab6d494121071e53c](https://gist.github.com/meech-ward/c0ee31fc2256c7fab6d494121071e53c)\n\n🔗Route 53 Domain Name\n[https://youtu.be/jDz4j_kkyLA](https://youtu.be/jDz4j_kkyLA)\n\n🔗 AWS CLI\n[https://youtu.be/_DIRSI07kxY](https://youtu.be/_DIRSI07kxY)\n\n🔗S3 Static Website AWS CLI\n[https://sammeechward.com/aws-cli-s3-static-website/](https://sammeechward.com/aws-cli-s3-static-website/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLl9ESVJTSTA3a3hZ",
    "videoId": "_DIRSI07kxY",
    "title": "aws cli",
    "date": "2022-06-23T14:00:16Z",
    "slug": "aws-cli",
    "image": {
      "name": "aws-cli.jpg",
      "alt": "aws cli",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/aws-cli/images/aws-cli.jpg"
    },
    "status": "published",
    "description": "Learn how to setup the aws cli on your computer and configure it to manage your cloud infrastructure with code. ",
    "tags": [],
    "dirPath": "content/videos/videos/aws-cli",
    "indexPath": "content/videos/videos/aws-cli/index.mdx",
    "imagesPath": "content/videos/videos/aws-cli/images",
    "hash": "c41df6cd487557f3714180a76c9c7095a0160d5b",
    "text": "Learn how to setup the aws cli on your computer and configure it to manage your cloud infrastructure with code. \n\n## Chapters:\n\n* 0:00​ Intro\n* 0:18 Install the CI\n* 0:54 Documentation\n* 2:13 Creating an IAM User\n* 4:52 Configuring the AWS CLI\n* 5:38 Creating an S3 Bucket\n* 6:27 Infrastructure as Code\n\n\n\n🔗Install AWS CLI\n[https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)\n\n🔗S3 Static Website AWS CLI\n[https://sammeechward.com/aws-cli-s3-static-website/](https://sammeechward.com/aws-cli-s3-static-website/)\n\n🔗AWS CLI VPC\n[https://sammeechward.com/aws-cli-vpc-subnets-ec2-and-more/](https://sammeechward.com/aws-cli-vpc-subnets-ec2-and-more/)\n\n🔗Intro to Terraform\n[https://youtu.be/bStIFxbD1fo](https://youtu.be/bStIFxbD1fo)\n\n🔗Intro to Packer\n[https://youtu.be/dde-bWUeRMo](https://youtu.be/dde-bWUeRMo)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmpEejRqX2treUxB",
    "videoId": "jDz4j_kkyLA",
    "title": "AWS Route 53 Domain Name",
    "date": "2022-06-20T14:00:31Z",
    "slug": "aws-route-53-domain-name",
    "image": {
      "name": "aws-route-53-domain-name.jpg",
      "alt": "AWS Route 53 Domain Name",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/aws-route-53-domain-name/images/aws-route-53-domain-name.jpg"
    },
    "status": "published",
    "description": "Setup a custom domain name in route 53 to start creating dns records for services within aws. I'll show you how to purchase a domain with namecheap and create a Route 53 hosted zone in aws. Then you can create dns records for aws services like ec2 instances, s3 buckets, load balancers, and more.",
    "tags": [],
    "dirPath": "content/videos/videos/aws-route-53-domain-name",
    "indexPath": "content/videos/videos/aws-route-53-domain-name/index.mdx",
    "imagesPath": "content/videos/videos/aws-route-53-domain-name/images",
    "hash": "9ca04e17bcb6087233bc9e57c66a9e56c59fa60c",
    "text": "Setup a custom domain name in route 53 to start creating dns records for services within aws. I'll show you how to purchase a domain with namecheap and create a Route 53 hosted zone in aws. Then you can create dns records for aws services like ec2 instances, s3 buckets, load balancers, and more.\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:27 Custom Domain Name Setup\n* 0:43 Route 53 Hosted Zones\n* 1:00 Route 53 Hosted zone cost\n* 1:15 Purchasing through AWS vs somewhere like namecheap or godaddy\n* 1:28 Purchasing through Namecheap\n* 2:42 Domain Name settings\n* 3:20 Creating hosted zone on AWS\n* 3:50 NS Record values AWS\n* 5:00 Simple record to point to EC2 Instance"
  },
  {
    "type": "video",
    "title": "MySQL with Node.js",
    "description": "I'll show you how to connect your node application to a MySQL database to query and insert data. I will also show you how to integrate this into an express server to show what a complete backend might look like. ",
    "slug": "connect-to-mysql-from-node",
    "image": {
      "name": "mysql.png",
      "width": 1280,
      "height": 720,
      "url": "content/videos/express/mysql-with-nodejs/images/mysql.png"
    },
    "videoId": "Hej48pi_lOc",
    "status": "published",
    "date": "2022-06-16T14:00:14Z",
    "tags": [
      "nodejs",
      "mysql"
    ],
    "dirPath": "content/videos/express/mysql-with-nodejs",
    "indexPath": "content/videos/express/mysql-with-nodejs/index.mdx",
    "imagesPath": "content/videos/express/mysql-with-nodejs/images",
    "hash": "468abc6bd815ae8a4442c29a121ca6195444df38",
    "text": "## Chapters:\n\n* 0:00​ Intro\n* 0:32 Setup MySQL\n* 1:50 Setup Node App\n* 2:46 Connect to MySQL from Node\n* 4:40 Basic Queries\n* 7:24 Environment Variables\n* 10:22 Prepared Statements\n* 13:42 Insert Statement\n* 17:58 Express\n* 26:00 Error Handling\n* 27:28 Summary\n\n## Resources:\n\n* Code: [https://github.com/Sam-Meech-Ward/Node-MySQL](https://github.com/Sam-Meech-Ward/Node-MySQL)\n* A Quick Guide to Creating Tables [https://sammeechward.com/a-quick-guide-to-creating-tables/](https://sammeechward.com/a-quick-guide-to-creating-tables/)\n* Install MySQL [https://www.youtube.com/watch?v=u96rVINbAUI](https://www.youtube.com/watch?v=u96rVINbAUI)\n* SQL Injection [https://youtu.be/Hh6CbrDr0Lk](https://youtu.be/Hh6CbrDr0Lk)\n* Express JS Crash Course [https://youtu.be/bssX9Ot9YOI](https://youtu.be/bssX9Ot9YOI)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkoyRG1lUVFITFJv",
    "videoId": "J2DmeQQHLRo",
    "title": "Stop Using Semicolons in Javascript",
    "date": "2022-06-13T14:00:09Z",
    "slug": "stop-using-semicolons-in-javascript",
    "image": {
      "name": "stop-using-semicolons-in-javascript.jpg",
      "alt": "Stop Using Semicolons in Javascript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/stop-using-semicolons-in-javascript/images/stop-using-semicolons-in-javascript.jpg"
    },
    "status": "published",
    "description": "Should you be using semicolons in your javascript code?",
    "tags": [],
    "dirPath": "content/videos/videos/stop-using-semicolons-in-javascript",
    "indexPath": "content/videos/videos/stop-using-semicolons-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/stop-using-semicolons-in-javascript/images",
    "hash": "8e55486f44d26f200f9f624b87f7784c3977964d",
    "text": "Should you be using semicolons in your javascript code?"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmJMcGtveXJzQUxj",
    "videoId": "bLpkoyrsALc",
    "title": "Async Callback Functions in Javascript",
    "date": "2022-06-09T14:00:16Z",
    "slug": "async-callback-functions-in-javascript",
    "image": {
      "name": "async-callback-functions-in-javascript.jpg",
      "alt": "Async Callback Functions in Javascript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/js/async-callback-functions-in-javascript/images/async-callback-functions-in-javascript.jpg"
    },
    "status": "published",
    "description": "There are different types of callback functions in JavaScript. This video goes over them and how to successfully use callback functions to handle asynchronous, non-blocking code in JavaScript. ",
    "tags": [],
    "dirPath": "content/videos/js/async-callback-functions-in-javascript",
    "indexPath": "content/videos/js/async-callback-functions-in-javascript/index.mdx",
    "imagesPath": "content/videos/js/async-callback-functions-in-javascript/images",
    "hash": "a7b6fb82972db354bce6fe44a39d970866763466",
    "text": "There are different types of callback functions in JavaScript. This video goes over them and how to successfully use callback functions to handle asynchronous, non-blocking code in JavaScript. \n\n## Chapters:\n\n* 0:00​ Intro\n* 0:57 Synchronous Callback Functions\n* 2:16 Event Based Async Callbacks\n* 6:31 Blocking Code \n* 10:30 Performance Async Callbacks\n* 14:45 Summary\n\n🔗Intro to callback functions\n[https://youtu.be/Pk3AoFgSiU0](https://youtu.be/Pk3AoFgSiU0)\n\n🔗Code\n[https://codesandbox.io/embed/young-shadow-um5bm5?fontsize=14&hidenavigation=1&theme=dark](https://codesandbox.io/embed/young-shadow-um5bm5?fontsize=14&hidenavigation=1&theme=dark)\n\n\nThere are main types of callback functions in JavaScript:\n\n*   syncronous callback functions like the `forEach` and `map`\n*   async even based like `addEventListener(\"click\"` or `app.get(\"/\", req, res)`\n*   async performance based callback functions like `$.get()` or `fs.readFile()`\n\nLet’s take a look at each of them.\n\nCode examples can be found here: [https://codesandbox.io/embed/young-shadow-um5bm5](https://codesandbox.io/embed/young-shadow-um5bm5)\n\n## Syncronous Callbacks\n\nI already went over these types of callback functions in a different article, so I suggest you take a look at that one first if you haven’t already. But basically, synchronouse callback functions are callback functions that get called synchronously.\n\n```js\nconsole.log(\"before forEach\");\n\n[1, 2, 3].forEach((item) => {\n  console.log(item)\n})\n\nconsole.log(\"after forEach\")\n```\n\nThe callback function passed to `forEach` will get exectuted for each item in the array, so three times in this case. The callback function will get called synchronously so the code below `forEach` will wait for `forEach` to complete before it’s exectectued. Everything happens in order and output should be no surprise:\n\n```shell\n> before forEach\n> 1\n> 2\n> 3\n> after forEach\n```\n\n## Event Based Async Callbacks\n\nLets say we have a web page that has a button on it and we want to know when that button is clicked so we can run some custom code. This could be for a `React` or `Vue` or `Angular` app, but i’ll keep things vanilla for this example.\n\n```js\nconst button = document.querySelector(\"button\")\n\nbutton.addEventListener(\"click\", () => {\n  console.log(\"button clicked\")\n})\n```\n\nWe can use the `addEventListener` function to listen for a click event on the button. `addEventListener` **needs** us to pass in a callback function that gets called when the button is clicked. How many times will a button on a web page be clicked? It could be once, maybe 100 times, maybe 0 times, who knows? But when it gets clicked, we need to execute some custom logic.\n\nIf we run the following code, what will the output be?\n\n```js\nconst button = document.querySelector(\"button\")\n\nconsole.log(\"before click\")\n\nbutton.addEventListener(\"click\", () => {\n  console.log(\"button clicked\")\n})\n\nconsole.log(\"after click\")\n```\n\n```shell\n> before click\n> after click\n```\n\nThat’s it, we won’t see `\"button clicked\"` printed to the console until the user actually clicks the button, if they ever even click the button. We **must** use callback functions for events in JavaScript because we need to be able to write the code that will get exectued when the event happens, but we are not going to call the function. We pass the function to the event listener to call it when the event actually happens.\n\nThese types of async callback functions **can’t** ever be replaced with promises or async/await. These types of callback functions are going to be around forever.\n\nThis doesn’t just apply to button clicks though, there are so many things in JavaScript that are event based. If you’ve ever made an `express` app, every route in your server is using an event based async callback function\n\n```js\nconst app = express()\n\napp.get(\"/\", (req, res) => { // <-- this is an event based async callback function\n  console.log(\"we don't know how many times this will get called\")\n  res.send(\"Hello World\")\n})\n```\n\n## Performance Async Callbacks\n\nThe third type of callback functions are async callback functions that only exist for performance reasons. These are the ones you use when you’re making an HTTP request, or a database query, or reading from a file.\n\n```js\nrequest('https://api.kanye.rest', (error, response, body) {\n\n})\n\nquery('SELECT * FROM whatever', (err, result) => {\n\n})\n\nfs.readFile('file.txt', (err, data) => {\n\n})\n```\n\nWe could do all of these things without callback functions, but using callbacks here make our apps perform better. It’s all about performance. As a side note, these are the types of callback functions that can be replaced with `promises` or `async/await`. But that’s a topic for another article.\n\n## Blocking Code Without Callbacks\n\nLet’s see what life would be like without performance callback functions. For this I want to go back to the previous example with the button.\n\n```js\nconst button = document.querySelector(\"button\")\n\nbutton.addEventListener(\"click\", () => {\n  button.animate([ { transform: \"rotate(0)\" }, { transform: \"rotate(360deg)\" } ], { duration: 3000, iterations: 1 })\n})\n```\n\nRemember that we have no other choice with events, we have to use callback functions. When this button gets clicked, it’s now going to do a simple rotation animation.\n\nNow let’s say we also want to hash a string using `bcrypt` when this button is clicked. Realistically, you wouldn’t do this, it would more likely be something like an AJAX request, but bcrypt is better for demonstration purposes.\n\n```js\nconst button = document.querySelector(\"button\")\n\nbutton.addEventListener(\"click\", () => {\n  const hash = bcrypt.hashSync(\"some text\", 13)\n  console.log(hash)\n\n  button.animate([ { transform: \"rotate(0)\" }, { transform: \"rotate(360deg)\" } ], { duration: 3000, iterations: 1 })\n})\n```\n\n`bcrypt` will hash a peice of text and return a hashed string. It does this very slowly and every time we add one to the second parameter, it takes twice as long to hash the string. With `13` it should take about 2 seconds to hash, so if we change it to `14` it should take about 4 seconds to hash.\n\nThis function takes a little while to complete and it **blocks** the rest of our code from running. So while it’s busy hashing that text, no animations can happen and the user can’t interact with the web page at all. If this code was running on a server, the entire server would not be able to respond to the user’s request. This code is syncronous and it’s blocking and it’s bad.\n\nWhat we want is for this hashing to kind of just happen in the background. We want users to be able to still interact with the web page while this is happening. We want to be able to click the button and see the animation, still have the user interact with the application, then handle the hashed text once the hasing function finishes.\n\n## Non Blocking Code With Callbacks\n\n```js\nconst button = document.querySelector(\"button\")\n\nbutton.addEventListener(\"click\", () => {\n  console.log(\"before hash\")\n\n  bcrypt.hash(\"some text\", 13, (err, hash) => {\n    console.log(hash)\n  })\n\n  console.log(\"after hash\")\n\n  button.animate([ { transform: \"rotate(0)\" }, { transform: \"rotate(360deg)\" } ], { duration: 3000, iterations: 1 })\n})\n```\n\nIn this example, I’m using a version of the hashing function that accepts a callback function. I tell bcrypt to start hashing and call the callback function when it’s done. When it calls my callback function, it will pass me the hashed password as a parameter (or an error, but we’ll ignore that for now). This callback function will only ever be called once, when bcrypt is done hashing the text. We don’t put the code in a function so it can be executed multiple times, we put it in a function so it can be executed just once, but at some point in the future.\n\nNothing is blocked, the animation still happens, the user can interact with the web page, and we handle the hash when it’s done.\n\nThe output to the console will be:\n\n```shell\n> before hash\n> after hash\n> <hashed password>\n```\n\nEverything is still happening in the correct order, but the code inside of the callback function won’t be executed until the hashing function is done. This does mean that won’t be able to access `hash` outside of the callback function, so any code that is dependent on the hash has to go inside of the callback function. It makes the code slightly more complex to work with, but it’s totally worth it for performance.\n\n```js\nconst button = document.querySelector(\"button\")\n\nbutton.addEventListener(\"click\", () => {\n\n\n  bcrypt.hash(\"some text\", 13, (err, hash) => {\n    console.log(hash)\n    // Any code that is dependent on the hash has to go inside of this function\n  })\n\n  // hash does not exist out here, only inside the callback function\n})\n```\n\nImagine you’re sitting at your desk scrolling through online articles about JavaScript, trying and understand this language that controls the world. Suddenly you realize it’s lunch time and you’re hungry and you need food and you don’t want to spend your precious energy making yourself food so you pull out your phone and order some takeout. Your app tells you that your food will be delivered in about 30 minutes but you know it could take up to an hour because it’s lunch time and for some reason uber eats allows people to deliver food on foot now which kind of seems to defeat the purpose of delivery. Anyway. You know it’s going to take somewhere between 30 minutes and an hour for your food to be delivered, what do you do with that time?\n\nIf your life didn’t have callbacks and all tasks were blocking, you would just sit there blocked, stuck, paralyzed just waiting for the food to be delivered. But that would be a terrible user experience, so let’s reimplement that with callbacks. You place your order and now switch your attention to watching TikTok videos because you’ve earned a break from all these JavaScript tutorials. You spend about 40 minutes in TikTok which is about 39 minutes too long to spend on TikTok, but hey, better than just sitting there doing nothing I guess. The food arrives deliverer knocks on your door, you are aware the food is here but you can finish up what you were doing before you go get it. So you wait until the end of your current TikTok video to figure out if Amber Heard was Punching or just hitting Johnny Depp.\n\n## Handling Errors\n\n```js\nbcrypt.hash(\"some text\", 13, (err, hash) => {\n  console.log(hash)\n})\n```\n\nNotice that the callback function has two parameters. The first is an error, and the second is the hash. If there was an error hashing the password, bcrypt would have passed in an error as the first argument and nothing for hash. So we should always check if there was an error and handle that first, because if there is an error, then there is no point in continuing.\n\n```js\nbcrypt.hash(\"some text\", 13, (err, hash) => {\n  if (err) {\n    console.log(\"error hashing password\")\n  } else {\n    console.log(hash)\n  }\n})\n```\n\nBcrypt will only ever call the callback function once and I will either get the desired outcome or an error. It’s really important to remember that we should always handle any error cases.\n\nIn node js, all performance async callback functions work like this. So reading a file’s contents would look something like this:\n\n```js\nfs.readFile(\"file.txt\", (err, data) => {\n  if (err) {\n    console.log(\"error reading file\")\n  } else {\n    console.log(data)\n  }\n})\n```\n\n## The Future\n\nIt’s very uncommon that you will actually need to use these perforamnce based async functions in your code. These types of callback functions are being replaced with the use of promises and async/await. So the previous bcrypt code would actually look like this:\n\n```js\n// Promise\nbcrypt.hash(\"some text\", 13)\n  .then(hash => {\n    console.log(hash)\n  })\n  .catch(err => {\n    console.log(\"error hashing password\")\n  })\n```\n\n```js\n// Async/Await\ntry {\n  const hash = await bcrypt.hash(\"some text\", 13)\n  console.log(hash)\n} catch (err) {\n  console.log(\"error hashing password\")\n}\n```\n\nI still have handle the success and error cases, and the code is very similar, but it’s newer so it’s better right? And some modern libraries don’t even have an API for using plain callbacks anymore. For example, axios, the most popular http library, has a promise based API:\n\n```js\naxios.get(\"https://api.kanye.rest\")\n  .then(res => {\n    console.log(res.data)\n  })\n  .catch(err => {\n    console.log(\"error getting user\")\n  })\n```\n\n## Summary\n\n*   Callbacks can be sync or async\n*   Event based callbacks are completely necessary, but others callbacks only exist to make our apps perform better.\n*   Performance async callbacks are being replaced with promises and async/await."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkNWZVNGNy1naldN",
    "videoId": "CVeSF7-gjWM",
    "title": "Stop Using else Statements in Javascript",
    "date": "2022-06-06T14:00:06Z",
    "slug": "stop-using-else-statements-in-javascript",
    "image": {
      "name": "stop-using-else-statements-in-javascript.jpg",
      "alt": "Stop Using else Statements in Javascript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/stop-using-else-statements-in-javascript/images/stop-using-else-statements-in-javascript.jpg"
    },
    "status": "published",
    "description": "Stop using else statements, I'll show you how.",
    "tags": [],
    "dirPath": "content/videos/videos/stop-using-else-statements-in-javascript",
    "indexPath": "content/videos/videos/stop-using-else-statements-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/stop-using-else-statements-in-javascript/images",
    "hash": "0c9b0613585795eb8df737eeac3070544b6c0cbd",
    "text": "Stop using else statements, I'll show you how."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlBrM0FvRmdTaVUw",
    "videoId": "Pk3AoFgSiU0",
    "title": "JavaScript Callback Functions",
    "date": "2022-06-02T15:56:33Z",
    "slug": "javascript-callback-functions",
    "image": {
      "name": "javascript-callback-functions.jpg",
      "alt": "JavaScript Callback Functions",
      "width": 1280,
      "height": 720,
      "url": "content/videos/js/javascript-callback-functions/images/javascript-callback-functions.jpg"
    },
    "status": "published",
    "description": "By the end of this, i'm going to make sure you understand how to use callback functions in JavaScript.",
    "tags": [],
    "dirPath": "content/videos/js/javascript-callback-functions",
    "indexPath": "content/videos/js/javascript-callback-functions/index.mdx",
    "imagesPath": "content/videos/js/javascript-callback-functions/images",
    "hash": "8023ed00e992410a16a61ba3b579ac5efaecf966",
    "text": "## Chapters:\n\n* 0:00​ Intro\n* 0:26 Functions\n* 5:21 Callback Functions\n* 9:57 forEach\n* 12:54 Summary\n\n## Functions Review\n\nBefore we get into callback functions, let's just review functions a little bit first, because you really need a good understanding of functions in order to understand callback functions. So i'm going to make a function called funny that takes a string and logs it to the console in surrounded with laughing emojis so everyone knows the text is funny.\n\n```js\nfunction funny(input) {\n  const output = `🤣 ${input} 🤣`\n  console.log(output)\n}\n```\n\nSo if you run this function with the string “spiders are the only web devs that like bugs”, it outputs with laughing emojis, because it's a hilrious joke.\n\n```js\nfunny(\"spiders are the only web devs that like bugs\")\n```\n\n```shell\n> 🤣 spiders are the only web devs that like bugs 🤣\n```\n\n`input` contains the value of the text that is passed to the function, output is that text surrounded by laughing emojis, and the function logs it to the console.\n\n## Different ways to create a function\n\nI am creating a [function decleration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function) here, but I could also create the function using a [function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) like this:\n\n```js\nconst funny = function(input) {\n  const output = `💩 ${input} 💩`\n  return output\n}\n```\n\nOr using an [arrow function expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) like this:\n\n```js\n// Arrow function expressions\nconst funny = (input) => {\n  const output = `💩 ${input} 💩`\n  return output\n}\n```\n\nFor the sake of this video, these are all exuivalent. No difference. In the end you have a variable named `funny` that references a function. So it can be executed using the round brackets.\n\n```js\nfunny(\"spiders are the only web devs that like bugs\")\n```\n\nAnd since functions are first class values, I could even create a second variable that references the same function if I wanted to:\n\n```js\nconst funnyAgain = funny\nfunnyAgain(\"spiders are the only web devs that like bugs\")\n```\n\nIt's pointless in this case, but something that's **very important** in JavaScript. Functions are first class values, so they can be assigned to a variable and passed around as arguments just like any other value.\n\nAnyway, i'm going to go back to the **function decleration** for the rest of this video because I like using the word `function`. This still gives me a variable called `funny` that references the function.\n\n```js\nfunction funny(input) {\n  const output = `🤣 ${input} 🤣`\n  console.log(output)\n}\n```\n\n## Reusable Functions\n\nFunctions can accept parameters, `funny` accepts `input`, but functions can also return values. So Instead of console logging the output inside the `funny` function, this function can return the output and I can `console.log` it somewhere else.\n\n```js\nfunction funny(input) {\n  const output = `🤣 ${input} 🤣`\n  return output\n}\n\nconst message = funny(\"spiders are the only web devs that like bugs\")\nconsole.log(message)\n```\n\nAnd this can be nice because it makes the function more _generic_ and _reusable_. Before this refactor, `funny` could only be used to log text to the console; now I can choose to log the output to the console or do something else like add the new string to an array or display it on a web page or pretty much anything. `funny` is now more **reusable**.\n\nBut all functions don't need to be generic and reusable like this. I will choose to put this new chunk of code into a function called `funnySpiderJoke` to clean things up a bit:\n\n```js\nfunction funny(input) {\n  const output = `🤣 ${input} 🤣`\n  return output\n}\n\nfunction funnySpiderJoke() {\n  const message = poop(\"spiders are the only web devs that like bugs\")\n  console.log(message)\n}\n\nfunnySpiderJoke()\n```\n\nThis gives my chunk of code a name and it makes it a bit cleaner if I want to do something like execute that logic multiple times. Let's say 5:\n\n```js\nfor (let i = 0; i < 5; i++) {\n  funnySpiderJoke()\n}\n```\n\n`funny` is a very generic function, the output will always change based on the input, and I can use the output however I want. `funnySpiderJoke` is a specific function, it will always do the same thing no matter what. Both are functions and both are good.\n\nNow I could wrap this new chunk of code into a function as well:\n\n```js\nfunction funny(input) {\n  const output = `🤣 ${input} 🤣`\n  return output\n}\n\nfunction funnySpiderJoke() {\n  const message = poop(\"spiders are the only web devs that like bugs\")\n  console.log(message)\n}\n\nfunction funnySpiderJokeFiveTimes() {\n  for (let i = 0; i < 5; i++) {\n    funnySpiderJoke()\n  }\n}\n\nfunnySpiderJokeFiveTimes()\n```\n\n```shell\n> 🤣 spiders are the only web devs that like bugs 🤣\n> 🤣 spiders are the only web devs that like bugs 🤣\n> 🤣 spiders are the only web devs that like bugs 🤣\n> 🤣 spiders are the only web devs that like bugs 🤣\n> 🤣 spiders are the only web devs that like bugs 🤣\n```\n\n## Callback Functions\n\n`funnySpiderJokeFiveTimes` is a very specific function that will always print out that joke to the console 5 times. But it might be nice to make this function a little bit more generic and reusable. For example, instead of always printing this joke 5 times, I might want to be able to change that number to print it once or twice or a thousand times. So instead of always doing this 5 times, let's change this to be a paramter.\n\n```js\nfunction funnySpiderJokeSomeTimes(times) {\n  for (let i = 0; i < times; i++) {\n    funnySpiderJoke()\n  }\n}\n\nconst t = 2\nfunnySpiderJokeSomeTimes(t)\n```\n\nAnytime I call the `funnySpiderJokeSomeTimes` function, I can specify how many times this function should print the joke.\n\nI can go one step further and make this even more generic by passing in the `funnySpiderJoke` function as a paramter as well.\n\n```js\nfunction doSomethingSomeTimes(times, callback) {\n  for (let i = 0; i < times; i++) {\n    callback()\n  }\n}\n\nconst t = 2\ndoSomethingSomeTimes(t, funnySpiderJoke)\n```\n\nRemember that functions can be passed to another function just like a number or any other value in JavaScript can be passed to a function. The `times` parameter is a number and it's used instead of the hard coded number 5. The `callback` parameter is a function so we call it with `()` because that's what we do with functions.\n\nIn this example, `times` is `2` and `callback` is `funnySpiderJoke`, but these could be any number or function. `doSomethingSomeTimes` will work with any number and any function.\n\nA callback function is a function passed into another function as an argument, which is then invoked by that function. So any function that is passed into `doSomethingSomeTimes` is a callback function since it's passed into `doSomethingSomeTimes` as an argument and `doSomethingSomeTimes` is now responsible for invoking it using the `()`.\n\nThis is kind of amazing, because it allows us to create these much more reusable functions by allowing the _specific_ logic to be passed into a function as a function. It makes our code more flexible and reusable.\n\nNotice that I am not calling the `funnySpiderJoke` function. I am just passing it in as a paramter.\n\n```js\n// Not This\ndoSomethingSomeTimes(t, funnySpiderJoke())\n\n// This\ndoSomethingSomeTimes(t, funnySpiderJoke)\n```\n\nI don't want to invoke the `funnySpiderJoke` function. I want `doSomethingSomeTimes` to invoke it some number of times. If I invoke the function, the logic will be executed just once, the one time I call the function, and I will be passing the return value of the function to the next function. I don't want that, I want to pass the actual function to `doSomethingSomeTimes`.\n\n## Anonymous Functions\n\nInstead of creating a new variable `t` to hold the number 2, I would probably just pass the number 2 in directly like this:\n\n```js\nfunction doSomethingSomeTimes(times, callback) {\n  for (let i = 0; i < times; i++) {\n    callback()\n  }\n}\n\ndoSomethingSomeTimes(2, funnySpiderJoke)\n```\n\nIt's also very likely that I'll want to pass in a function as a paramter, but I don't want to create a new variable to hold the function. I want to pass in the function directly. I can do this with an anonymous function.\n\n```js\nfunction doSomethingSomeTimes(times, callback) {\n  for (let i = 0; i < times; i++) {\n    callback()\n  }\n}\n\ndoSomethingSomeTimes(2, function() {\n  console.log(\"a new function\")\n})\n```\n\nThis will just print out `\"a new function\"` 2 times to the console. But it demonstrates that I can create the function without creating a new variable for it. I just create it when I call the `doSomethingSomeTimes` function.\n\nAnd in modern JavaScript, it has become more common to use an arrow function for all callback functions.\n\n```js\ndoSomethingSomeTimes(2, () => {\n  console.log(\"a new function\")\n})\n```\n\nIn this example, the outcome will be identical, but in sometimes the outcome will be different if you use an arrow function. I won't get into that in this video, but check the video description for more videos on JavaScript.\n\nJust to recap, I can pass in a function as a paramter to a second function and that second function is now responsible for calling the first function. The first function is now the callback function. This makes the code much more reusable and flexible.\n\n## Passing Values to Callbacks\n\nLet's take this one step further. We know that we can pass a value to a function, that was the first example in this post. But what if we want to pass a value to a function that is a callback function?\n\n```js\nfunction doSomethingSomeTimes(times, callback) {\n  for (let i = 0; i < times; i++) {\n    callback(i)\n  }\n}\n```\n\nThis is the same code as before, but now I am passing in the value of `i` to the callback function. So each time the callback function is called, it will get the value of `i` as a paramter which the callback function could choose to use.\n\n```js\ndoSomethingSomeTimes(5, (i) => {\n  console.log(\"a new function\", i)\n})\n```\n\nThis will now print out `\"a new function\"` with the value of `i` 5 times to the console:\n\n```git\n> a new function 0\n> a new function 1\n> a new function 2\n> a new function 3\n> a new function 4\n```\n\n## Real Examples\n\nLet's look at a more practical example, the `forEach` function. If we were to write `forEach` from scratch, it might look a little something like this:\n\n```js\nfunction forEach(array, callback) {\n  for (let i = 0; i < array.length; i++) {\n    callback(array[i])\n  }\n}\n```\n\nIf we call `forEach` and pass in an `array` and a `callback` function, it will run the callback function for each item in the array and pass in each item to the callback function.\n\n```js\nforEach([\"🤗\", \"🍆\", \"🍑\"], (item) => {\n  console.log(item)\n})\n```\n\n```shell\n> 🤗\n> 🍆\n> 🍑\n```\n\n`forEach` is a very useful function and it's very reusable. It works with any array and any function, and it's so useful that it's build into JavaScript as a method on the `Array` object.\n\n```js\n[\"🤗\", \"🍆\", \"🍑\"].forEach((item) => {\n  console.log(item)\n})\n```\n\nAnd callback functions get more and more useful as we go. Using a callback function with the `map` method allows us to create a brand new array based on the original array.\n\n```js\nconst newArray = [\"🤗\", \"🍆\", \"🍑\"].map((item) => {\n  return item+item\n})\n\n> [\"🤗🤗\", \"🍆🍆\", \"🍑🍑\"]\n```\n\nAnd there are many many more times when callback functions will come up in JavaScript.\n\n## Summary\n\nUsing callback functions is a great way to make code more flexible and reusable and it's completely unavoidable in JavaScript. Not just because it's a really useful tool, but because sometimes we can't avoid them. When we are dealing with asynchronous code, we often have to use callback functions. And before async/await, we always had to use callback functions to handle asynchronous code. But that's a topic for another post."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLm42bFN4VGdPbTQw",
    "videoId": "n6lSxTgOm40",
    "title": "Prototypes in JavaScript",
    "date": "2022-01-26T23:59:35Z",
    "slug": "prototypes-in-javascript",
    "image": {
      "name": "prototypes-in-javascript.jpg",
      "alt": "Prototypes in JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/prototypes-in-javascript/images/prototypes-in-javascript.jpg"
    },
    "status": "published",
    "description": "Learn about what prototypes are in JavaScript and how to use prototypes to implement inheritance in your javascript applications.",
    "tags": [],
    "dirPath": "content/videos/videos/prototypes-in-javascript",
    "indexPath": "content/videos/videos/prototypes-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/prototypes-in-javascript/images",
    "hash": "86c56d09bbbbcdda1982c0229ab4284e4883d7d8",
    "text": "Learn about what prototypes are in JavaScript and how to use prototypes to implement inheritance in your javascript applications.\n\nthis: [https://youtu.be/A9SaTI7-sM4](https://youtu.be/A9SaTI7-sM4)\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:40 Object.create\n* 1:50 [[prototype]]\n* 2:37 __proto__\n* 4:30 Array.Prototype\n* 6:55 Property Lookup and Assignment \n* 11:39 Prototype Chain\n* 13:39 Summary\n\nMusic:\nMusic: TheFatRat - Rise Up\nWatch the official music video: [https://www.youtube.com/watch?v=j-2DGYNXRx0](https://www.youtube.com/watch?v=j-2DGYNXRx0)\nListen here: https://enter.lnk.to/riseup"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlBrZVRIMXJCN0hZ",
    "videoId": "PkeTH1rB7HY",
    "title": "Getters and Setters in JavaScript",
    "date": "2022-01-24T16:35:13Z",
    "slug": "getters-and-setters-in-javascript",
    "image": {
      "name": "getters-and-setters-in-javascript.jpg",
      "alt": "Getters and Setters in JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/getters-and-setters-in-javascript/images/getters-and-setters-in-javascript.jpg"
    },
    "status": "published",
    "description": "Learn how to use getters and setters on JavaScript objects",
    "tags": [],
    "dirPath": "content/videos/videos/getters-and-setters-in-javascript",
    "indexPath": "content/videos/videos/getters-and-setters-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/getters-and-setters-in-javascript/images",
    "hash": "037834560ede8560e36c91111e34e8f93b21dab1",
    "text": "Learn how to use getters and setters on JavaScript objects"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLi1SNVIwc05GRnBz",
    "videoId": "-R5R0sNFFps",
    "title": "Object Oriented Javascript | The basics",
    "date": "2022-01-18T17:46:39Z",
    "slug": "object-oriented-javascript-the-basics",
    "image": {
      "name": "object-oriented-javascript-the-basics.jpg",
      "alt": "Object Oriented Javascript | The basics",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/object-oriented-javascript-the-basics/images/object-oriented-javascript-the-basics.jpg"
    },
    "status": "published",
    "description": "Learn how to couple data and functionality with objects in JavaScript.",
    "tags": [],
    "dirPath": "content/videos/videos/object-oriented-javascript-the-basics",
    "indexPath": "content/videos/videos/object-oriented-javascript-the-basics/index.mdx",
    "imagesPath": "content/videos/videos/object-oriented-javascript-the-basics/images",
    "hash": "eac9acef97f004d8fb31c00b82c376b4aa0a0e01",
    "text": "Learn how to couple data and functionality with objects in JavaScript.\n\nTHIS in JavaScript: [https://youtu.be/A9SaTI7-sM4](https://youtu.be/A9SaTI7-sM4)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkE5U2FUSTctc000",
    "videoId": "A9SaTI7-sM4",
    "title": "THIS in JavaScript",
    "date": "2022-01-17T16:00:05Z",
    "slug": "this-in-javascript",
    "image": {
      "name": "this-in-javascript.jpg",
      "alt": "THIS in JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/this-in-javascript/images/this-in-javascript.jpg"
    },
    "status": "published",
    "description": "Learn what this is in Javascript.",
    "tags": [],
    "dirPath": "content/videos/videos/this-in-javascript",
    "indexPath": "content/videos/videos/this-in-javascript/index.mdx",
    "imagesPath": "content/videos/videos/this-in-javascript/images",
    "hash": "e9ac560540deeb9a2471b95d04327dd3ef3bb2f1",
    "text": "Learn what this is in Javascript.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:44 Global this\n* 1:47 Methods\n* 3:37 bind & call\n* 7:47 4 ways to call a function\n* 8:38 arrow functions\n* 11:03 Summary"
  },
  {
    "type": "article",
    "wp_id": 759,
    "title": "Terraform Modules",
    "date": "2021-11-21T10:10:20",
    "slug": "terraform-modules",
    "image": {
      "name": "terraform-modules.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/terraform-modules/images/terraform-modules.png"
    },
    "status": "published",
    "description": "A terraform file can get very large very quickly as you add more and more resource blocks. Custom modules are a great way of organizing your terraform code into logical pieces. You might have one module that handles the VPC set up, one that handles RDS, and another for EC2 instances. In this post, we’ll \\[…\\]",
    "tags": [
      "aws",
      "terraform"
    ],
    "dirPath": "content/articles/terraform-modules",
    "indexPath": "content/articles/terraform-modules/index.mdx",
    "imagesPath": "content/articles/terraform-modules/images",
    "hash": "ed9f49257964c6e2b4dd078b2c9c0d2937e43529",
    "text": "A terraform file can get very large very quickly as you add more and more resource blocks. Custom modules are a great way of organizing your terraform code into logical pieces. You might have one module that handles the VPC set up, one that handles RDS, and another for EC2 instances. In this post, we'll look at how to make custom modules in terraform.\n\nIf you haven’t already, read the [Variables and Outputs in Terraform](https://sammeechward.com/variables-and-outputs-in-terraform/) article.\n\n## Module Setup\n\nWhen you create a new terraform module, you should create a new directory with at least the following three files inside:\n\n*   main.tf: The primary entrypoint to the entire configuration.\n*   variables.tf: Any input variables for the module. This allows the user running terraform to easily customize the configuration.\n*   outputs.tf: Any outputs from the module. This allows the user running terraform to easily get data about any resources.\n\nThese are the recommended filenames for a minimal module, even if they're empty.\n\n## Project Setup\n\nWhen you create a new terraform project, you should add these three files to the root directory.\n\n*   terraform\\_project\n*   `main.tf`\n*   `variables.tf`\n*   `outputs.tf`\n\nThis is a terraform module, it’s the root module. This is all you need to start using terraform, but we want to organize our code a little better using modules. So we can add a new `modules` directory to the project and add other modules in there.\n\nCreate the following project structure:\n\n*   terraform\\_project\n    *   `main.tf`\n    *   `variables.tf`\n    *   `outputs.tf`\n    *   modules\n        *   vpc\n            *   `main.tf`\n            *   `variables.tf`\n            *   `outputs.tf`\n        *   ec2\n            *   `main.tf`\n            *   `variables.tf`\n            *   `outputs.tf`\n\nIt’s the same structure as the root module. Each sub-module is its own isolated set of blocks that can be used and reused by the root module.\n\n## VPC Module\n\nThe code in this module is taken from the [Terraform | VPC, Subnets, EC2, and more](https://sammeechward.com/terraform-vpc-subnets-ec2-and-more/) article.\n\nThe following terraform code defines resources for:\n\n*   A VPC\n*   One public and one private subnet\n*   A route table\n*   An internet gateway\n*   A security group allowing access on port 80 from anywhere\n\nAlthough each project will have different requirements, it will most likely need all of these pieces with some customizations.\n\nAdd the following code to `modules/vpc/main.tf`:\n\n```ruby\nresource \"aws_vpc\" \"some_custom_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"some_public_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.1.0/24\"\n}\n\nresource \"aws_subnet\" \"some_private_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.2.0/24\"\n}\n\nresource \"aws_internet_gateway\" \"some_ig\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n}\n\nresource \"aws_route_table\" \"public_rt\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.some_ig.id\n  }\n}\n\nresource \"aws_route_table_association\" \"public_1_rt_a\" {\n  subnet_id      = aws_subnet.some_public_subnet.id\n  route_table_id = aws_route_table.public_rt.id\n}\n\nresource \"aws_security_group\" \"web_sg\" {\n  name   = \"HTTP and SSH\"\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n## Root Module\n\nAll of the VPC resources have been defined in `modules/vpc/main.tf`, but running terraform apply would do nothing because there’s nothing in the **root** module’s `main.tf`.\n\nAdd the following code to the **root** module’s `main.tf`:\n\n```ruby\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 1.0.0\"\n}\n\nprovider \"aws\" {\n  region = var.region\n}\n\nmodule \"my_vpc\" {\n  source = \"./modules/vpc\"\n}\n```\n\nThe first part is just the basic aws setup code, but under that is a `module` block. This will tell terraform to add the resources from the `modules/vpc` module.\n\nAdd the following code to **root** module’s `variables.tf` file:\n\n```ruby\nvariable \"region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n```\n\nJust to make it easy to change the region that’s used.\n\nIf you run `terraform init` to setup the project, then `terraform apply`, this will create all of the resources in the VPC module.\n\n## Module Variables\n\nCurrently, the CIDR blocks for the VPC and subnets are hardcoded into the VPC module. So this module will always use those CIDR blocks no matter what.\n\n```ruby\nresource \"aws_vpc\" \"some_custom_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n}\n\nresource \"aws_subnet\" \"some_public_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.1.0/24\"\n}\n\nresource \"aws_subnet\" \"some_private_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.2.0/24\"\n}\n```\n\nLet’s make these more dynamic using variables.\n\nIn `modules/vpc/variables.tf` add the following variables:\n\n```ruby\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for the entire VPC\"\n  type        = string\n}\n\nvariable \"public_sub_1_cidr\" {\n  description = \"CIDR block for the public subnet\"\n  type        = string\n}\n\nvariable \"private_sub_1_cidr\" {\n  description = \"CIDR block for the private subnet\"\n  type        = string\n}\n```\n\nThen in `modules/vpc/main.tf` modify the resource blocks to use the variables:\n\n```ruby\nresource \"aws_vpc\" \"some_custom_vpc\" {\n  cidr_block = var.vpc_cidr\n}\n\nresource \"aws_subnet\" \"some_public_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = var.public_sub_1_cidr\n}\n\nresource \"aws_subnet\" \"some_private_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = var.private_sub_1_cidr\n}\n```\n\nNow the CIDR values are coming from terraform variables, but where do we define the values for these variables?\n\nModify the root module’s `main.tf` module block:\n\n```ruby\nmodule \"my_vpc\" {\n  source = \"./modules/vpc\"\n\n  vpc_cidr           = \"10.0.0.0/16\"\n  public_sub_1_cidr  = \"10.0.1.0/24\"\n  private_sub_1_cidr = \"10.0.2.0/24\"\n}\n```\n\nIf a sub-module defines variables in the variables.tf file, then the root module can pass in values when it defines the module block. And modules can be reused, so you could easily make multiple VPCs by just defining more of these blocks.\n\n```ruby\nmodule \"my_vpc_1\" {\n  source = \"./modules/vpc\"\n\n  vpc_cidr           = \"10.0.0.0/16\"\n  public_sub_1_cidr  = \"10.0.1.0/24\"\n  private_sub_1_cidr = \"10.0.2.0/24\"\n}\n\nmodule \"my_vpc_2\" {\n  source = \"./modules/vpc\"\n\n  vpc_cidr           = \"192.168.0.0/16\"\n  public_sub_1_cidr  = \"192.168.1.0/24\"\n  private_sub_1_cidr = \"192.168.2.0/24\"\n}\n```\n\nAnd we don’t have to duplicate all of the VPC setup code.\n\n## Module Outputs\n\nThe VPC is set up and we have a public subnet and security group. We could use this to deploy an ec2 instance running an HTTP server.\n\nModify the root’s `main.tf` file to create a new ec2 instance:\n\n```ruby\nmodule \"my_vpc\" {\n  source = \"./modules/vpc\"\n\n  vpc_cidr           = \"10.0.0.0/16\"\n  public_sub_1_cidr  = \"10.0.1.0/24\"\n  private_sub_1_cidr = \"10.0.2.0/24\"\n}\n\ndata \"aws_ami\" \"amz_linux_2\" {\n  most_recent = true\n  name_regex  = \"amzn2-ami-hvm-2.*.1-x86_64-gp2\"\n  owners      = [\"amazon\"]\n}\n\nresource \"aws_instance\" \"web_instance\" {\n  ami           = data.aws_ami.amz_linux_2.id\n  instance_type = \"t2.nano\"\n\n  subnet_id                   = ?\n  vpc_security_group_ids      = ?\n  associate_public_ip_address = true\n\n  user_data = <<-EOF\n  #!/bin/bash -ex\n  amazon-linux-extras install nginx1 -y\n  systemctl enable nginx\n  systemctl start nginx\n  EOF\n}\n```\n\nFirst, we set up the VPC, then we set up a new EC2 instance running Nginx. But notice that we need to provide the subnet id and the security group id from the resources that are defined in the VPC module. We can’t access those here because they’re in a different module, so we need to **output** them from the module.\n\nAdd the following code to `modules/vpc/output.tf`:\n\n```ruby\noutput \"public_subnet_id\" {\n  value = aws_subnet.some_public_subnet.id\n}\n\noutput \"public_sg_id\" {\n  value = aws_security_group.public_sg.id\n}\n```\n\nThis will output the public subnet and public security group ids. If this were done in the root module then we would see this data printed to the console after running `terraform apply`. But in a submodule, outputs are used to access data outside of the module.\n\nModify the root module’s `aws_instance` block to use these values:\n\n```ruby\nresource \"aws_instance\" \"web_instance\" {\n  ...\n\n  subnet_id                   = module.my_vpc.public_subnet_id\n  vpc_security_group_ids      = [module.my_vpc.public_sg_id]\n\n  ...\n}\n```\n\nNow we are accessing the needed values from the vpc module’s outputs. If you run `terraform apply` now, you will have an ec2 instance running nginx on the public subnet of the custom VPC.\n\nAdd the following output to the root module’s `outputs.tf`\n\n```ruby\noutput \"public_ip\" {\n  value = aws_instance.web_instance.public_ip\n}\n```\n\nAnd now the public ip address of the ec2 instance will get logged to the console.\n\n## EC2 Module\n\nEven though it’s only a small amount of code, let’s move the ec2 code into it’s own module. This is what the ec2 module should look like:\n\n`modules/ec2/variables.tf`:\n\n```ruby\nvariable \"public_sg_id\" {\n  description = \"ID of the security group for the public subnet\"\n  type        = string\n}\n\nvariable \"public_subnet_id\" {\n  description = \"ID of the public subnet\"\n  type        = string\n}\n```\n\n`modules/ec2/outputs.tf`:\n\n```ruby\noutput \"public_ip\" {\n  value = aws_instance.web_instance.public_ip\n}\n```\n\n`modules/ec2/main.tf`:\n\n```ruby\ndata \"aws_ami\" \"amz_linux_2\" {\n  most_recent = true\n  name_regex  = \"amzn2-ami-hvm-2.*.1-x86_64-gp2\"\n  owners      = [\"amazon\"]\n}\n\nresource \"aws_instance\" \"web_instance\" {\n  ami           = data.aws_ami.amz_linux_2.id\n  instance_type = \"t2.nano\"\n\n  subnet_id                   = var.public_subnet_id\n  vpc_security_group_ids      = [var.public_sg_id]\n  associate_public_ip_address = true\n\n  user_data = <<-EOF\n  #!/bin/bash -ex\n  amazon-linux-extras install nginx1 -y\n  systemctl enable nginx\n  systemctl start nginx\n  EOF\n}\n```\n\nNow the subnet and security group id values need to be passed into the ec2 module’s variables so they can be used by the `ec2_instnace` resource block.\n\nModify the root module’s `main.tf` file:\n\n```ruby\nmodule \"my_vpc\" {\n  source = \"./modules/vpc\"\n\n  vpc_cidr           = \"10.0.0.0/16\"\n  public_sub_1_cidr  = \"10.0.1.0/24\"\n  private_sub_1_cidr = \"10.0.2.0/24\"\n}\n\nmodule \"my_ec2\" {\n  source = \"./modules/ec2\"\n\n  public_subnet_id          = module.my_vpc.public_subnet_id\n  public_sg_id  = module.my_vpc.public_sg_id\n}\n```\n\nNow we are getting the subnet and security group ids from the vpc module’s outputs and passing them to the ec2 module’s variables.\n\nOne more thing, the ec2 module is outputting the public IP address. It would be nice to still see that on the console when this is done.\n\nModify the root module’s `outputs.tf`:\n\n```ruby\noutput \"public_ip\" {\n  value = module.my_ec2.public_ip\n}\n```\n\nNow run terraform apply. This will setup the VPC and the ec2 instance and output the public ip address to terminal.\n\nComplete Code Example: [https://github.com/Sam-Meech-Ward/terraform\\_modules](https://github.com/Sam-Meech-Ward/terraform_modules)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmJzc1g5T3Q5WU9J",
    "videoId": "bssX9Ot9YOI",
    "title": "Express JS Crash Course | Web Dev Tutorial for Beginners",
    "date": "2021-11-17T16:14:42Z",
    "slug": "express-js-crash-course-web-dev-tutorial-for-beginners",
    "image": {
      "name": "express-js-crash-course-web-dev-tutorial-for-beginners.jpg",
      "alt": "Express JS Crash Course | Web Dev Tutorial for Beginners",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/express-js-crash-course-web-dev-tutorial-for-beginners/images/express-js-crash-course-web-dev-tutorial-for-beginners.jpg"
    },
    "status": "published",
    "description": "Learn how to create a web application using Express js and EJS. This video goes over the basics of HTTP and backend programming to create a very basic note-taking app. ",
    "tags": [],
    "dirPath": "content/videos/videos/express-js-crash-course-web-dev-tutorial-for-beginners",
    "indexPath": "content/videos/videos/express-js-crash-course-web-dev-tutorial-for-beginners/index.mdx",
    "imagesPath": "content/videos/videos/express-js-crash-course-web-dev-tutorial-for-beginners/images",
    "hash": "4c6ebd95dac61f7efade384ef3bee23a5cc34fb3",
    "text": "Learn how to create a web application using Express js and EJS. This video goes over the basics of HTTP and backend programming to create a very basic note-taking app. \n\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:26 HTTP\n* 1:41 App Setup\n* 4:35 PORTs\n* 6:36 GET Requests\n* 8:02 Inspecting HTTP Requests\n* 9:47 nodemon\n* 12:02 Static Files\n* 15:31 Dynamic HTML\n* 17:23 EJS\n* 21:17 EJS Tags\n* 23:19 Passing Data to EJS\n* 24:37 Get All Notes\n* 33:08 Get Single Note\n* 39:47 404\n* 43:10 Fake Database\n* 45:57 Create a Note\n* 56:11 Redirect\n* 58:55 Delete Note\n* 1:05:28 Search Notes\n* 1:11:24 Summary\n\n\n🔗Other resources:\nDatabase integration: [https://expressjs.com/en/guide/database-integration.html](https://expressjs.com/en/guide/database-integration.html)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLklxemd1NVVFREtv",
    "videoId": "Iqzgu5UEDKo",
    "title": "Setup a NAT Gateway on AWS",
    "date": "2021-11-16T15:50:54Z",
    "slug": "setup-a-nat-gateway-on-aws",
    "image": {
      "name": "setup-a-nat-gateway-on-aws.jpg",
      "alt": "Setup a NAT Gateway on AWS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/setup-a-nat-gateway-on-aws/images/setup-a-nat-gateway-on-aws.jpg"
    },
    "status": "published",
    "description": "Learn what a NAT gateway is and how to set one up on AWS to allow internet access on a private subnet.",
    "tags": [],
    "dirPath": "content/videos/videos/setup-a-nat-gateway-on-aws",
    "indexPath": "content/videos/videos/setup-a-nat-gateway-on-aws/index.mdx",
    "imagesPath": "content/videos/videos/setup-a-nat-gateway-on-aws/images",
    "hash": "9b726cc6b48bbacb8456a5082ac49eb5d02ba9e1",
    "text": "Learn what a NAT gateway is and how to set one up on AWS to allow internet access on a private subnet.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:20 Theory\n* 2:15 Setup NAT Gateway\n* 3:50 Summary\n* 4:44 Destroying Infrastructure\n\n🔗Other tutorials:\nSetting up an S3 Gateway VPC Endpoint for Private Subnets: [https://youtu.be/tfSzEU9xfIQ](https://youtu.be/tfSzEU9xfIQ)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnRmU3pFVTl4ZklR",
    "videoId": "tfSzEU9xfIQ",
    "title": "VPC Gateway Endpoints for Private S3 Bucket Connections",
    "date": "2021-11-16T15:50:34Z",
    "slug": "vpc-gateway-endpoints-for-private-s3-bucket-connections",
    "image": {
      "name": "vpc-gateway-endpoints-for-private-s3-bucket-connections.jpg",
      "alt": "VPC Gateway Endpoints for Private S3 Bucket Connections",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/vpc-gateway-endpoints-for-private-s3-bucket-connections/images/vpc-gateway-endpoints-for-private-s3-bucket-connections.jpg"
    },
    "status": "published",
    "description": "How to set up a VPC endpoint to allow private connections to s3 buckets from private subnets.",
    "tags": [],
    "dirPath": "content/videos/videos/vpc-gateway-endpoints-for-private-s3-bucket-connections",
    "indexPath": "content/videos/videos/vpc-gateway-endpoints-for-private-s3-bucket-connections/index.mdx",
    "imagesPath": "content/videos/videos/vpc-gateway-endpoints-for-private-s3-bucket-connections/images",
    "hash": "fc276412976cdf42e36de781f065dc27981ee2b9",
    "text": "How to set up a VPC endpoint to allow private connections to s3 buckets from private subnets.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:16 Theory\n* 1:12 S3 Gateway\n* 4:10 Summary\n\n🔗Other tutorials:\nSetting up an S3 Gateway VPC Endpoint for Private Subnets: [https://youtu.be/tfSzEU9xfIQ](https://youtu.be/tfSzEU9xfIQ)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlRVVHFZRVpaVWRj",
    "videoId": "TUTqYEZZUdc",
    "title": "AWS VPC & Subnets For Beginners",
    "date": "2021-11-15T19:37:17Z",
    "slug": "aws-vpc-&-subnets-for-beginners",
    "image": {
      "name": "aws-vpc-&-subnets-for-beginners.jpg",
      "alt": "AWS VPC & Subnets For Beginners",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/aws-vpc-&-subnets-for-beginners/images/aws-vpc-&-subnets-for-beginners.jpg"
    },
    "status": "published",
    "description": "Learn how to set up a custom VPC with public and private subnets. ",
    "tags": [],
    "dirPath": "content/videos/videos/aws-vpc-&-subnets-for-beginners",
    "indexPath": "content/videos/videos/aws-vpc-&-subnets-for-beginners/index.mdx",
    "imagesPath": "content/videos/videos/aws-vpc-&-subnets-for-beginners/images",
    "hash": "0a14e849d8220c539b630a03e056c05df9623f2c",
    "text": "Learn how to set up a custom VPC with public and private subnets. \n\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:34 What is a VPC\n* 2:43 Setting Up a VPC\n* 5:01 Creating Subnets \n* 6:46 EC2 with custom VPC\n* 8:29 Internet Gateway\n* 12:06 Deploying to Private Subnet\n* 14:47 Reverse Proxy\n\n\n🔗Other tutorials:\nIntro to Horizontal Scaling, Load Balancing, Immutable Infrastructure with AWS: [https://youtu.be/FEbfvTZCYQQ](https://youtu.be/FEbfvTZCYQQ)\nIntro to Packer with AWS (Creating AMIs): [https://youtu.be/dde-bWUeRMo](https://youtu.be/dde-bWUeRMo)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLldYcGxndk5qVkQ0",
    "videoId": "WXplgvNjVD4",
    "title": "Get read for advent of code 2021",
    "date": "2021-11-09T18:21:54Z",
    "slug": "get-read-for-advent-of-code-2021",
    "image": {
      "name": "get-read-for-advent-of-code-2021.jpg",
      "alt": "Get read for advent of code 2021",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/get-read-for-advent-of-code-2021/images/get-read-for-advent-of-code-2021.jpg"
    },
    "status": "published",
    "description": "Watch me solve an advent of code problem from 2016 yay.",
    "tags": [],
    "dirPath": "content/videos/videos/get-read-for-advent-of-code-2021",
    "indexPath": "content/videos/videos/get-read-for-advent-of-code-2021/index.mdx",
    "imagesPath": "content/videos/videos/get-read-for-advent-of-code-2021/images",
    "hash": "40295731c936bb2f59b31c5d1dba7a8214ae2953",
    "text": "Watch me solve an advent of code problem from 2016 yay.\n\nadventofcode.com\n\nLeaderboard: 279615-649f7569"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkFtUWVlQjR5Z1pj",
    "videoId": "AmQeeB4ygZc",
    "title": "AWS Auto Scaling Groups and Load Balancers",
    "date": "2021-11-08T16:02:07Z",
    "slug": "aws-auto-scaling-groups-and-load-balancers",
    "image": {
      "name": "aws-auto-scaling-groups-and-load-balancers.jpg",
      "alt": "AWS Auto Scaling Groups and Load Balancers",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/aws-auto-scaling-groups-and-load-balancers/images/aws-auto-scaling-groups-and-load-balancers.jpg"
    },
    "status": "published",
    "description": "Learn how to use Auto Scaling Groups and Application Load Balancers in AWS. ",
    "tags": [],
    "dirPath": "content/videos/videos/aws-auto-scaling-groups-and-load-balancers",
    "indexPath": "content/videos/videos/aws-auto-scaling-groups-and-load-balancers/index.mdx",
    "imagesPath": "content/videos/videos/aws-auto-scaling-groups-and-load-balancers/images",
    "hash": "76763343dd9db932a555eff86d151d32f82b6e11",
    "text": "Learn how to use Auto Scaling Groups and Application Load Balancers in AWS. \n\nAn auto scaling group will automatically manage the creation and destruction of EC2 instances while elastic load balancers can balance network traffic between the instances. \n\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:58 Launch Template\n* 5:22 Auto Scaling Group\n* 9:27 Application Load Balancer\n* 12:28 Target Group\n* 14:28 Testing the Load Balancer\n* 15:53 Connecting Scaling Group and Load Balancer\n* 18:36 Updating EC2 Instances\n* 21:42 SSL Certificate\n* 24:13 Route 53 Record\n* 25:39 Summary\n\n🔗Other tutorials:\nIntro to Horizontal Scaling, Load Balancing, Immutable Infrastructure with AWS: [https://youtu.be/FEbfvTZCYQQ](https://youtu.be/FEbfvTZCYQQ)\nIntro to Packer with AWS (Creating AMIs): [https://youtu.be/dde-bWUeRMo](https://youtu.be/dde-bWUeRMo)\nCloud-init and Terraform with AWS: [https://sammeechward.com/cloud-init-and-terraform-with-aws/](https://sammeechward.com/cloud-init-and-terraform-with-aws/)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "article",
    "wp_id": 745,
    "title": "Cloud-init and Terraform with AWS",
    "date": "2021-10-31T13:03:27",
    "slug": "cloud-init-and-terraform-with-aws",
    "image": {
      "name": "cloud-init-and-terraform-with-aws.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/cloud-init-and-terraform-with-aws/images/cloud-init-and-terraform-with-aws.png"
    },
    "status": "published",
    "description": "In this article, we’ll look at how to use cloud-init with terraform to install and configure nginx on an EC2 instance.",
    "tags": [
      "aws",
      "cloud-init",
      "terraform",
      "user-data"
    ],
    "dirPath": "content/articles/cloud-init-and-terraform-with-aws",
    "indexPath": "content/articles/cloud-init-and-terraform-with-aws/index.mdx",
    "imagesPath": "content/articles/cloud-init-and-terraform-with-aws/images",
    "hash": "9135c451c093aad8eba9eb9450086f8b629cdc4c",
    "text": "In this article, we’ll look at how to use cloud-init with terraform to install and configure nginx on an EC2 instance.\n\n## Why use cloud-init?\n\nWhen we’re setting up an EC2 instance, using Terraform or the AWS console, or any other method, we might want to perform some automated configuration when it first launches. Without logging onto the instance manually, we might want to create users, install software, define some environment variables or so many other things. These are things that will only run once when the instance is created.\n\nYou could use cloud-init to completely configure a bare-bones EC2 instance and replace a tool like packer, but that’s not necessarily what you would to use it for. Creating an AMI that is completely configured to run an application is a good way of deploying infrastructure, however, there may be some things missing when you create the AMI. Environment variables for a web app or IP addresses for a load balancer might not be known when you create the AMI, so you can set up an AMI without these details and use cloud-init to configure those details when the AMI is created.\n\n## What is cloud-init?\n\nCloud-init is a piece of software that configures a cloud VM when it’s first initialized. We can use cloud-init to customize a VM when we create it by doing things like updating environment variables, configuring custom user data, installing software, etc.\n\nLet’s say you set up a new EC2 instance on AWS, the only user that exists on the instance is root. There are not other users and no SSH keys ohn the instance. But you’re able to access that instance using a non-root user, `ec2-user` for all the centos derivatives, using an SSH key that was just magically already installed on the instance. That’s because there’s a piece of software called cloud-init running on most cloud VMs that will do some work for you the first time you setup an instance. Out of the many things that cloud-init does, it creates a new user and pulls our SSH key onto the instance.\n\nCloud-init will identify the cloud it is running on during boot, read any provided metadata from the cloud, and initialize the system accordingly. This may involve setting up the network and storage devices to configure SSH access key and many other aspects of a system. Later on, the cloud-init will also parse and process any optional user or vendor data that was passed to the instance.\n\n*   https://cloudinit.readthedocs.io/en/latest/\n\n## EC2\n\nLet’s start with a basic `aws_instance` resource running amazon linux 2.\n\n```ruby\nprovider \"aws\" {\n  region  = \"us-west-1\"\n}\n\nresource \"aws_instance\" \"web_instances\" {\n  ami           = \"ami-03ab7423a204da002\"\n  instance_type = \"t2.micro\"\n\n  user_data = ?\n}\n```\n\n`user_data` is something we can pass to this resource to be run when the instance is first created. This could be a script, like a bash script, or it can be a cloud-init configuration.\n\n## cloud-config\n\nA cloud-config file is a YAML file that we can pass to cloud-init to tell it to do things. For this example we are going to create a cloud-config file that:\n\n*   Installs nginx\n*   Updates the default html page for nginx\n*   Starts and enables nginx\n\n### `runcmd`\n\n```yaml\n#cloud-config\nruncmd:\n  - amazon-linux-extras install -y nginx1\n  - systemctl enable --no-block nginx \n  - systemctl start --no-block nginx \n```\n\n*   The first line `#cloud-config` is needed to tell the cloud-init program that this is a cloud-config file.\n*   The second line [`runcmd`](https://cloudinit.readthedocs.io/en/latest/topics/examples.html#run-commands-on-first-boot) is one of many directives we can use with cloud-init. It will execute shell commands. For a full list of derectives, check out https://cloudinit.readthedocs.io\n*   The three lines below that are a list of shell commands to be executed on the instance. Adding `--no-block` here is necessary because cloud-init is booted under systemd and could cause a deadlock if it has to wait for systemd to start another service.\n\nSo that will be enough to install nginx, but what about updating the default `index.html` file? There are a few ways we can do this, let’s look at `write_files`.\n\n### `write_files`\n\n```yaml\n#cloud-config\nwrite_files: \n  - path: /run/myserver/index.html\n    owner: root:root\n    permissions: \"0644\"\n    content: \"<h1>cloud init was here</h1>\"\nruncmd:\n  - amazon-linux-extras install -y nginx1\n  - mv /run/myserver/index.html /usr/share/nginx/html/index.html\n  - systemctl enable --no-block nginx \n  - systemctl start --no-block nginx \n```\n\nThe `write_files` directive will create a file on the instance. I think the options for `write_files` are pretty obvious, but just in case, here’s the docs: https://cloudinit.readthedocs.io/en/latest/topics/examples.html#writing-out-arbitrary-files\n\nYea, the docs for cloud-init aren’t great.\n\nNotice that we’re writing the file to some random directory in `/run` then moving it to it’s proper location. That’s because write\\_files will be executed before runcmd and we need Nginx to be installed before we write the file to its final path `/usr/share/nginx/html/index.html`.\n\nWhy `/run` instead of `/tmp`? I’m not entirely sure. Here’s what the docs say:\n\n```html\n# Note: Don't write files to /tmp from cloud-init use /run/somedir instead.\n# Early boot environments can race systemd-tmpfiles-clean LP: #1707222.\n```\n\nAnyway, that’s the complete config file for this, just save it in the terraform directory as `server.yml`, or whatever name you want.\n\n## `cloudinit_config`\n\nNow it’s time to pass this configuration to the EC2 instance as user data, but before we can do that, we need to create a `cloudinit_config` resource:\n\n```ruby\ndata \"cloudinit_config\" \"server_config\" {\n  gzip          = true\n  base64_encode = true\n  part {\n    content_type = \"text/cloud-config\"\n    content = file(\"${path.module}/server.yml\")\n  }\n}\n```\n\nThis will work as long as `server.yml` is in the same directory as `main.tf`. Then we just tell the EC2 instance to use this configuration.\n\n```ruby\nresource \"aws_instance\" \"web_instances\" {\n  ami           = \"ami-03ab7423a204da002\"\n  instance_type = \"t2.micro\"\n\n  user_data = data.cloudinit_config.server_config.rendered\n}\n```\n\nAnd we’re done! Run `terraform apply` and you will have a new ec2 instance with Nginx installed. That displays `cloud init was here`\n\n## `templatefile`\n\nIt’s displaying `cloud init was here` because that’s what’s hardcoded into the YAML file:\n\n```yaml\nwrite_files: \n    ...\n    content: \"<h1>cloud init was here</h1>\"\n```\n\n`cloud init was here` is a fun message, but what if we wanted the data to be more dynamic? What if we wanted to be able to display the id of the security group on the web page? I know it sounds kind of dumb but this demonstrates something you might actually want to do. Pass data from terraform to the cloud-config file.\n\nIf we set up an Nginx instance to be a load balancer to other instances that are created with Terraform, then we’ll need to pass the config file all of the ip addresses for the instances. If we’re using cloud-init to define environment variables, those too might be coming from terraform in some way. To summarize, we might need to pass data from terraform to the config file.\n\nTo do this, we can use `templatefile` instead of `file` in the `cloudinit_config` resource block.\n\n```ruby\ndata \"cloudinit_config\" \"server_config\" {\n  gzip          = true\n  base64_encode = true\n  part {\n    content_type = \"text/cloud-config\"\n    content = templatefile(\"${path.module}/server.yml\", {\n      header: aws_security_group.server_sg.id\n    })\n  }\n}\n```\n\n`templatefile` allows us to pass variables directly to the file, in this case passing a variable named `header` to `server.yml`. Now the `server.yml` file can use the value by simply referencing the variable name.\n\n```yaml\nwrite_files: \n  ...\n    content: \"<h1>${info}</h1>\"\n```\n\nRun `terraform apply` again and you’ll see the id of the security group.\n\n## Code\n\n**server.yml**\n\n```yaml\n#cloud-config\nwrite_files: \n  - path: /run/myserver/index.html\n    owner: root:root\n    permissions: \"0644\"\n    content: \"<h1>${header}</h1>\"\nruncmd:\n  - amazon-linux-extras install -y nginx1\n  - mv /run/myserver/index.html /usr/share/nginx/html/index.html\n  - systemctl enable --no-block nginx \n  - systemctl start --no-block nginx \n```\n\n**main.tf**\n\n```ruby\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 1.0.0\"\n}\n\nprovider \"aws\" {\n  region  = \"us-west-1\"\n}\n\nresource \"aws_security_group\" \"server_sg\" {\n  name = \"Load Balancer Security Group\"\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\ndata \"cloudinit_config\" \"server_config\" {\n  gzip          = true\n  base64_encode = true\n  part {\n    content_type = \"text/cloud-config\"\n    content = templatefile(\"${path.module}/server.yml\", {\n      header: aws_security_group.server_sg.id\n    })\n  }\n}\n\nresource \"aws_instance\" \"server_instance1\" {\n  ami           = \"ami-03ab7423a204da002\"\n  instance_type = \"t2.micro\"\n\n  key_name = \"CaliKey\"\n\n  vpc_security_group_ids      = [aws_security_group.server_sg.id]\n  user_data                   = data.cloudinit_config.server_config.rendered\n  associate_public_ip_address = true\n}\n```"
  },
  {
    "type": "article",
    "wp_id": 743,
    "title": "S3 and IAM with Terraform",
    "date": "2021-10-31T06:00:03",
    "slug": "s3-and-iam-with-terraform",
    "image": {
      "name": "s3-and-iam-with-terraform.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/s3-and-iam-with-terraform/images/s3-and-iam-with-terraform.png"
    },
    "status": "published",
    "description": "In this post, we will look at how to set up an S3 bucket and an EC2 instance using terraform. The S3 bucket will be set up so it can only be accessed privately and the EC2 instance will get access to the S3 bucket using IAM. I’ll be using the standard module configuration for \\[…\\]",
    "tags": [
      "aws",
      "iac",
      "terraform"
    ],
    "dirPath": "content/articles/s3-and-iam-with-terraform",
    "indexPath": "content/articles/s3-and-iam-with-terraform/index.mdx",
    "imagesPath": "content/articles/s3-and-iam-with-terraform/images",
    "hash": "766289e6475e232989dd364849cc68f80b96d2ea",
    "text": "In this post, we will look at how to set up an S3 bucket and an EC2 instance using terraform. The S3 bucket will be set up so it can only be accessed privately and the EC2 instance will get access to the S3 bucket using IAM.\n\nI’ll be using the standard module configuration for this, so if you haven’t already, check out my post on [Variables and Outputs in Terraform](https://sammeechward.com/variables-and-outputs-in-terraform/)\n\n## S3 (`aws_s3_bucket`)\n\nJust like when using the web console, creating an s3 bucket in terraform is one of the easiest things to do.\n\n```ruby\nresource \"aws_s3_bucket\" \"some-bucket\" {\n  bucket = \"my-bucket-name\"\n}\n```\n\nEasy Done! But wait, there are two things we should know about this simple implementation:\n\n1.  The S3 bucket will allow public access by default, which we don’t want in this case. We want it to be private.\n2.  The S3 bucket can’t be deleted by terraform if it contains any files. So running `terraform destroy` won’t work.\n\nOur S3 bucket needs to be private so we can only access it from the EC2 instance. I’m also assuming that I’m setting up a test environment. I want to be able to create and destroy the S3 bucket with the rest of my infrastructure as I see necessary when I’m testing the application. In production, I would never want to delete the S3 bucket, but I’m not there yet.\n\nSo let’s make some changes. First, let’s allow terraform to destroy the bucket:\n\n```ruby\nresource \"aws_s3_bucket\" \"some_bucket\" {\n  bucket = \"my-bucket-name\"\n  force_destroy = true\n}\n```\n\nAnd let’s make this bucket private:\n\n```ruby\nresource \"aws_s3_bucket_public_access_block\" \"some_bucket_access\" {\n  bucket = aws_s3_bucket.some_bucket.id\n\n  block_public_acls   = true\n  block_public_policy = true\n  ignore_public_acls  = true\n}\n```\n\nOk so a little bit more code, but at least the bucket is private and we can delete it.\n\nThe bucket is created and we’ll set up the EC2 instance soon, but before we can do that, we need to create an IAM role and policy. If you need a refresher on IAM, check out this video: https://youtu.be/BSodkwWB-8s\n\n## IAM Policy (`aws_iam_policy`)\n\nFirst, let’s create the policy that will allow access to the S3 bucket. This is going to be for a web app to store images, so we’ll need `PutObject`, `GetObject`, `ListBucket`, and `DeleteObject`.\n\n```ruby\nresource \"aws_iam_policy\" \"bucket_policy\" {\n  name        = \"my-bucket-policy\"\n  path        = \"/\"\n  description = \"Allow \"\n  policy = ?\n}\n```\n\nThis resource block will create a policy, but we need to define the rules of the policy. IAM policies are written in JSON so we need to define these rules as valid IAM JSON. Maybe you’re able to write IAM policy JSON from scratch, or maybe you use the web console to determine the correct JSON, either way, you’ll end up with the following JSON:\n\n```ruby\n{\n  \"Version\" : \"2012-10-17\",\n  \"Statement\" : [\n    {\n      \"Sid\" : \"VisualEditor0\",\n      \"Effect\" : \"Allow\",\n      \"Action\" : [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:ListBucket\",\n        \"s3:DeleteObject\"\n      ],\n      \"Resource\" : [\n        \"arn:aws:s3:::*/*\",\n        \"arn:aws:s3:::my-bucket-name\"\n      ]\n    }\n  ]\n}\n```\n\nThere are a few ways we can attach this JSON to the policy, the simplest option is to use `jsonencode`.\n\n```ruby\nresource \"aws_iam_policy\" \"bucket_policy\" {\n  name        = \"my-bucket-policy\"\n  path        = \"/\"\n  description = \"Allow \"\n\n  policy = jsonencode({\n    \"Version\" : \"2012-10-17\",\n    \"Statement\" : [\n      {\n        \"Sid\" : \"VisualEditor0\",\n        \"Effect\" : \"Allow\",\n        \"Action\" : [\n          \"s3:PutObject\",\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:DeleteObject\"\n        ],\n        \"Resource\" : [\n          \"arn:aws:s3:::*/*\",\n          \"arn:aws:s3:::my-bucket-name\"\n        ]\n      }\n    ]\n  })\n}\n```\n\nTerraform has a `jsonencode` function that will convert the JSON looking code above into valid JSON syntax for the policy.\n\n## IAM Role (`aws_iam_role`)\n\nThe next thing we need to do is create an IAM role. We can assign the S3 bucket policy to this role, and any other policies we might need, then we can attach this single role to the EC2 instance we create. The important thing to note right now is that the IAM role is going to be used by an EC2 instance.\n\n```ruby\nresource \"aws_iam_role\" \"some_role\" {\n  name = \"my_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Sid    = \"\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n}\n```\n\nWe’re using the `jsonencode` function again to create an IAM role for an EC2 instance. This role does nothing right now, we still need to attach the S3 policy.\n\n## Policy Attachment (`aws_iam_role_policy_attachment`)\n\nAnother resource block is needed to attach the policy to the role.\n\n```ruby\nresource \"aws_iam_role_policy_attachment\" \"some_bucket_policy\" {\n  role       = aws_iam_role.some_role.name\n  policy_arn = aws_iam_policy.bucket_policy.arn\n}\n```\n\nThat’s it, an `aws_iam_role_policy_attachment` needs a role name and a policy arn. Since we’re making the bucket policy with terraform, we can get the ARN from the resource using it’s local name. If we wanted to add a policy that already existed on AWS, we could just hard-code the arn. For example, this is what it would look like if we wanted to attach the cloudwatch agent server policy:\n\n```ruby\nresource \"aws_iam_role_policy_attachment\" \"cloud_watch_policy\" {\n  role       = aws_iam_role.some_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\"\n}\n```\n\n## aws\\_iam\\_instance\\_profile\n\nOk, so there’s one more step that’s kind of hidden when we’re using the AWS web console. We can’t just attach an IAM role to an ec2 instance, we actually need an IAM instance profile resource to connect the EC2 instance and the policy. It’s pretty much nothing, but it’s something you need to make:\n\n```ruby\nresource \"aws_iam_instance_profile\" \"some_profile\" {\n  name = \"some-profile\"\n  role = aws_iam_role.some_role.name\n}\n```\n\n## EC2\n\nNow we can actually create the EC2 instance. Your resource will hopefully contain more arguments, but here’s the bare minimum:\n\n```ruby\nresource \"aws_instance\" \"web_instances\" {\n  ami           = \"ami-03ab7423a204da002\"\n  instance_type = \"t2.micro\"\n\n  iam_instance_profile = aws_iam_instance_profile.some_profile.id\n}\n```\n\nThis will create a new instance with `PutObject`, `GetObject`, `ListBucket`, and `DeleteObject` access on the S3 bucket. So we could log onto the instance using SSH and start accessing the bucket or host a web app that uses the S3 bucket for storage. Whatever, the EC2 instance has access to the bucket.\n\n## Complete Code\n\n```ruby\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 1.0.0\"\n}\n\nprovider \"aws\" {\n  region  = \"us-west-2\"\n}\n\nresource \"aws_s3_bucket\" \"some-bucket\" {\n  bucket = \"my-bucket-name\"\n}\n\nresource \"aws_s3_bucket\" \"some_bucket\" {\n  bucket = \"my-bucket-name\"\n  force_destroy = true\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"some_bucket_access\" {\n  bucket = aws_s3_bucket.some_bucket.id\n\n  block_public_acls   = true\n  block_public_policy = true\n  ignore_public_acls  = true\n}\n\nresource \"aws_iam_policy\" \"bucket_policy\" {\n  name        = \"my-bucket-policy\"\n  path        = \"/\"\n  description = \"Allow \"\n\n  policy = jsonencode({\n    \"Version\" : \"2012-10-17\",\n    \"Statement\" : [\n      {\n        \"Sid\" : \"VisualEditor0\",\n        \"Effect\" : \"Allow\",\n        \"Action\" : [\n          \"s3:PutObject\",\n          \"s3:GetObject\",\n          \"s3:ListBucket\",\n          \"s3:DeleteObject\"\n        ],\n        \"Resource\" : [\n          \"arn:aws:s3:::*/*\",\n          \"arn:aws:s3:::my-bucket-name\"\n        ]\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role\" \"some_role\" {\n  name = \"my_role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Sid    = \"\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"some_bucket_policy\" {\n  role       = aws_iam_role.some_role.name\n  policy_arn = aws_iam_policy.bucket_policy.arn\n}\n\nresource \"aws_iam_role_policy_attachment\" \"cloud_watch_policy\" {\n  role       = aws_iam_role.some_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\"\n}\n\nresource \"aws_iam_instance_profile\" \"some_profile\" {\n  name = \"some-profile\"\n  role = aws_iam_role.some_role.name\n}\n\nresource \"aws_instance\" \"web_instances\" {\n  ami           = \"ami-03ab7423a204da002\"\n  instance_type = \"t2.micro\"\n\n  iam_instance_profile = aws_iam_instance_profile.some_profile.id\n}\n```"
  },
  {
    "type": "article",
    "wp_id": 740,
    "title": "Variables and Outputs in Terraform",
    "date": "2021-10-31T04:37:15",
    "slug": "variables-and-outputs-in-terraform",
    "image": {
      "name": "variables-and-outputs-in-terraform.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/variables-and-outputs-in-terraform/images/variables-and-outputs-in-terraform.png"
    },
    "status": "published",
    "description": "In this post, we’ll go over the basic structure of a terraform module and how to use variables and outputs in the root module.",
    "tags": [
      "aws",
      "terraform"
    ],
    "dirPath": "content/articles/variables-and-outputs-in-terraform",
    "indexPath": "content/articles/variables-and-outputs-in-terraform/index.mdx",
    "imagesPath": "content/articles/variables-and-outputs-in-terraform/images",
    "hash": "9775e67078b2ba035d634cc53b82f0872e292170",
    "text": "In this post, we’ll go over the basic structure of a terraform module and how to use variables and outputs in the root module.\n\n## Root Module\n\nWhen we are creating terraform configurations, we are creating a terraform **module**. Every Terraform configuration has at least one module, known as its root module. And we can nest modules to organize our code, but for now, we’ll only focus on the **root** module.\n\nWhen you create a new terraform module, you should create a new directory with at least the following three files inside:\n\n*   `main.tf`: The primary entrypoint to the entire configuration.\n*   `variables.tf`: Any input variables for the module. This allows the user running terraform to easily customize the configuration.\n*   `outputs.tf`: Any outputs from the module. This allows the user running terraform to easily get data about any resources.\n\n[These are the recommended filenames for a minimal module, even if they’re empty.](https://www.terraform.io/docs/language/modules/develop/structure.html)\n\nWe’ll look into variables and outputs more in this article, but for now, just know you should have those files created in your module.\n\n## Region Variable\n\nWe’re already familiar with the basic setup of `main.tf`, first we configure terraform and the provider, then we add a bunch of resource blocks.\n\n```ruby\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 3.27\"\n    }\n  }\n\n  required_version = \">= 1.0.0\"\n}\n\nprovider \"aws\" {\n  region  = \"us-west-2\"\n}\n\n# Resources\n```\n\nEven with this small amount of code, we already have a good use case for a variable. See the region is hard coded to `us-west-2`, so if myself or anyone else that I share this code with wants to deploy to a different region, they have to modify the `main.tf` file. But there’s a better way.\n\nWe can turn this into a variable by adding the following to the `variables.tf` file:\n\n```ruby\nvariable \"region\" {\n  description = \"AWS region\"\n  type        = string\n}\n```\n\nThis declares a new variable named `region` that has the type `string` and a human readable description. Then we can modify the `main.tf` code to use this variable:\n\n```ruby\nprovider \"aws\" {\n  region  = var.region\n}\n```\n\nNow the provider is using the value defined in the variable, easy! But wait, what’s the value? We haven’t actually specified the region, we’ve only created a variable.\n\nLet’s try running `terraform apply` and see what happens.\n\n```shell\n➜ terraform apply\nvar.region\n  AWS region\n\n  Enter a value: \n```\n\nTerraform knows we need a value for this variable, so the cli is prompting us to input a value, cool. But this kind of sucks for speed and automation.\n\n## `terraform.tfvars`\n\nLet’s add a new file to our module named `terraform.tfvars` with the following code inside:\n\n```ruby\nregion = \"us-west-2\"\n```\n\nThis is a _variable definitions file_ where we can define values for any input variables. Now if we run `terraform apply`, it will use the value `us-west-2` for the `region` variable. Now we can define all variable values in this file.\n\n`tfvars` files should **never** be committed into source control, and each person that needs to run `terraform apply` will need to define values for the variables however they want. So any values you put into this file will be just for you, just for your configuration needs. So I might use `us-west-2` and you could use `us-east-1` and none of the actually terraform code needs to change.\n\nSince `tfvars` files never get committed into a VCS, you **can** put sensitive information in there like private keys and passwords. This is kind of like using environment variables to hide sensitive data from the code.\n\n## Default Values\n\nIn a case like this where we’re just defining the region that the infrastructure should be built in, it might be nice to provide a default value. So if someone doesn’t specify a region in the `tfvars` file, it will still be able to build.\n\n```ruby\nvariable \"region\" {\n  description = \"AWS region\"\n  default     = \"us-east-1\"\n  type        = string\n}\n```\n\nBy adding this `default` argument, terraform will first check the `tfvars` file for a value, and use the default one if no other values exist.\n\n## Sensitive Information\n\nLet’s setup a database using RDS. We need to add two resource blocks for this, a security group to allow traffic on port 3306, and the actual RDS resource.\n\n**Security Group**\n\n```ruby\nresource \"aws_security_group\" \"public_db\" {\n  name = \"Public access to the database\"\n\n  ingress {\n    from_port   = 3306\n    to_port     = 3306\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n**Database:**\n\n```ruby\nresource \"aws_db_instance\" \"mydb\" {\n  allocated_storage      = 20\n  engine                 = \"mysql\"\n  engine_version         = \"8.0\"\n  instance_class         = \"db.t2.micro\"\n  username               = ?\n  password               = ?\n  skip_final_snapshot    = true\n  publicly_accessible    = true\n  vpc_security_group_ids = [aws_security_group.public_db.id]\n}\n```\n\nThis is a really basic RDS setup using MySQL, but i’ve left the username and password arguments blank. These arguments are for the admin’s username and password that can be used to control the entire database. I really don’t want these existing in the code and tracked with source control. But I also want anyone running this script to be able to define their own username and password for these values. So the solution here is variables.\n\nIn `variables.tf` we need two new variables:\n\n```ruby\nvariable \"database_admin_username\" {\n  description = \"The database's admin user's username\"\n  type        = string\n}\n\nvariable \"database_admin_password\" {\n  description = \"The database's admin user's password\"\n  type        = string\n}\n```\n\nIn `main.tf` we can use these variables:\n\n```ruby\nresource \"aws_db_instance\" \"mydb\" {\n  ...\n  username               = var.database_admin_username\n  password               = var.database_admin_password\n  ...\n}\n```\n\nAnd in `terraform.tfvars` we can define values for these variables:\n\n```ruby\nregion                  = \"us-west-1\"\ndatabase_admin_username = \"admin\"\ndatabase_admin_password = \"MyNewPass1!\"\n```\n\nNow the database will be setup with those credentials.\n\n**IMPORTANT:** **Don’t commit your `.tfvars` file into version control.**\n\nI recommend adding this gitignore to your project: https://github.com/github/gitignore/blob/master/Terraform.gitignore\n\n## Outputs\n\nRunning `terraform apply` at this point will setup the database using the provided variable values. Once this is done, we probably want to access the database using the address, which we can find using `terraform state`. But we can make this process a little bit easier.\n\nIn the `outputs.tf` file, we can specify an output for the database’s address.\n\n```ruby\noutput \"db_address\" {\n  value = aws_db_instance.mydb.address\n}\n```\n\nThe name is a custom output name, i’ve used `db_address` here. Then the value is set in the normal way we use values in terraform. Since this is a resource we start start with the resource type `aws_db_instance` followed by the name we gave to the resource `mydb`, followed by the argument we want the data for `address`.\n\nNow if we run `terraform apply`, it will create the resource, then print out the `db_address` to the console.\n\n```shell\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\nOutputs:\n\ndb_address = \"terraform-20211030230110222000000001.cytxejtt9yks.us-west-1.rds.amazonaws.com\"\n```\n\n## Sub Modules\n\nJust a quick note about submodules. When we’re using variables and outputs with the **root module**:\n\n*   All data comes in to variables from the user running terraform, from the cli or `.tfvars`.\n*   All data comes out of outputs back to the user running terraform, usually just displayed in the cli.\n\nWhen we use **submodules**, these files work a little bit differently:\n\n*   All data comes in to variables from the **root module**.\n*   All data comes out of outputs back to the **root module**.\n\nThis is very important when you need to communicate with submodules. For example, if one submodule creates a security group and another submodule creates an ec2 instance, you would need to get the security group id out of the security group module using an output and pass it down to the ec2 module using a variable.\n\n## Code Examples\n\nAll code from this post is on github: [https://github.com/Sam-Meech-Ward/terraform\\_vars](https://github.com/Sam-Meech-Ward/terraform_vars)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmRybFl2VHdnSzJR",
    "videoId": "drlYvTwgK2Q",
    "title": "Ocean Emoji Binary #TeamSeas",
    "date": "2021-10-29T20:00:08Z",
    "slug": "ocean-emoji-binary-teamseas",
    "image": {
      "name": "ocean-emoji-binary-teamseas.jpg",
      "alt": "Ocean Emoji Binary #TeamSeas",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/ocean-emoji-binary-teamseas/images/ocean-emoji-binary-teamseas.jpg"
    },
    "status": "published",
    "description": "#TeamSeas is a global campaign to raise $30M to remove 30M pounds of plastic and trash from our ocean, rivers, and beaches.",
    "tags": [],
    "dirPath": "content/videos/videos/ocean-emoji-binary-teamseas",
    "indexPath": "content/videos/videos/ocean-emoji-binary-teamseas/index.mdx",
    "imagesPath": "content/videos/videos/ocean-emoji-binary-teamseas/images",
    "hash": "ec59b3d82f83fbdce3a659261db378bccdf9abc5",
    "text": "* #TeamSeas is a global campaign to raise $30M to remove 30M pounds of plastic and trash from our ocean, rivers, and beaches.\n\nGo to [https://teamseas.org](https://teamseas.org) now to donate. \n\nConvert text to binary or binary to text: [https://binary-text.herokuapp.com/](https://binary-text.herokuapp.com/)\n\nAll money made from this video will be donated directly to https://teamseas.org"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmJTdElGeGJEMWZv",
    "videoId": "bStIFxbD1fo",
    "title": "Intro to Terraform with AWS",
    "date": "2021-10-26T16:10:59Z",
    "slug": "intro-to-terraform-with-aws",
    "image": {
      "name": "intro-to-terraform-with-aws.jpg",
      "alt": "Intro to Terraform with AWS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-terraform-with-aws/images/intro-to-terraform-with-aws.jpg"
    },
    "status": "published",
    "description": "Learn the basics of using terraform to manage your AWS infrastructure.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-terraform-with-aws",
    "indexPath": "content/videos/videos/intro-to-terraform-with-aws/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-terraform-with-aws/images",
    "hash": "1c188585d3a6ab42603733a3220e017f6ba86da2",
    "text": "Learn the basics of using terraform to manage your AWS infrastructure.\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 2:10 Project Setup\n* 2:39 Setting up the project\n* 3:57 Terraform CLI\n* 5:46 EC2 Resource Block\n* 7:38 terraform apply\n* 8:55 terraform state\n* 11:34 Security Group Resource\n* 15:29 Idempotent\n* 18:16 terraform destroy\n* 19:20 Data Block\n* 22:35 Review\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/intro-to-terraform](https://github.com/Sam-Meech-Ward/intro-to-terraform)\n\n🔗Other tutorials:\nIntro to Packer with AWS: [https://youtu.be/dde-bWUeRMo](https://youtu.be/dde-bWUeRMo)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)\n\nVariables and Outputs in Terraform: [https://sammeechward.com/variables-and-outputs-in-terraform/](https://sammeechward.com/variables-and-outputs-in-terraform/)\nS3 and IAM with Terraform: [https://sammeechward.com/s3-and-iam-with-terraform/](https://sammeechward.com/s3-and-iam-with-terraform/)\nCloud-init and Terraform with AWS: [https://sammeechward.com/cloud-init-and-terraform-with-aws/](https://sammeechward.com/cloud-init-and-terraform-with-aws/)\n\n🔗Installing Packer:\n[https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started](https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmRkZS1iV1VlUk1v",
    "videoId": "dde-bWUeRMo",
    "title": "Intro to Packer with AWS",
    "date": "2021-10-26T02:01:44Z",
    "slug": "intro-to-packer-with-aws",
    "image": {
      "name": "intro-to-packer-with-aws.jpg",
      "alt": "Intro to Packer with AWS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-packer-with-aws/images/intro-to-packer-with-aws.jpg"
    },
    "status": "published",
    "description": "Learn the basics of using packer to create AMIs in AWS by setting up an AMI that runs a basic node web application.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-packer-with-aws",
    "indexPath": "content/videos/videos/intro-to-packer-with-aws/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-packer-with-aws/images",
    "hash": "1c2514827df2a081a551ed9dd9f3e086cc72ab0f",
    "text": "Learn the basics of using packer to create AMIs in AWS by setting up an AMI that runs a basic node web application.\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:00 What is Packer\n* 2:39 Setting up the project\n* 4:28 Amazon Plugin\n* 5:15 Source Block\n* 7:39 Build Block\n* 9:29 Bash Script Provisioner\n* 10:40 File Provisioner\n* 16:20 Packer Build\n* 19:48 Local Variables\n* 21:10 Source AMI Filter\n* 23:57 Review\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/intro-to-packer](https://github.com/Sam-Meech-Ward/intro-to-packer)\n[https://github.com/Sam-Meech-Ward/cocktails.git](https://github.com/Sam-Meech-Ward/cocktails.git)\n\n🔗Other tutorials:\nIntro to Horizontal Scaling, Load Balancing, Immutable Infrastructure with AWS: [https://youtu.be/FEbfvTZCYQQ](https://youtu.be/FEbfvTZCYQQ)\nDeploy Node app on AWS EC2 Amazon Linux 2 [https://youtu.be/oHAQ3TzUTro](https://youtu.be/oHAQ3TzUTro)\nIntro to Terraform with AWS: [https://youtu.be/KmtWuYh4s8o](https://youtu.be/KmtWuYh4s8o)\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)\n\nVariables and Outputs in Terraform: [https://sammeechward.com/variables-and-outputs-in-terraform/](https://sammeechward.com/variables-and-outputs-in-terraform/)\nS3 and IAM with Terraform: [https://sammeechward.com/s3-and-iam-with-terraform/](https://sammeechward.com/s3-and-iam-with-terraform/)\nCloud-init and Terraform with AWS: [https://sammeechward.com/cloud-init-and-terraform-with-aws/](https://sammeechward.com/cloud-init-and-terraform-with-aws/)\n\n🔗Installing Packer:\n[https://learn.hashicorp.com/tutorials/packer/get-started-install-cli?in=packer/aws-get-started](https://learn.hashicorp.com/tutorials/packer/get-started-install-cli?in=packer/aws-get-started)"
  },
  {
    "type": "article",
    "wp_id": 725,
    "title": "HTTPS on Amazon Linux with Nginx",
    "date": "2021-10-02T19:58:23",
    "slug": "https-on-amazon-linux-with-nginx",
    "image": {
      "name": "https-on-amazon-linux-with-nginx.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/https-on-amazon-linux-with-nginx/images/https-on-amazon-linux-with-nginx.png"
    },
    "status": "published",
    "description": "Learn how to setup an Amazon Linux 2 EC2 instance with nginx to accept HTTPS requests. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SSL-on-amazon-linux-2.html#letsencrypt Setup First you need to create a new amazon linux 2 ec2 instance with Nginx installed. You can follow one of these videos to get started: Nginx Reverse Proxy on AWS EC2 Amazon Linux 2: https://youtu.be/\\_EBARqreeao Setting Up \\[…\\]",
    "tags": [],
    "dirPath": "content/articles/https-on-amazon-linux-with-nginx",
    "indexPath": "content/articles/https-on-amazon-linux-with-nginx/index.mdx",
    "imagesPath": "content/articles/https-on-amazon-linux-with-nginx/images",
    "hash": "916a492237a006be07275b15d012a581f1032598",
    "text": "Learn how to setup an Amazon Linux 2 EC2 instance with nginx to accept HTTPS requests.\n\n[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SSL-on-amazon-linux-2.html#letsencrypt](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SSL-on-amazon-linux-2.html#letsencrypt)\n\n## Setup\n\nFirst you need to create a new amazon linux 2 ec2 instance with Nginx installed. You can follow one of these videos to get started:\n\n*   [Nginx Reverse Proxy on AWS EC2 Amazon Linux 2: https://youtu.be/\\_EBARqreeao](https://youtu.be/_EBARqreeao)\n*   [Setting Up And Deploying AWS EC2 Instances: https://youtu.be/GEVbYQWWJkQ](https://youtu.be/GEVbYQWWJkQ)\n\n```shell\nsudo amazon-linux-extras install nginx1 -y\nsudo systemctl enable nginx\nsudo systemctl start nginx\n```\n\n## DNS\n\nMake sure you have a domain name pointed at the EC2’s ip address. You can follow along with this guide if you’re going to use route53: [https://faun.pub/how-to-migrate-your-domain-to-route53-and-connect-it-to-an-ec2-instance-93698085f0b3](https://faun.pub/how-to-migrate-your-domain-to-route53-and-connect-it-to-an-ec2-instance-93698085f0b3)\n\nJust make sure you can access the ec2 instance on port 80 using a domain name.\n\nBefore continuing, stop the nginx service\n\n```shell\nsudo systemctl stop nginx\n```\n\n## Certbot\n\nCertbot is a free, open-source software tool for automatically using Let's Encrypt certificates on manually-administrated websites to enable HTTPS.\n\n*   https://certbot.eff.org/about/\n\nIn short, certbot is some software that makes setting up a TLS certificate incredibly easy.\n\nInstall certbot on the EC2 instance:\n\n```shell\nsudo wget -r --no-parent -A 'epel-release-*.rpm' https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/\nsudo rpm -Uvh dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-*.rpm\nsudo yum-config-manager --enable epel*\nsudo yum install -y certbot \nsudo yum install -y python-certbot-nginx\n```\n\nRun the following command to setup a TLS certificate for your domain name:\n\n```shell\nsudo certbot certonly --standalone --debug -d your.domain.here\n```\n\nReplace `your.domain.here` with your actual domain or sub domain.\n\nOnce you’ve gone through all of the steps, you should end up with two files in the `/etc/letsencrypt/live/your.domain` directory. Of course, always replacing `your.domain` with the actual domain name you used.\n\n*   `/etc/letsencrypt/live/your.domain/privkey.pem`\n*   `/etc/letsencrypt/live/your.domain/fullchain.pem`\n\nThese files contain the public and private keys needed to create a secure connection with this server. Now we just need to tell nginx to use these when an HTTPS request comes in.\n\nModify the `/etc/nginx/nginx.conf` file to allow requests on port 443. You can just uncomment the final part of this file and adjust the settings for:\n\n*   `ssl_certificate \"/etc/letsencrypt/live/your.domain/fullchain.pem\";`\n*   `ssl_certificate_key \"/etc/letsencrypt/live/your.domain/privkey.pem\";`\n*   `ssl_protocols TLSv1.2 TLSv1.3;`\n*   `ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;`\n\nMake sure you replace `your.domain` with your actual domain name. Your final server block for port 443 might look something like this:\n\n```nginx\nserver {\n    listen       443 ssl http2;\n    listen       [::]:443 ssl http2;\n    server_name  your.domain;\n\n    ssl_certificate \"/etc/letsencrypt/live/your.domain/fullchain.pem\";\n    ssl_certificate_key \"/etc/letsencrypt/live/your.domain/privkey.pem\";\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;\n\n    ssl_session_cache shared:SSL:1m;\n    ssl_session_timeout  10m;\n    ssl_prefer_server_ciphers on;\n\n\n    location / {\n        proxy_pass http://1.1.1.1:4000;\n    }\n}\n```\n\nThen adjust the port 80 server block to forward HTTP requests to HTTPS requests.\n\n```nginx\nserver {\n  listen 80 default_server;\n\n  server_name _;\n\n  return 301 https://$host$request_uri;\n}\n```\n\nRestart nginx and test that you can now connect using HTTPS.\n\n```shell\nsudo systemctl restart nginx\n```"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlZpeTF0Qm9pbmww",
    "videoId": "Viy1tBoinl0",
    "title": "Intro to RDS in AWS for MySQL",
    "date": "2021-10-02T18:57:30Z",
    "slug": "intro-to-rds-in-aws-for-mysql",
    "image": {
      "name": "intro-to-rds-in-aws-for-mysql.jpg",
      "alt": "Intro to RDS in AWS for MySQL",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-rds-in-aws-for-mysql/images/intro-to-rds-in-aws-for-mysql.jpg"
    },
    "status": "published",
    "description": "Learn how to set up RDS with MySQL and connect to the database from a MySQL client over the internet, or an EC2 instance of the private network.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-rds-in-aws-for-mysql",
    "indexPath": "content/videos/videos/intro-to-rds-in-aws-for-mysql/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-rds-in-aws-for-mysql/images",
    "hash": "44394fad9298f94cb2d608e62a4273599c6bffb0",
    "text": "Learn how to set up RDS with MySQL and connect to the database from a MySQL client over the internet, or an EC2 instance of the private network.\n\n[https://aws.amazon.com/rds/](https://aws.amazon.com/rds/)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:22 Networking\n* 4:13 Setting up Database Cluster\n* 11:44 Connecting to the Database Public\n* 15:55 Connecting to the Database Private\n* 18:46 Summary\n\n🔗Other tutorials:\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLndfMUVPTWstcndj",
    "videoId": "w_1EOMk-rwc",
    "title": "Sending logs to CloudWatch from Amazon Linux 2",
    "date": "2021-09-28T17:23:21Z",
    "slug": "sending-logs-to-cloudwatch-from-amazon-linux-2",
    "image": {
      "name": "sending-logs-to-cloudwatch-from-amazon-linux-2.jpg",
      "alt": "Sending logs to CloudWatch from Amazon Linux 2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/sending-logs-to-cloudwatch-from-amazon-linux-2/images/sending-logs-to-cloudwatch-from-amazon-linux-2.jpg"
    },
    "status": "published",
    "description": "Learn how to send logs from an Amazon Linux 2 EC2 instance to cloud watch. ",
    "tags": [],
    "dirPath": "content/videos/videos/sending-logs-to-cloudwatch-from-amazon-linux-2",
    "indexPath": "content/videos/videos/sending-logs-to-cloudwatch-from-amazon-linux-2/index.mdx",
    "imagesPath": "content/videos/videos/sending-logs-to-cloudwatch-from-amazon-linux-2/images",
    "hash": "5190b33af092a8f15901b021e3758b8cafc36764",
    "text": "Learn how to send logs from an Amazon Linux 2 EC2 instance to cloud watch. \n\n[https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html)\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:00 IAM Role for Cloud Watch\n* 2:50 Setting up an  EC2 instance\n* 6:30 Installing and configuring cloud watch agent\n* 8:47 Viewing logs in Cloud Watch\n* 10:43 Summary\n\n🔗Other tutorials:\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkZFYmZ2VFpDWVFR",
    "videoId": "FEbfvTZCYQQ",
    "title": "Intro to Horizontal Scaling, Load Balancing, Immutable Infrastructure with AWS",
    "date": "2021-09-27T18:07:35Z",
    "slug": "intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws",
    "image": {
      "name": "intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws.jpg",
      "alt": "Intro to Horizontal Scaling, Load Balancing, Immutable Infrastructure with AWS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws/images/intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws.jpg"
    },
    "status": "published",
    "description": "Load balancing and horizontally scaling a web app using immutable infrastructure on AWS with custom AMIs.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws",
    "indexPath": "content/videos/videos/intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-horizontal-scaling,-load-balancing,-immutable-infrastructure-with-aws/images",
    "hash": "1257f4b6387cde274ee862014c6ebb163176cc5f",
    "text": "Load balancing and horizontally scaling a web app using immutable infrastructure on AWS with custom AMIs.\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:30 Theory\n* 2:47 Creating an AMI\n* 8:58 Scaling the App\n* 11:40 Load Balancing with Nginx\n* 17:25 Summary\n\n🔗Other tutorials:\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkJTb2Rrd1dCLThz",
    "videoId": "BSodkwWB-8s",
    "title": "Intro to IAM Roles and Policies on AWS",
    "date": "2021-09-25T21:55:34Z",
    "slug": "intro-to-iam-roles-and-policies-on-aws",
    "image": {
      "name": "intro-to-iam-roles-and-policies-on-aws.jpg",
      "alt": "Intro to IAM Roles and Policies on AWS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-iam-roles-and-policies-on-aws/images/intro-to-iam-roles-and-policies-on-aws.jpg"
    },
    "status": "published",
    "description": "Learn about what IAM roles and policies are and how to create policies and roles to grant an ec2 instance access to other AWS services.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-iam-roles-and-policies-on-aws",
    "indexPath": "content/videos/videos/intro-to-iam-roles-and-policies-on-aws/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-iam-roles-and-policies-on-aws/images",
    "hash": "bf92f778c161461c19ec6d2996c12f428641867a",
    "text": "Learn about what IAM roles and policies are and how to create policies and roles to grant an ec2 instance access to other AWS services.\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:12​ Policies and Roles\n* 2:35 Setting up Policies\n* 6:18 Setting up roles\n* 8:00 Adding a role to EC2\n* 9:00 Conclusion\n\n🔗Other tutorials:\nCloud Computing Playlist: [https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M](https://youtube.com/playlist?list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLl9FQkFScXJlZWFv",
    "videoId": "_EBARqreeao",
    "title": "Nginx Reverse Proxy on AWS EC2 Amazon Linux 2",
    "date": "2021-09-19T01:30:21Z",
    "slug": "nginx-reverse-proxy-on-aws-ec2-amazon-linux-2",
    "image": {
      "name": "nginx-reverse-proxy-on-aws-ec2-amazon-linux-2.jpg",
      "alt": "Nginx Reverse Proxy on AWS EC2 Amazon Linux 2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/nginx-reverse-proxy-on-aws-ec2-amazon-linux-2/images/nginx-reverse-proxy-on-aws-ec2-amazon-linux-2.jpg"
    },
    "status": "published",
    "description": "Install and set up an nginx reverse proxy on an Amazon Linux 2 ec2 instance.",
    "tags": [],
    "dirPath": "content/videos/videos/nginx-reverse-proxy-on-aws-ec2-amazon-linux-2",
    "indexPath": "content/videos/videos/nginx-reverse-proxy-on-aws-ec2-amazon-linux-2/index.mdx",
    "imagesPath": "content/videos/videos/nginx-reverse-proxy-on-aws-ec2-amazon-linux-2/images",
    "hash": "e66c004bc1f0b0e01cbc6134c39ec9b0f530e55e",
    "text": "Install and set up an nginx reverse proxy on an Amazon Linux 2 ec2 instance.\n\n🔗Other tutorials:\nMySQL on AWS EC2 Amazon Linux 2: [https://youtu.be/N9DwaThhpsg](https://youtu.be/N9DwaThhpsg)\nDeploy Node app on AWS EC2 Amazon Linux 2: [https://youtu.be/oHAQ3TzUTro](https://youtu.be/oHAQ3TzUTro)\nSetting Up And Deploying AWS EC2 Instances: [https://youtu.be/GEVbYQWWJkQ](https://youtu.be/GEVbYQWWJkQ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLm9IQVEzVHpVVHJv",
    "videoId": "oHAQ3TzUTro",
    "title": "Deploy Node app on AWS EC2 Amazon Linux 2",
    "date": "2021-09-18T18:29:42Z",
    "slug": "deploy-node-app-on-aws-ec2-amazon-linux-2",
    "image": {
      "name": "deploy-node-app-on-aws-ec2-amazon-linux-2.jpg",
      "alt": "Deploy Node app on AWS EC2 Amazon Linux 2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/deploy-node-app-on-aws-ec2-amazon-linux-2/images/deploy-node-app-on-aws-ec2-amazon-linux-2.jpg"
    },
    "status": "published",
    "description": "Deploy Node app on AWS EC2 Amazon Linux 2 by installing node js and setting the app up as a systemd service",
    "tags": [],
    "dirPath": "content/videos/videos/deploy-node-app-on-aws-ec2-amazon-linux-2",
    "indexPath": "content/videos/videos/deploy-node-app-on-aws-ec2-amazon-linux-2/index.mdx",
    "imagesPath": "content/videos/videos/deploy-node-app-on-aws-ec2-amazon-linux-2/images",
    "hash": "24cdd7a44b06f7bba80f63fec783a899cf18f81f",
    "text": "Deploy Node app on AWS EC2 Amazon Linux 2 by installing node js and setting the app up as a systemd service\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:14 Setting up an EC2 Instance\n* 2:31 Installing Node\n* 3:21 git clone code onto the instance\n* 4:28 Running the node app\n* 6:13 Environment Variables\n* 9:38 Systemd service\n* 14:13 Summary\n\n\n🔗Other tutorials:\nMySQL on AWS EC2 Amazon Linux 2: [https://youtu.be/N9DwaThhpsg](https://youtu.be/N9DwaThhpsg)\nNginx Reverse Proxy on AWS EC2 Amazon Linux 2: [https://youtu.be/_EBARqreeao](https://youtu.be/_EBARqreeao)\nSetting Up And Deploying AWS EC2 Instances: [https://youtu.be/GEVbYQWWJkQ](https://youtu.be/GEVbYQWWJkQ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk45RHdhVGhocHNn",
    "videoId": "N9DwaThhpsg",
    "title": "MySQL on AWS EC2 Amazon Linux 2",
    "date": "2021-09-18T07:28:32Z",
    "slug": "mysql-on-aws-ec2-amazon-linux-2",
    "image": {
      "name": "mysql-on-aws-ec2-amazon-linux-2.jpg",
      "alt": "MySQL on AWS EC2 Amazon Linux 2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/mysql-on-aws-ec2-amazon-linux-2/images/mysql-on-aws-ec2-amazon-linux-2.jpg"
    },
    "status": "published",
    "description": "Install and set up a MySQL database on an Amazon Linux 2 ec2 instance.",
    "tags": [],
    "dirPath": "content/videos/videos/mysql-on-aws-ec2-amazon-linux-2",
    "indexPath": "content/videos/videos/mysql-on-aws-ec2-amazon-linux-2/index.mdx",
    "imagesPath": "content/videos/videos/mysql-on-aws-ec2-amazon-linux-2/images",
    "hash": "e5382fefeed58f2d51045ca95ab166674d0e7b56",
    "text": "Install and set up a MySQL database on an Amazon Linux 2 ec2 instance.\n\n\n## Chapters:\n\n* 0:00​ Intro\n* 0:15​ Setting up an EC2 Instance\n* 2:27 Installing MySQL\n* 3:16 Login as root\n* 4:02 Change root user password\n* 4:43 SCP database file and create a database\n* 7:16 Creating a new user localhost\n* 8:50 Creating a new user any host\n* 10:37 Modify Security Group\n* 12:14 Summary\n\n\n🔗Other tutorials:\nDeploy Node app on AWS EC2 Amazon Linux 2: [https://youtu.be/oHAQ3TzUTro](https://youtu.be/oHAQ3TzUTro)\nNginx Reverse Proxy on AWS EC2 Amazon Linux 2: [https://youtu.be/_EBARqreeao](https://youtu.be/_EBARqreeao)\nSetting Up And Deploying AWS EC2 Instances: [https://youtu.be/GEVbYQWWJkQ](https://youtu.be/GEVbYQWWJkQ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnlHWWVZSnBSV1BN",
    "videoId": "yGYeYJpRWPM",
    "title": "Upload Images Directly to S3 from Front End",
    "date": "2021-04-08T14:30:05Z",
    "slug": "upload-images-directly-to-s3-from-front-end",
    "image": {
      "name": "upload-images-directly-to-s3-from-front-end.jpg",
      "alt": "Upload Images Directly to S3 from Front End",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/upload-images-directly-to-s3-from-front-end/images/upload-images-directly-to-s3-from-front-end.jpg"
    },
    "status": "published",
    "description": "Learn how to store your web app's image files in an s3 bucket by uploading them directly to the bucket.",
    "tags": [],
    "dirPath": "content/videos/videos/upload-images-directly-to-s3-from-front-end",
    "indexPath": "content/videos/videos/upload-images-directly-to-s3-from-front-end/index.mdx",
    "imagesPath": "content/videos/videos/upload-images-directly-to-s3-from-front-end/images",
    "hash": "36c0f44209b007989d90b3028e3cb391662a37c3",
    "text": "Learn how to store your web app's image files in an s3 bucket by uploading them directly to the bucket.\n\nThere is a different version of this tutorial that I suggest you check out too: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/s3-direct-upload](https://github.com/Sam-Meech-Ward/s3-direct-upload)\n\n🔗Other tutorials:\nUpload Images to S3 from Node Back End: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\nS3 bucket for a static website: [https://youtu.be/RoY3ekCCxKc](https://youtu.be/RoY3ekCCxKc)\nImage upload without s3: [https://sammeechward.com/uploading-images-express-and-react/](https://sammeechward.com/uploading-images-express-and-react/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLklEakY2LXMxaEdr",
    "videoId": "IDjF6-s1hGk",
    "title": "Mocking a Database in Node with Jest",
    "date": "2021-04-06T17:13:28Z",
    "slug": "mocking-a-database-in-node-with-jest",
    "image": {
      "name": "mocking-a-database-in-node-with-jest.jpg",
      "alt": "Mocking a Database in Node with Jest",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/mocking-a-database-in-node-with-jest/images/mocking-a-database-in-node-with-jest.jpg"
    },
    "status": "published",
    "description": "Learn how to use jest mock functions to mock a database in an HTTP server. ",
    "tags": [],
    "dirPath": "content/videos/videos/mocking-a-database-in-node-with-jest",
    "indexPath": "content/videos/videos/mocking-a-database-in-node-with-jest/index.mdx",
    "imagesPath": "content/videos/videos/mocking-a-database-in-node-with-jest/images",
    "hash": "8277aa43a60e7bb436f5863f7755c8a2d9baacbb",
    "text": "Learn how to use jest mock functions to mock a database in an HTTP server. \n\n🔗  Previous Videos:\nIntroduction to Writing Automated Tests With Jest: [https://youtu.be/hz0_q1MJa2k](https://youtu.be/hz0_q1MJa2k)\nIntroduction to TDD in JavaScript: [https://youtu.be/89Pl2Uok8xc](https://youtu.be/89Pl2Uok8xc)\nTesting Node Server with Jest and Supertest: [https://youtu.be/FKnzS_icp20](https://youtu.be/FKnzS_icp20)\nDependency Injection: [https://youtu.be/yOC0e0NMZ-E](https://youtu.be/yOC0e0NMZ-E)\n\n🔗  Text version:\n[https://sammeechward.com/mocking-a-database-with-jest-in-javascript/](https://sammeechward.com/mocking-a-database-with-jest-in-javascript/)\n\n🔗 Code:\n[https://github.com/Sam-Meech-Ward/express_jest_and_mocks](https://github.com/Sam-Meech-Ward/express_jest_and_mocks)\n\n🔗 Jest Mock Functions:\n[https://jestjs.io/docs/mock-functions](https://jestjs.io/docs/mock-functions)\n\n🔗 Moar Links\nMy Website: [https://www.sammeechward.com](https://www.sammeechward.com)\nInstagram: [https://www.instagram.com/meech_ward](https://www.instagram.com/meech_ward)\nGithub: [https://github.com/orgs/Sam-Meech-Ward](https://github.com/orgs/Sam-Meech-Ward)\nTikTok: https://www.tiktok.com/@meech.s.ward"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnlPQzBlME5NWi1F",
    "videoId": "yOC0e0NMZ-E",
    "title": "Dependency Injection in JavaScript",
    "date": "2021-04-05T22:57:36Z",
    "slug": "dependency-injection-in-javascript",
    "image": {
      "name": "dependency-injection-in-javascript.jpg",
      "alt": "Dependency Injection in JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/js/dependency-injection-in-javascript/images/dependency-injection-in-javascript.jpg"
    },
    "status": "published",
    "description": "Learn how to use dependency injection in a JavaScript application to decouple a MySQL database from an express HTTP server. This will help us be able to mock the database for a future video.",
    "tags": [],
    "dirPath": "content/videos/js/dependency-injection-in-javascript",
    "indexPath": "content/videos/js/dependency-injection-in-javascript/index.mdx",
    "imagesPath": "content/videos/js/dependency-injection-in-javascript/images",
    "hash": "a36e047a8bb366d46632f3ee1a8f0a49979a8a0b",
    "text": "Learn how to use dependency injection in a JavaScript application to decouple a MySQL database from an express HTTP server. This will help us be able to mock the database for a future video.\n\n🔗 Code:\n[https://github.com/Sam-Meech-Ward/dependency_injection_js](https://github.com/Sam-Meech-Ward/dependency_injection_js)\n\n\nThere are a few benefits to using dependency injection, but the best, most useful benefit and biggest reason to use dependency injection is to make your code **more testable.**\n\nIn this article we’re going to take a look at what dependency injection is by using an example of an express app that stores data in a MySQL database.\n\n## The App\n\nThe following code block is a basic express app allows a username and password to be stored in a MySQL database when a POST request is made to `/users`\n\n**app.js**\n\n```js\nimport express from 'express'\nimport mysql from 'mysql2'\n\nconst app = express()\n\nvar connection = mysql.createPool({\n  host     : 'localhost',\n  user     : 'root',\n  database : 'some_database'\n})\n\napp.use(express.json())\n\napp.post('/users', async (req, res) => {\n  // ...\n})\n\nexport default app\n```\n\nWe’re exporting the express app from this file to make it easier to write unit tests for the API,then we can have a server.js that imports app and has it listen on port 8080:\n\n**server.js**\n\n```js\nimport app from './app.js'\n\napp.listen(8080, () => console.log(\"listening on port 8080\"))\n```\n\nSo running `node server.js` will start the express server.\n\nThe implementation of the post request will look like this:\n\n```js\napp.post('/users', async (req, res) => { \n  // 1\n  const { username, password } = req.body\n\n  try {\n    // 2\n    const [rows] = await connection.promise().query(\n      `SELECT * \n      FROM users \n      WHERE username = ?`, \n      [username]\n    )\n    // 3 \n    if (rows.length > 0) {\n      res.status(400).send({error: \"username already taken\"})\n      return\n    }\n\n    // 4\n    const { insertId } = await connection.promise().query(\n      `INSERT INTO users (username, password) \n      VALUES (?, ?)`, \n      [username, password]\n    )\n    \n    // 5\n    res.send({ userId: insertId })\n\n  } catch (error) {\n    // 6\n    console.log(error)\n    res.sendStatus(500)\n    return\n  }\n})\n      \n```\n\n1.  Grab the username and password from the post body.\n2.  Check if the user already exists in the database.\n3.  Send an error if the user already exists.\n4.  Insert the username and password into the database.\n5.  Send the userId back to the client.\n6.  Handle any errors.\n\nThis is a very simple example that’s missing a lot of necessary things that you would need in a production application. Things like username and password validation, and password hashing. We should also store the userId in a session, or encrypted cookie, or JWT, but this example is good enough for now.\n\nCurrently all of the database specific code is mixed in with the HTTP server specific code. That means that any changes to the database code might also effect the HTTP server code. For a small application this is probably fine, but it makes the code a little bit more difficult to read and refactor.\n\nIt also makes it harder to reuse code. For example, if another route or another part of the app wanted to get a user from the database based on their username, the `SELECT` statement above would be duplicated.\n\nSo there are a few benefits that we can get from separating the database specific code from the HTTP specific code. Let’s do this by putting all database specific code into a separate javascript file.\n\n## Database File\n\n**database.js**\n\n```js\nimport mysql from 'mysql2'\n\nconst connection = mysql.createPool({\n  host     : 'localhost',\n  user     : 'root',\n  database : 'some_database'\n})\n\nexport async function getUser(username) {\n  const [rows] = await connection.promise().query(`\n  SELECT * \n  FROM users \n  WHERE username = ?\n  `, [username])\n  return rows[0]\n}\n\nexport async function createUser(username, password) {\n  const result = await connection.promise().query(`\n    INSERT INTO users (username, password) \n    VALUES (?, ?)\n    `, \n    [username, password]\n  )\n  return result.insertId\n}\n```\n\nNow we have a database file that only knows about MySQL. It can get a user and created a user but it knows nothing about HTTP or the fact that it’s running as part of an express app.\n\nThen in the app.js file, we can refactor to use this new database.js file.\n\n**app.js**\n\n```js\nimport express from 'express'\nimport database from './database.js'\n\nconst app = express()\n\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n\n  try {\n    const user = await database.getUser(username)\n    if (user) {\n      res.status(400).send({error: \"username already taken\"})\n      return\n    }\n\n    const userId = await database.createUser(username, password)\n\n    res.send({ userId })\n\n  } catch (error) {\n    res.sendStatus(500)\n    return\n  }\n})\n\nexport default app\n```\n\nNow app has pretty much no idea that it’s communicating with a mysql database. It just calls the functions it needs to call, and expects the database file to take care of the rest.\n\nBut this app.js file is now dependent on the database.js file. It’s tightly coupled to that file, it knows about it, it imports it, and no other part of the app can easily change that. So if we wanted to change the database that’s being used, we would have to modify how the database is imported.\n\nThis is really only an issue when it comes to testing. If we want to write unit tests for the express api, it’s tightly coupled to the production database so we’ll also have to test the database. If we can remove this dependency, we’ll be able to test the app.js file in isolation.\n\nSo instead of app.js importing it’s dependency, let’s inject it.\n\n## Dependency Injection\n\nWhat would this look like using dependency injection? Well pretty much the same, but with one very important difference:\n\n```js\nimport express from 'express'\n\n// 1\nexport default function (database) {\n  const app = express()\n\n  // 2\n  app.post('/users', async (req, res) => {\n    // ...\n  })\n\n  // 3\n  return app\n}\n```\n\n1.  Wrap everything inside a function and export that function from this file instead of the app\n2.  Define all of the routes and other logic inside of the function\n3.  Return what needs to be “exported”\n\nSo this is pretty much the same exact code, but everything’s wrapped inside of a function which allows us to pass in any dependencies. Instead of app.js importing the database, the database will be passed to app (injected to app) when it’s created.\n\nThe idea here is that app.js has no idea what kind of database it’s going to be using. From the perspective of app.js, it needs to be passed an object, we’ll call it database, and that object must have a `getUser` and `createUser` method. That’s the agreement. As long as the file that creates teh app passes it a compatible database object, app is going to be happy.\n\nFor this to work, we’ll need to update the server.js:\n\n**server.js**\n\n```js\nimport database from './database.js'\nimport makeApp from './app.js'\n\nconst app = makeApp(database)\n\napp.listen(8080, () => console.log(\"listening on port 8080\"))\n```\n\nNow the server.js file will import the database and the function from `app.js`. Then it will call that function and pass in the database, it’s passing app the dependency.\n\nThat’s it. That’s dependency injection.\n\n## The Benefit\n\nLet’s just talk about the benefit one more time.\n\nIf you take a look at the database.js file, it knows nothing about anything except for making calls to a MySQL database. It’s completely ignorant about the rest of the application.\n\nIf you take a look at the app.js file, it knows nothing about anything except for accepting and responding to HTTP request. Well, it also knows that it can call `getUser` and `createUser` methods on some object. But it knows nothing about that object, it just gets passed to app when it’s created.\n\nserver.js knows about all of the different pieces, this is the point in the app that’s “allowed” to know about things. But the different components are mostly ignorant to the rest of the app.\n\nThis means that we could make a brand new database file that has a `getUser` and `createUser` function but uses a mongo database. If server.js imported that database file instead of the MySQL one, it could pass that to the app.js function and the app would be using a mongo database instead of MySQL, and **nothing** would have to change inside of app.js. app.js has no idea that it’s using a MySQL database, so changing the details about the database doesn’t matter, as long as that database file has a `getUser` and a `createUser` function.\n\nThis is a completely unrealistic example, you’re never just going to completely change the database like this, but you’re in a good place when you **can** do this. It means that you’ve separated the different parts of your app well.\n\nWhy is this good? Because it means we can now test the different parts of the app separately. But that’s a topic for the next article."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkZLbnpTX2ljcDIw",
    "videoId": "FKnzS_icp20",
    "title": "Testing Node Server with Jest and Supertest",
    "date": "2021-04-05T17:34:38Z",
    "slug": "testing-node-server-with-jest-and-supertest",
    "image": {
      "name": "testing-node-server-with-jest-and-supertest.jpg",
      "alt": "Testing Node Server with Jest and Supertest",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/testing-node-server-with-jest-and-supertest/images/testing-node-server-with-jest-and-supertest.jpg"
    },
    "status": "published",
    "description": "Learn how to test a node.js HTTP server using Jest and Supertest.",
    "tags": [],
    "dirPath": "content/videos/videos/testing-node-server-with-jest-and-supertest",
    "indexPath": "content/videos/videos/testing-node-server-with-jest-and-supertest/index.mdx",
    "imagesPath": "content/videos/videos/testing-node-server-with-jest-and-supertest/images",
    "hash": "5334121aa5424e9d59335cfd58ac78fb8e591817",
    "text": "Learn how to test a node.js HTTP server using Jest and Supertest.\n\n🔗  Previous Videos:\nIntroduction to Writing Automated Tests With Jest: [https://youtu.be/hz0_q1MJa2k](https://youtu.be/hz0_q1MJa2k)\nIntroduction to TDD in JavaScript: [https://youtu.be/89Pl2Uok8xc](https://youtu.be/89Pl2Uok8xc)\n\n🔗  Text version:\n[https://sammeechward.com/testing-an-express-app-with-supertest-and-jest/](https://sammeechward.com/testing-an-express-app-with-supertest-and-jest/)\n\n🔗  Using Jest with ESModules:\n[https://sammeechward.com/jest-and-esmodules/](https://sammeechward.com/jest-and-esmodules/)\n\n🔗 Code:\n[https://github.com/Sam-Meech-Ward/express_jest_and_mocks/tree/express](https://github.com/Sam-Meech-Ward/express_jest_and_mocks/tree/express)\n\n🔗 Moar Links\nMy Website: [https://www.sammeechward.com](https://www.sammeechward.com)\nInstagram: [https://www.instagram.com/meech_ward](https://www.instagram.com/meech_ward)\nGithub: [https://github.com/orgs/Sam-Meech-Ward](https://github.com/orgs/Sam-Meech-Ward)\nTikTok: https://www.tiktok.com/@meech.s.ward"
  },
  {
    "type": "article",
    "wp_id": 705,
    "title": "Jest and ESModules",
    "date": "2021-04-01T20:23:48",
    "slug": "jest-and-esmodules",
    "image": {
      "name": "jest-and-esmodules.png",
      "width": 1500,
      "height": 500,
      "url": "content/articles/jest-and-esmodules/images/jest-and-esmodules.png"
    },
    "status": "published",
    "description": "If you are already using ESModules in your node application, natively without babel, then this is how you can setup your jest tests to use ESModules in the same way. The official docs for this can be found here: https://jestjs.io/docs/ecmascript-modules Note: For this to work you will need to be using node version 14 or \\[…\\]",
    "tags": [],
    "dirPath": "content/articles/jest-and-esmodules",
    "indexPath": "content/articles/jest-and-esmodules/index.mdx",
    "imagesPath": "content/articles/jest-and-esmodules/images",
    "hash": "3c448a8c419e7a6b84829443d352cdefacb32fdc",
    "text": "If you are already using ESModules in your node application, natively without babel, then this is how you can setup your jest tests to use ESModules in the same way. The official docs for this can be found here: https://jestjs.io/docs/ecmascript-modules\n\nNote: For this to work you will need to be using node version 14 or higher.\n\nIn your package.json file, you need to do the following things:\n\n1.  Set the type to module\n2.  Disable jest code transforms by passing “transform: {}”\n3.  Run the test with the following env var: `NODE_OPTIONS=--experimental-vm-modules`\n\n**Example package.json:**\n\n```json\n\n  \"type\": \"module\",\n  \"jest\": {\n    \"transform\": {}\n  },\n  \"devDependencies\": {\n    \"jest\": \"^26.6.3\"\n  },\n  \"scripts\": {\n    \"test\": \"NODE_OPTIONS=--experimental-vm-modules npx jest\",\n  },\n\n```\n\nThen in your test files, if you need to access the global `jest` object, if you’re using jest mock functions for example, you have to import it like this:\n\n```js\nimport { jest } from '@jest/globals';\n```"
  },
  {
    "type": "article",
    "wp_id": 691,
    "title": "Mocking a Database in Node with Jest",
    "date": "2021-04-01T08:50:46",
    "slug": "mocking-a-database-with-jest-in-javascript",
    "image": {
      "name": "mocking-a-database-with-jest-in-javascript.png",
      "width": 1500,
      "height": 500,
      "url": "content/articles/mocking-a-database-with-jest-in-javascript/images/mocking-a-database-with-jest-in-javascript.png"
    },
    "status": "published",
    "description": "In a previous article, we tested an express api that created a user. We only tested the http interface though, we never actually got to testing the database because we didn’t know about dependency injection yet. Now that we know how to inject the database, we can learn about mocking. In this article, we will \\[…\\]",
    "tags": [],
    "dirPath": "content/articles/mocking-a-database-with-jest-in-javascript",
    "indexPath": "content/articles/mocking-a-database-with-jest-in-javascript/index.mdx",
    "imagesPath": "content/articles/mocking-a-database-with-jest-in-javascript/images",
    "hash": "fc16862a8d7817ffb25dc6ccfbe5a1963461c9aa",
    "text": "In a previous article, we tested an express api that created a user. We only tested the http interface though, we never actually got to testing the database because we didn’t know about dependency injection yet. Now that we know how to inject the database, we can learn about mocking.\n\nIn this article, we will learn how to use mocking to test how an express app interacts with a database.\n\n## POST /users\n\nLet’s review the post request that creates a new user. The client will send a username and password in the request body, and that data should eventually get stored in the database to persist the new user.\n\nHow do we test this?\n\n*   We could write an automated test that makes an POST request to our server to create a new user, the server could run some internal logic, maybe to validate the username and password, then it will store it into a database.\n*   We could then query the database directly and that check that the data actually got saved into the database correctly.\n*   Or we could then make another request to the server to try and login the user and if that works we know that the user must have been saved correctly.\n\nThese tests would be really good to have in our application and test the actual user flow of the app will all of the different pieces integrated together just like they would be in production. One issue with these tests is that we end up testing a lot of things at once. The server, some internal logic, the connection to the database, and in the second example, two separate http requests. If a test fails, it could be difficult to determine which part of the application isn’t working.\n\nWhat if we just want to test each piece of the app individually? Test the HTTP server, internal logic, and database layer separately. If we are able to test everything in complete isolation, we’ll know exactly what is and isn’t working. If a test fails, it will be very obvious where the issue is and it will be easier to fix that issue.\n\nWe should still test the system as a whole, that’s still important, but maybe we can do that after we’ve tested everything separately.\n\nBefore we can do this, we need to take a look at the dependencies:\n\n*   The http server is dependent on the internal validation logic and database wrapper. It needs to be able to execute the code from these parts of the app in order to run, so it seems a little hard to test this in isolation.\n*   The internal logic is dependent on no other parts of the app, it’s code that can easily run and be tested in isolation\n*   The database wrapper dependent on no other parts of the app, it’s dependent on an actual database, maybe mysql or mongo or something, so this will need some special consideration, but it’s not dependent on any other parts of our app.\n\nLet’s assume for a moment that the internal logic and database wrapper have already been fully tested. We know that these two parts of the app work in isolation. So we can forget about those for now. But how are we going to test the http server part of the app in isolation when it’s dependent on these other pieces?\n\n## Mocking\n\nWhen we use a mock in an automated test, we are using a fake version of a real thing. We can use the fake version to test the interactions. We can test that the `createUser` function was actually called, and the correct data was passed in, but we won’t test the real database. Take a look at the following code block:\n\n```js\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n\n  database.createUser(username, password)\n})\n```\n\nIn our production application, database will be an object that makes requests to a real database, maybe MySQL or Mongo or something. But in our tests, we can use a mock database and test that the `createUser` method was called.\n\n## Mocking with Jest\n\nHere’s our express app from the previous post on testing express apis:\n\n```js\nimport express from 'express'\n\nlet app = express()\n\napp.use(express.json())\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n  if (!username || !password) {\n    res.send(400)\n    return\n  }\n\n  res.send({userId: 0})\n})\n\nexport default app\n```\n\nThe first thing we need to do is to use dependency injection to pass in the database to the app:\n\n```js\nimport express from 'express'\n\nexport default function(database) {\n  let app = express()\n\n  app.use(express.json())\n  app.post('/users', async (req, res) => {\n    const { username, password } = req.body\n    if (!username || !password) {\n      res.send(400)\n      return\n    }\n\n    res.send({userId: 0})\n  })\n\n  return app\n}\n```\n\nIn production we’ll pass in a real database, but in our tests we’ll pass in a mock database.\n\nLet’s modify the app.test.js file. We’re only going to look at the tests that involve the database right now:\n\n```js\nimport request from \"supertest\"\nimport makeApp from \"./app.js\"\nimport { jest } from '@jest/globals'\n\nconst createUser = jest.fn()\nconst app = makeApp({createUser})\n\ndescribe(\"POST /users\", () => {\n\n  beforeEach(() => {\n    createUser.mockReset()\n  })\n\n  describe(\"when passed a username and password\", () => {\n    // should save the username and password in the database\n    // should contain the userId from the database in the json body\n  })\n\n})\n```\n\n[`jest.fn()`](https://jestjs.io/docs/mock-functions) creates a new general purpose mock function that we can use to test the interaction between the server and the database. So we can pass that to the app inside of an object. Remember that app is expecting a database object that contains a `createUser` function, so this is just a mock version of a database.\n\n> Note: If we’re using es modules, we need to import jest from ‘@jest/globals’\n\nJest’s mock functions will keep track of how they are called. They will store the parameters that were passed in and how many times they’ve been called an other details. Because of this, we need to reset the function before each test so we don’t get any left over state from another test.\n\n## Mock Function Parameters\n\nThe app is all setup with a mock database, now it’s time to write a test:\n\n```js\ndescribe(\"when passed a username and password\", () => {\n  test(\"should save the username and password in the database\", () => {\n    const body = {\n      username: \"username\",\n      password: \"password\"\n    }\n    const response = await request(app).post(\"/users\").send(body)\n    expect(createUser.mock.calls[0][0]).toBe(body.username)\n    expect(createUser.mock.calls[0][1]).toBe(body.password)\n  })\n})\n```\n\nThe `createUser` function will keep track of what’s passed into the function every time it’s called. So `createUser.mock.calls[0]` represents the data that gets passed in the first time it’s called. The server should call the function with the username and password like this `createUser(username, password)`, so `createUser.mock.calls[0][0]` should be the username and `createUser.mock.calls[0][0]` should be the password.\n\nIf we run the test it should fail because the server isn’t calling the createUser function. Let’s change that in app.js:\n\n```js\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n  if (!username || !password) {\n    res.send(400)\n    return\n  }\n\n  database.createUser(username, password)\n\n  res.send({userId: 0})\n})\n```\n\nNow the test should pass because the `createUser` function is being called correctly.\n\nRemember, this isn’t testing the actual database, that’s not the point right now. We use mocks to test that the **interactions** between different parts of the app are working correctly. So as long as `createUser` on the “real” database works correctly, and the server is calling the function correctly, then everything in the finished app should work correctly.\n\nThe test for this is not enough to make me comfortable though. It only tests a single username and password combination, I feel like there should be at least two to give me confidence that this function is being called correctly, so let’s adjust the test:\n\n```js\ntest(\"should save the username and password in the database\", () => {\n  const bodyData = [\n    {\n      username: \"username1\",\n      password: \"password1\"\n    },\n    {\n      username: \"username2\",\n      password: \"password2\"\n    }\n  ]\n  for (const body of bodyData) {\n    createUser.mockReset()\n    const response = await request(app).post(\"/users\").send(body)\n    expect(createUser.mock.calls[0][0]).toBe(body.username)\n    expect(createUser.mock.calls[0][1]).toBe(body.password)\n  }\n})\n```\n\nNow we’re testing two username and password combinations, but we could add more if we wanted.\n\n## Mock Function Return Value\n\nWe’ve tested that app passes `createUser` the correct data, but we also need to test that it uses the return value of the function correctly. `createUser` should return the id of the user that was just created. The server needs to take that value and send it in the response back to the client.\n\n```js\ntest(\"should contain the userId from the database in the json body\", () => {\n\n  createUser.mockResolvedValue(1)\n\n  const response = await request(app).post(\"/users\").send({\n    username: \"username\",\n    password: \"password\"\n  })\n  expect(response.body.userId).toBe(1)\n})\n```\n\n`createUser.mockResolvedValue(1)` will make `createUser` return a promise that resolves to 1. Since the real database will do things asynchronously, our mock function will need to do the same. So this will return 1 as a fake userId and the http api will need to respond with that value.\n\nThis test will fail right now, so let’s implement this in app.js:\n\n```js\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n  if (!username || !password) {\n    res.send(400)\n    return\n  }\n\n  const userId = database.createUser(username, password)\n\n  res.send({userId})\n})\n```\n\nThat should be enough to make the test pass. This is exactly how the app.js file should be interacting with the database. But again, the test isn’t really testing enough to give me confidence, so let’s refactor the test a bit:\n\n```js\ntest(\"should contain the userId from the database in the json body\", () => {\n  for (let i = 0; i < 5; i++) {\n    createUser.mockResolvedValue(i)\n    const response = await request(app).post(\"/users\").send({\n      username: \"username\",\n      password: \"password\"\n    })\n    expect(response.body.userId).toBe(i)\n  }\n})\n```\n\nNow it’s testing 5 different id values. That’s just a random number I chose, but it seemed simple to just do this in a for loop. Anyway, this is enough right now to make sure that the app is communicating with the database correctly.\n\nNext, we should probably actually test that database."
  },
  {
    "type": "article",
    "wp_id": 687,
    "title": "Testing an Express App With Supertest and Jest",
    "date": "2021-04-01T08:49:05",
    "slug": "testing-an-express-app-with-supertest-and-jest",
    "image": {
      "name": "testing-an-express-app-with-supertest-and-jest.png",
      "width": 1500,
      "height": 500,
      "url": "content/articles/testing-an-express-app-with-supertest-and-jest/images/testing-an-express-app-with-supertest-and-jest.png"
    },
    "status": "published",
    "description": "In this article, we’re going to look at how to use TDD to test an express API using the supertest and jest frameworks. Jest is a javascript test runner for running automated tests, and supertest provides a high-level abstraction for testing HTTP. The app that we will be testing will will contain a single endpoint \\[…\\]",
    "tags": [
      "express",
      "jest",
      "node js",
      "tdd"
    ],
    "dirPath": "content/articles/testing-an-express-app-with-supertest-and-jest",
    "indexPath": "content/articles/testing-an-express-app-with-supertest-and-jest/index.mdx",
    "imagesPath": "content/articles/testing-an-express-app-with-supertest-and-jest/images",
    "hash": "7bb6b7385514bd401be36bf6148eef2bc9a2c632",
    "text": "In this article, we’re going to look at how to use TDD to test an express API using the supertest and jest frameworks.\n\nJest is a javascript test runner for running automated tests, and supertest provides a high-level abstraction for testing HTTP.\n\nThe app that we will be testing will will contain a single endpoint to POST a new user given a username and password.\n\n## Express Apps\n\nA normal express implementation might look something like this:\n\n```js\nimport express from 'express'\n\nconst app = express()\n\napp.get('/test', (req, res) => {\n  res.send(\"🤗\")\n})\n\napp.listen(8080, () => console.log(\"listening on port 8080\"))\n```\n\nWhere we create a new http server from the express function and bind it to a port to listen for HTTP requests. When we write tests for the server using supertest, we can actually let supertest take care of the port binding which makes the tests much cleaner and easier to write. In order to do this, we won’t call `app.listen` here. Instead we should remove the app.listen line and just export app from this file.\n\n```js\nexport default app\n```\n\nThen in our test file, we can import app and use supertest to test the api. More in that in a moment.\n\n## App Setup\n\nThe setup for this app will contain the following three files:\n\n*   `app.js`: Contains the express code to define and implement all of the HTTP routes.\n*   `app.test.js`: Imports `app.js` and tests all of the endpoints.\n*   `server.js`: Imports `app.js` and binds it to port 8080.\n\n`server.js` will act as the entry point of the entire back end application that we can run with `node server.js`, and `app.js` only contains express specific code. We’ll see this separation come in handy even more in future articles.\n\n**app.js**\n\n```js\nimport express from 'express'\n\nconst app = express()\n\napp.post('/users', (req, res) => {\n\n})\n\nexport default app\n```\n\n**server.js**\n\n```js\nimport app from './app.js'\n\napp.listen(8080, () => \"Listening on port 8080\")\n```\n\n**test.js**\n\n```js\nimport request from 'supertest'\nimport app from 'app.js'\n```\n\n## What Are We Testing?\n\nSo in the test file, we are going to test that a POST request to `/users` works correctly. What does that mean? What exactly are we going to test?\n\nThat’s a good question, let’s plan this out in the `app.test.js` file.\n\n```js\nimport request from 'supertest'\nimport app from 'app.js'\n\ndescribe(\"POST /users\", () => {\n\n  describe(\"when passed a username and password\", () => {\n  // should save the username and password in the database\n  // should respond with a json object that contains the id from the database. (probably jwt in the real world)\n  // should respond with a 200 status code\n  // should specify json as the content type in the http header.\n  })\n\n  describe(\"when the username or password is missing\", () => {\n  // should return a 400 status code to show there was a user error.\n  // should return a json object that contains an error message.\n  // should specify json as the content type in the http header.\n  })\n})\n```\n\nWe’re using describe blocks here to better organize the code. The top block is the “happy” path, when things go well, and the bottom block is the sad path. These are all of the things that we’re going to test.\n\n*   when passed a username and password\n    *   should save the username and password in the database\n    *   should respond with a json object that contains the id from the database. (probably jwt in the real world)\n    *   should respond with a 200 status code\n    *   should specify json as the content type in the http header.\n*   when the username or password is missing\n    *   should return a 400 status code to show there was a user error.\n    *   should return a json object that contains an error message.\n    *   should specify json as the content type in the http header.\n\nThere are still things missing here:\n\n*   The username and password should be validated\n*   The password should be hashed\n*   What do we do if the username already exists in the database?\n*   What happens if the connection to the database fails?\n\nBut this is sufficient for this introductory article.\n\n## Writing Tests\n\nTime to start writing tests. For now we’re going to ignore any test that interacts with the database and that will get covered in another article. We’re just going to focus on the things that are directly related to the HTTP requests.\n\n```js\nimport request from \"supertest\"\nimport app from \"./app.js\"\n\ndescribe(\"POST /users\", () => {\n\n  describe(\"when passed a username and password\", () => {\n    test(\"should respond with a 200 status code\", async () => {\n      const response = await request(app).post(\"/users\").send({ \n        username: \"username\", \n        password: \"password\" \n      })\n      expect(response.statusCode).toBe(200)\n    })\n  })\n\n})\n```\n\nWhen we pass the express `app` to the `request()` function, supertest will bind the app to some port and listen for http requests. It abstracts away all of the http request code so we can just call `.post` or `.get` or whatever to make the http request to our server. When it’s a post request, we can use `.send` to add post body data and supertest will take of converting it to JSON and setting the request content type.\n\nThe response object contains all of the details about the HTTP response from the server, so we can use this to test the server is working correctly. In this test, we just want to make sure the status code is 200.\n\nThis should fail with a `Timeout` error because server isn’t responding to the client. Let’s make this pass by changing the `post('/users')` endpoint\n\n```js\napp.post('/users', async (req, res) => {\n\n  res.sendStatus(200)\n})\n```\n\nRe run the test and this will be passing.\n\nOk, on to the next test.\n\n### Response has a JSON content type\n\nWhen this endpoint is fully setup, it should return some json data back to the client. It’s very important that the server tells the client that the content type is JSON data. In general, we should just be doing this as a good practice, but some libraries like axios rely on this information to convert response data to a JavaScript object. So it’s worth testing this has been set correctly by the server.\n\n```js\ntest(\"should specify json as the content type in the http header\", () => {\n  const response = await request(app).post(\"/users\").send({ \n    username: \"username\", \n    password: \"password\" \n  })\n  expect(response.headers['content-type']).toEqual(expect.stringContaining('json'))\n})\n```\n\nWe’re making the same request as last time, but we’re using some jest’s `stringContaining` function to make sure the content-type contains ‘json’\n\nThis will now fail and the easiest way to make this pass is to change the response code to this:\n\n```js\nres.send({})\n```\n\nIf we pass a javascript object to `res.send`, express will strinigfy the object and set the content-type to application/json.\n\n> Side Note:  \n> Remember that with TDD it’s common to write our code this way, where we’re making tests pass with the simplest solution. This obviously isn’t what our production code is going to look like in the end, but the test is still valid. An incomplete implementation is just a sign that we don’t have enough tests yet. When we have a sufficient number of tests, then the code will actually work correctly. We only need to add more tests and make them pass, we won’t change the existing tests, they pass now with a overly simplistic implementation, but they must keep passing even when we have a more complex implementation later.\n\nFor more on TDD: https://youtu.be/89Pl2Uok8xc\n\n### Contains UserId\n\nNext test, we want to make sure the response object contains a userID\n\n```js\ntest(\"should contain a userId in the response body\", () => {\n  const response = await request(app).post(\"/users\").send({ \n    username: \"username\", \n    password: \"password\" \n  })\n  expect(response.body.userId).toBeDefined()\n})\n```\n\nWe’re not checking the content here, because we would need to think about the database for that. So instead, we’re just going to make sure it’s defined for now.\n\nThis will fail, so we can make it pass by changing the api:\n\n```js\napp.send({userId: 0})\n```\n\nAnd now the test passes.\n\n## No Username\n\nThat’s it for the happy path without implementing a database. Let’s move onto the sad path. When a username or password is missing, the server should respond with a 400 status code:\n\n```js\ndescribe(\"when the username or password is missing\", () => {\n  test(\"should return a 400 status code\", () => {\n    const response = await request(app).post(\"/users\").send({ username: \"username\" })\n    expect(response.statusCode).toBe(400)\n  })\n})\n```\n\nThis fails because the server is still responding with a 200. But we can make this pass with a simple check for a username:\n\n```js\napp.use(express.json())\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n  if (!username) {\n    res.send(400)\n    return\n  }\n\n  res.send({userId: 0})\n})\n```\n\nNow it’s passing, let’s do the same for a password. Instead of making a new test for this, let’s just throw this into the same test since it’s really testing the same thing.\n\n```js\ntest(\"should return a 400 status code\", () => {\n  const bodies = [\n    { username: \"username\" },\n    { password: \"password\" }\n  ]\n  for (const body of bodies) {\n    const response = await request(app).post(\"/users\").send(body)\n    expect(response.statusCode).toBe(400)\n  }\n})\n```\n\nInstead of just duplicating the same code again, we can put the data in an array and use a for loop to execute the actual test. This makes it easier to add more username and password cases in the future.\n\nThis should fail, but we can make it pass:\n\n```js\napp.use(express.json())\napp.post('/users', async (req, res) => {\n  const { username, password } = req.body\n  if (!username || !password) {\n    res.send(400)\n    return\n  }\n\n  res.send({userId: 0})\n})\n```\n\nNow that’s passing, we want to check what happens when neither username nor password are provided:\n\n```js\nconst bodies = [\n  { username: \"username\" },\n  { password: \"password\" },\n  {}\n]\n```\n\nAnd this should already be passing, but it’s good to test.\n\n## Database\n\nOk so this is great that we’re testing some of the basic HTTP stuff, but we really need to test that the main thing works. That the data actually gets stored in the database.\n\nBefore we get into that, let’s talk about dependency injection."
  },
  {
    "type": "article",
    "wp_id": 671,
    "title": "Terraform | VPC, Subnets, EC2, and more",
    "date": "2021-03-28T20:20:50",
    "slug": "terraform-vpc-subnets-ec2-and-more",
    "image": {
      "name": "terraform-vpc-subnets-ec2-and-more.png",
      "width": 6912,
      "height": 3456,
      "url": "content/articles/terraform-vpc-subnets-ec2-and-more/images/terraform-vpc-subnets-ec2-and-more.png"
    },
    "status": "published",
    "description": "Let’s take a look at how to use the aws cli to create a VPC, Subnets, EC2 instances, and more.",
    "tags": [
      "aws",
      "ec2",
      "terraform",
      "vpc"
    ],
    "dirPath": "content/articles/terraform-vpc-subnets-ec2-and-more",
    "indexPath": "content/articles/terraform-vpc-subnets-ec2-and-more/index.mdx",
    "imagesPath": "content/articles/terraform-vpc-subnets-ec2-and-more/images",
    "hash": "6655fd6ba4c113580532f529f2a5f86d0bbb1ae4",
    "text": "Let’s take a look at how to use Terraform with AWS to create a VPC, Subnets, EC2 instances, and more.\n\nTerraform is an open-source infrastructure as code software tool that let’s us configure our infrastructure using declarative configuration files.\n\nIn this article, we will take a look at how to do the following using terraform:\n\n*   Create a VPC and subnets\n*   Create an internet gateway and route table to make the subnet public\n*   Create security groups\n*   Create an ec2 instance on a public subnet and install nginx\n\nEvery block of code in this article needs to be added to a .tf file and run using terraform to setup the infrastructure. Skip to the bottom of the article if you just want the script.\n\nI won’t be going over the basic setup of terraform or the installation instructions, the purpose of this article is to give a real example of a .tf file that sets up some basic infrastructure. For a quick introduction and installation instructions, check out [HashiCorp Learn](https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started)\n\n## Terraform and AWS\n\nTerraform can be used with many [providers](https://registry.terraform.io/providers/hashicorp/aws/latest/docs) like aws, azure, or google cloud. To use it with AWS, we first declare the aws provider with the region we’re using to setup our infrastructure.\n\n```r\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-east-1\"\n}\n```\n\n## VPC and EC2 instance\n\nWhen setting up a new VPC to deploy EC2 instances, we usually follow these basic steps.\n\n1.  Create a vpc\n2.  Create subnets for different parts of the infrastructure\n3.  Attach an internet gateway to the VPC\n4.  Create a route table for a public subnet\n5.  Create security groups to allow specific traffic\n6.  Create ec2 instances on the subnets\n\n### 1\\. Create a vpc\n\n[Resource: aws\\_vpc](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/vpc)\n\n```r\nresource \"aws_vpc\" \"some_custom_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"Some Custom VPC\"\n  }\n}\n```\n\nThis will setup a new VPC with the cidr block `10.0.0.0/16` and the name “Some Custom VPC”. We can reference the VPC locally in the tf file using `some_custom_vpc`.\n\n### 2\\. Create subnets for different parts of the infrastructure\n\n[Resource: aws\\_subnet](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet)\n\n```r\nresource \"aws_subnet\" \"some_public_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.1.0/24\"\n  availability_zone = \"1a\"\n\n  tags = {\n    Name = \"Some Public Subnet\"\n  }\n}\n\nresource \"aws_subnet\" \"some_private_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.2.0/24\"\n  availability_zone = \"1a\"\n\n  tags = {\n    Name = \"Some Private Subnet\"\n  }\n}\n```\n\nThis will create two new subnets in az 1a with the cidr blocks `10.0.1.0/24` and `10.0.2.0/24`. We need to use the VpcId from the previous step.\n\n### 3\\. Attach an internet gateway to the VPC\n\n[Resource: aws\\_internet\\_gateway](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/internet_gateway)\n\n```r\nresource \"aws_internet_gateway\" \"some_ig\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  tags = {\n    Name = \"Some Internet Gateway\"\n  }\n}\n```\n\nThis creates an internet gateway and attaches it to the custom VPC. Now we need a route table to handle routing to one or more of the subnets.\n\n### 4\\. Create a route table for a public subnet\n\n[Resource: aws\\_route\\_table](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table)\n\n```r\nresource \"aws_route_table\" \"public_rt\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.some_ig.id\n  }\n\n  route {\n    ipv6_cidr_block = \"::/0\"\n    gateway_id      = aws_internet_gateway.some_ig.id\n  }\n\n  tags = {\n    Name = \"Public Route Table\"\n  }\n}\n```\n\nThis will create a new route table on the custom vpc. We can also specify the routes to route internet traffic through the gateway. So the route table and internet gateway are setup on The VPC, now we just need to assiociate any public subnets with the route table.\n\n[Resource: aws\\_route\\_table\\_association](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route_table_association)\n\n```r\nresource \"aws_route_table_association\" \"public_1_rt_a\" {\n  subnet_id      = aws_subnet.some_public_subnet.id\n  route_table_id = aws_route_table.public_rt.id\n}\n```\n\nNow `some_public_subnet` is accessible over the public internet.\n\n### 5\\. Create security groups to allow specific traffic\n\nBefore we setup a new EC2 instance on the public subnet, we need to create a security group that allows internet traffic on port 80 and 22. We’ll also allow outgoing traffic on all ports.\n\n[Resource: aws\\_security\\_group](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group)\n\n```r\nresource \"aws_security_group\" \"web_sg\" {\n  name   = \"HTTP and SSH\"\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```\n\n### 6\\. Create ec2 instances on the subnets\n\nTime to deploy an EC2 instance. If you already have an ssh keypair setup, you can just use that and skip the next step. If you haven’t, or if you want to setup a new ssh key for this instance, run the following command using the aws cli.\n\n```shell\naws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > ~/.ssh/MyKeyPair.pem\nchmod 400  ~/.ssh/MyKeyPair.pem\n```\n\nThis will generate a new keypair and store the private key on your machine at `~/.ssh/MyKeyPair.pem`\n\n[Resource: aws\\_instance](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#associate_public_ip_address)\n\n```r\nresource \"aws_instance\" \"web_instance\" {\n  ami           = \"ami-0533f2ba8a1995cf9\"\n  instance_type = \"t2.micro\"\n  key_name      = \"MyKeyPair\"\n\n  subnet_id                   = aws_subnet.some_public_subnet.id\n  vpc_security_group_ids      = [aws_security_group.web_sg.id]\n  associate_public_ip_address = true\n\n  user_data = <<-EOF\n  #!/bin/bash -ex\n\n  amazon-linux-extras install nginx1 -y\n  echo \"<h1>$(curl https://api.kanye.rest/?format=text)</h1>\" >  /usr/share/nginx/html/index.html \n  systemctl enable nginx\n  systemctl start nginx\n  EOF\n\n  tags = {\n    \"Name\" : \"Kanye\"\n  }\n}\n```\n\nThis sets up a new Amazon Linux 2 ec2 instance with nginx installed. The default home page will display a random Kanye West quote.\n\n## Script\n\nHere's what everything looks like as a single .tf file. Use the following commands to\n\n*   `terraform init`: Setup a new terraform project for this file.\n*   `terraform apply`: Setup the infrastructure as it’s defined in the .tf file.\n*   `terraform destroy`: Tear down everything that terraform created.\n*   `terraform state list`: Show everything that was created by terraform.\n*   `terraform state show aws_instance.web_instance`: Show the details about the ec2 instance that was deployed.\n\nUse that last command to get the public IP address of the ec2 instance so you can visit it in your web browser.\n\n```r\nprovider \"aws\" {\n  profile = \"default\"\n  region  = \"us-east-1\"\n}\n\nresource \"aws_vpc\" \"some_custom_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n\n  tags = {\n    Name = \"Some Custom VPC\"\n  }\n}\n\nresource \"aws_subnet\" \"some_public_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.1.0/24\"\n  availability_zone = \"us-east-1a\"\n\n  tags = {\n    Name = \"Some Public Subnet\"\n  }\n}\n\nresource \"aws_subnet\" \"some_private_subnet\" {\n  vpc_id            = aws_vpc.some_custom_vpc.id\n  cidr_block        = \"10.0.2.0/24\"\n  availability_zone = \"us-east-1a\"\n\n  tags = {\n    Name = \"Some Private Subnet\"\n  }\n}\n\nresource \"aws_internet_gateway\" \"some_ig\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  tags = {\n    Name = \"Some Internet Gateway\"\n  }\n}\n\nresource \"aws_route_table\" \"public_rt\" {\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.some_ig.id\n  }\n\n  route {\n    ipv6_cidr_block = \"::/0\"\n    gateway_id      = aws_internet_gateway.some_ig.id\n  }\n\n  tags = {\n    Name = \"Public Route Table\"\n  }\n}\n\nresource \"aws_route_table_association\" \"public_1_rt_a\" {\n  subnet_id      = aws_subnet.some_public_subnet.id\n  route_table_id = aws_route_table.public_rt.id\n}\n\nresource \"aws_security_group\" \"web_sg\" {\n  name   = \"HTTP and SSH\"\n  vpc_id = aws_vpc.some_custom_vpc.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = -1\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\nresource \"aws_instance\" \"web_instance\" {\n  ami           = \"ami-0533f2ba8a1995cf9\"\n  instance_type = \"t2.nano\"\n  key_name      = \"MyKeyPair2\"\n\n  subnet_id                   = aws_subnet.some_public_subnet.id\n  vpc_security_group_ids      = [aws_security_group.web_sg.id]\n  associate_public_ip_address = true\n\n  user_data = <<-EOF\n  #!/bin/bash -ex\n\n  amazon-linux-extras install nginx1 -y\n  echo \"<h1>$(curl https://api.kanye.rest/?format=text)</h1>\" >  /usr/share/nginx/html/index.html \n  systemctl enable nginx\n  systemctl start nginx\n  EOF\n\n  tags = {\n    \"Name\" : \"Kanye\"\n  }\n}\n```"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjQ1bldzbUJ4VDE4",
    "videoId": "45nWsmBxT18",
    "title": "Build a web app with React, Express, Mysql, S3, Heroku | Live Lesson Demo",
    "date": "2021-03-12T19:57:14Z",
    "slug": "build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo",
    "image": {
      "name": "build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo.jpg",
      "alt": "Build a web app with React, Express, Mysql, S3, Heroku | Live Lesson Demo",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo/images/build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo.jpg"
    },
    "status": "published",
    "description": "In this hour-long class, I demo how to make a react app that uploads images to an s3 bucket and persists data to a MySQL database. Everything is hosted in the cloud.",
    "tags": [],
    "dirPath": "content/videos/videos/build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo",
    "indexPath": "content/videos/videos/build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo/index.mdx",
    "imagesPath": "content/videos/videos/build-a-web-app-with-react,-express,-mysql,-s3,-heroku-live-lesson-demo/images",
    "hash": "78bb199b2d5c67a5c143f02bc855992c09d988ac",
    "text": "In this hour-long class, I demo how to make a react app that uploads images to an s3 bucket and persists data to a MySQL database. Everything is hosted in the cloud.\n\n* Heroku\n* MySQL with JawsDB\n* S3\n* React JS\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/image-uploader-s3-mysql.git](https://github.com/Sam-Meech-Ward/image-uploader-s3-mysql.git)\n\n🔗Other tutorials:\nImage Upload with S3: [https://youtu.be/NZElg91l_ms](https://youtu.be/NZElg91l_ms)\nS3 bucket for static assets: [https://youtu.be/RoY3ekCCxKc](https://youtu.be/RoY3ekCCxKc)\nImage upload without s3: [https://sammeechward.com/uploading-images-express-and-react/](https://sammeechward.com/uploading-images-express-and-react/)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjg5UGwyVW9rOHhj",
    "videoId": "89Pl2Uok8xc",
    "title": "TDD in JavaScript | Test Driven Development",
    "date": "2021-03-07T22:07:30Z",
    "slug": "tdd-in-javascript-test-driven-development",
    "image": {
      "name": "tdd-in-javascript-test-driven-development.jpg",
      "alt": "TDD in JavaScript | Test Driven Development",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/tdd-in-javascript-test-driven-development/images/tdd-in-javascript-test-driven-development.jpg"
    },
    "status": "published",
    "description": "Learn how to use test-driven development (TDD) in your JavaScript applications to help guide your software development.",
    "tags": [],
    "dirPath": "content/videos/videos/tdd-in-javascript-test-driven-development",
    "indexPath": "content/videos/videos/tdd-in-javascript-test-driven-development/index.mdx",
    "imagesPath": "content/videos/videos/tdd-in-javascript-test-driven-development/images",
    "hash": "642c713cb268d958e3db2f376ee1a3df549f9662",
    "text": "Learn how to use test-driven development (TDD) in your JavaScript applications to help guide your software development.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/automated_tests_jest](https://github.com/Sam-Meech-Ward/automated_tests_jest)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmh6MF9xMU1KYTJr",
    "videoId": "hz0_q1MJa2k",
    "title": "Unit Testing in Javascript | Writing Automated Tests With Jest",
    "date": "2021-03-06T22:07:07Z",
    "slug": "unit-testing-in-javascript-writing-automated-tests-with-jest",
    "image": {
      "name": "unit-testing-in-javascript-writing-automated-tests-with-jest.jpg",
      "alt": "Unit Testing in Javascript | Writing Automated Tests With Jest",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/unit-testing-in-javascript-writing-automated-tests-with-jest/images/unit-testing-in-javascript-writing-automated-tests-with-jest.jpg"
    },
    "status": "published",
    "description": "Learn why we write automated tests and how to write automated unit tests in JavaScript using the jest test framework. ",
    "tags": [],
    "dirPath": "content/videos/videos/unit-testing-in-javascript-writing-automated-tests-with-jest",
    "indexPath": "content/videos/videos/unit-testing-in-javascript-writing-automated-tests-with-jest/index.mdx",
    "imagesPath": "content/videos/videos/unit-testing-in-javascript-writing-automated-tests-with-jest/images",
    "hash": "51b02a34d31403758a71d24a97022b0026cc4779",
    "text": "Learn why we write automated tests and how to write automated unit tests in JavaScript using the jest test framework. \n\n🔗TDD: \n[https://youtu.be/89Pl2Uok8xc](https://youtu.be/89Pl2Uok8xc)\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/automated_tests_jest](https://github.com/Sam-Meech-Ward/automated_tests_jest)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk5aRWxnOTFsX21z",
    "videoId": "NZElg91l_ms",
    "title": "Upload Images to S3 from Node Back End",
    "date": "2021-03-01T16:00:07Z",
    "slug": "upload-images-to-s3-from-node-back-end",
    "image": {
      "name": "upload-images-to-s3-from-node-back-end.jpg",
      "alt": "Upload Images to S3 from Node Back End",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/upload-images-to-s3-from-node-back-end/images/upload-images-to-s3-from-node-back-end.jpg"
    },
    "status": "published",
    "description": "There is an updated version to this tutorial. Use the new one instead: https://youtu.be/eQAIojcArRY",
    "tags": [],
    "dirPath": "content/videos/videos/upload-images-to-s3-from-node-back-end",
    "indexPath": "content/videos/videos/upload-images-to-s3-from-node-back-end/index.mdx",
    "imagesPath": "content/videos/videos/upload-images-to-s3-from-node-back-end/images",
    "hash": "fc57569a3227c3e640a0692a1dff9328cff6f63f",
    "text": "There is an updated version to this tutorial. Use the new one instead: [https://youtu.be/eQAIojcArRY](https://youtu.be/eQAIojcArRY)\n\nLearn how to store your express server's image files in an s3 bucket.\n\n## Chapters:\n\n* 0:00​ Intro\n* 1:23​ Using Multer to POST the image to the server\n* 4:36 Setting up the S3 bucket\n* 6:38 Creating an IAM Policy for the bucket\n* 9:10 Creating an IAM User for the server\n* 11:27 Installing the AWS SDK\n* 14:00 Uploading the image to S3\n* 18:08 Downloading the image from S3 \n* 22:28 Removing images from the server\n* 25:37 Conclusion\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/image-upload-s3](https://github.com/Sam-Meech-Ward/image-upload-s3)\n\n🔗Other tutorials:\nUpload Images Directly to S3 from Front End: [https://youtu.be/yGYeYJpRWPM](https://youtu.be/yGYeYJpRWPM)\nS3 bucket for static website: [https://youtu.be/RoY3ekCCxKc](https://youtu.be/RoY3ekCCxKc)\nImage upload without s3: [https://sammeechward.com/uploading-images-express-and-react/](https://sammeechward.com/uploading-images-express-and-react/)"
  },
  {
    "type": "article",
    "wp_id": 657,
    "title": "Uploading Images – Express and React",
    "date": "2021-03-01T04:05:42",
    "slug": "uploading-images-express-and-react",
    "image": {
      "name": "uploading-images-express-and-react.png",
      "width": 2560,
      "height": 1280,
      "url": "content/articles/uploading-images-express-and-react/images/uploading-images-express-and-react.png"
    },
    "status": "published",
    "description": "In this article I’m going to show you how to upload an image from a react app to an express server using a library called multer. This will allow us to store the image in the server’s file system so they can be uploaded and downloaded by any client. React Let’s start with a basic \\[…\\]",
    "tags": [
      "javascript",
      "node"
    ],
    "dirPath": "content/articles/uploading-images-express-and-react",
    "indexPath": "content/articles/uploading-images-express-and-react/index.mdx",
    "imagesPath": "content/articles/uploading-images-express-and-react/images",
    "hash": "75fa60e21d3c72aab4532d08038a79473c3f1013",
    "text": "In this article I’m going to show you how to upload an image from a react app to an express server using a library called multer. This will allow us to store the image in the server’s file system so they can be uploaded and downloaded by any client.\n\n## React\n\nLet’s start with a basic react app. This app just contains a single form that allows the user to select an image (file), provide a description (string), and submit them.\n\n```js\nimport { useState } from 'react'\n\nexport default function App() {\n  const [file, setFile] = useState()\n  const [description, setDescription] = useState(\"\")\n\n  const submit = async event => {\n    event.preventDefault()\n\n    // Send the file and description to the server\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={submit}>\n        <input\n          filename={file} \n          onChange={e => setFile(e.target.files[0])} \n          type=\"file\" \n          accept=\"image/*\"\n        ></input>\n        <input\n          onChange={e => setDescription(e.target.value)} \n          type=\"text\"\n        ></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  )\n}\n```\n\nSo far this looks like a basic form, the only weird thing is that the file input has a type `file` and when the value changes, we selecting the `event.target.files[0]` and storing that with `useState`.\n\nEvery time the user selects a file, we’re storing the [File](https://developer.mozilla.org/en-US/docs/Web/API/File) object. This object contains all of the information about the selected file and we just need to send this data to the server when the form is submitted.\n\nIf we’re using `axios`, the submit file function will look like this:\n\n```js\nconst submit = async event => {\n  event.preventDefault()\n\n  const formData = new FormData()\n  formData.append(\"image\", file)\n  formData.append(\"description\", description)\n\n  const result = await axios.post('/api/images', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n  console.log(result.data)\n}\n```\n\nIf you’re used to just posting JSON data to a server, this can look a little bit weird. An image is not a valid JSON data type which means we would either have to try and convert it to a string, send it as a json object, then convert it back to image data on the server. Or we can send it to the server using this `FormData` object, which is a much better option.\n\nWhen we create a new FormData object, we just append all of the data that we want to send to this object. There’s the image file, and then anything else you want to send, in this case a description.\n\nThen we send that data to the server, but we have to specify that the content type is `'multipart/form-data'` so the server knows what kind of data we might be sending.\n\nSo that’s it for the client side, what about the server? What does the server need to do when we make a post request to `'/images'` with this form data?\n\n## Express\n\nLet’s start with a basic express server:\n\n```js\nconst express = require('express')\n\nconst app = express()\n\napp.post('/api/images', (req, res) => {\n\n  res.send(\"🤗\")\n})\n\napp.listen(8080, () => console.log(\"listening on port 8080\"))\n```\n\nSo a basic express server that is listening for a post request to `/images`. Obviously this isn’t going to do anything with the image data, but at least we get a nice response 🤗.\n\nThe question now is, how do we handle the image data coming into this request and store the image as a file on the server?\n\n## Upload Image\n\nWell luckily for us, there is a fantastic library called [multer](https://www.npmjs.com/package/multer) that will handle all of that for us.\n\nFirst install the library:\n\n```shell\nnpm i multer\n```\n\nThen use the library:\n\n```js\n// 1\nconst multer = require('multer')\n// 2\nconst upload = multer({ dest: 'images/' })\n\n// 3\napp.post('/api/images', upload.single('image'), (req, res) => {\n  // 4\n  const imagePath = req.file.path\n  const description = req.body.description\n\n  // Save this data to a database probably\n\n  console.log(description, imagePath)\n  res.send({description, imagePath})\n})\n```\n\n1.  Require the multer library.\n2.  Specify the folder that the files should be saved to. We’re just going to save it to a folder called `images` on the server.\n3.  Add a middleware function that will accept the image data from the client side form data as long as it’s called `image`. Which is exactly what we called it in the react app `formData.append(\"image\", file)`\n4.  Once multer has successfully saved the image, we can access the image data from `req.file` and any other form data from `req.body`.\n\nMulter creates a unique name for the file, so the path will be something like `images/d54c8136cd238804b67e4a0c56427f8b`\n\nWe probably want to save this data to a database so we can query it back later, but we don’t care about that right now. This is just a post about uploading images.\n\nWe’re going to send the description and the path to the image back to the client so we can use it to view the uploaded image.\n\n## Download Image\n\nThe image is currently being stored in a directory called `images` on the server. That’s great, but there’s currently no way of getting the image back from the server. We want to allow the client to request the image in an img tag like this:\n\n```html\n<img src=\"images/d54c8136cd238804b67e4a0c56427f8b\">\n```\n\nThen the server needs to send the image to the client. This can be done in many ways, but the easiest way is to just let express serve these as static files:\n\n```js\napp.use('/images', express.static('images'))\n```\n\nThis allows anyone to view any image in the images directory. This might be exactly what you want, then yay, you’re done. But you might want to keep images private and only allow authorized users to view images. In that case, you’ll want to do something more like this:\n\n```js\nconst fs = require('fs')\n\napp.get('/images/:imageName', (req, res) => {\n  // do a bunch of if statements to make sure the user is \n  // authorized to view this image, then\n\n  const imageName = req.params.imageName\n  const readStream = fs.createReadStream(`images/${imageName}`)\n  readStream.pipe(res)\n})\n```\n\n## Final Code\n\nHere’s what the final code might look like for this app. The react app posts and image and then shows that image in an `img` tag. The server stores the image in its file system and serves the images when a request for an image is made:\n\n#### React\n\n```js\nimport { useState } from 'react'\nimport axios from 'axios'\n\nexport default function App() {\n  const [file, setFile] = useState()\n  const [description, setDescription] = useState(\"\")\n  const [image, setImage] = useState()\n\n  const submit = async event => {\n    event.preventDefault()\n\n    const formData = new FormData()\n    formData.append(\"image\", file)\n    formData.append(\"description\", description)\n\n    const result = await axios.post('/api/images', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n    setImage(result.data.imagePath)\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={submit}>\n        <input\n          filename={file} \n          onChange={e => setFile(e.target.files[0])} \n          type=\"file\" \n          accept=\"image/*\"\n        ></input>\n        <input\n          onChange={e => setDescription(e.target.value)} \n          type=\"text\"\n        ></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n      { image && <img src={image}>}\n    </div>\n  )\n}\n```\n\n#### Express\n\n```js\nconst express = require('express')\nconst fs = require('fs')\nconst multer = require('multer')\n\nconst upload = multer({ dest: 'images/' })\n\nconst app = express()\n\n// app.use('/images', express.static('images'))\napp.get('/images/:imageName', (req, res) => {\n  // do a bunch of if statements to make sure the user is \n  // authorized to view this image, then\n\n  const imageName = req.params.imageName\n  const readStream = fs.createReadStream(`images/${imageName}`)\n  readStream.pipe(res)\n})\n\napp.post('/api/images', upload.single('image'), (req, res) => {\n  const imagePath = req.file.path\n  const description = req.body.description\n\n  // Save this data to a database probably\n\n  console.log(description, imagePath)\n  res.send({description, imagePath})\n})\n\napp.listen(8080, () => console.log(\"listening on port 8080\"))\n```"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnY1ekZfQVlhUmZR",
    "videoId": "v5zF_AYaRfQ",
    "title": "TDD and Unit Testing in iOS | Part 3 View Controllers",
    "date": "2021-02-18T23:08:48Z",
    "slug": "tdd-and-unit-testing-in-ios-part-3-view-controllers",
    "image": {
      "name": "tdd-and-unit-testing-in-ios-part-3-view-controllers.jpg",
      "alt": "TDD and Unit Testing in iOS | Part 3 View Controllers",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/tdd-and-unit-testing-in-ios-part-3-view-controllers/images/tdd-and-unit-testing-in-ios-part-3-view-controllers.jpg"
    },
    "status": "published",
    "description": "Learn how to use the XCTest framework to write unit tests for UIViewControllers.",
    "tags": [],
    "dirPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-3-view-controllers",
    "indexPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-3-view-controllers/index.mdx",
    "imagesPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-3-view-controllers/images",
    "hash": "11357c10294f8be95c69e37e3b9a8213cc0210c6",
    "text": "Learn how to use the XCTest framework to write unit tests for UIViewControllers.\n\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmVVa2xSUy1DZ1A4",
    "videoId": "eUklRS-CgP8",
    "title": "UIScrollViews in iOS with Swift",
    "date": "2021-02-05T18:51:09Z",
    "slug": "uiscrollviews-in-ios-with-swift",
    "image": {
      "name": "uiscrollviews-in-ios-with-swift.jpg",
      "alt": "UIScrollViews in iOS with Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/uiscrollviews-in-ios-with-swift/images/uiscrollviews-in-ios-with-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use UIScrollViews in your iOS apps.",
    "tags": [],
    "dirPath": "content/videos/videos/uiscrollviews-in-ios-with-swift",
    "indexPath": "content/videos/videos/uiscrollviews-in-ios-with-swift/index.mdx",
    "imagesPath": "content/videos/videos/uiscrollviews-in-ios-with-swift/images",
    "hash": "02df76b52cbddbb660dab8ef647693f71537baed",
    "text": "Learn how to use UIScrollViews in your iOS apps.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/UIScrollViews-Example](https://github.com/Sam-Meech-Ward/UIScrollViews-Example)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkF4SkpHb3BwYWpV",
    "videoId": "AxJJGoppajU",
    "title": "Delegates in iOS with Swift",
    "date": "2021-01-29T16:42:28Z",
    "slug": "delegates-in-ios-with-swift",
    "image": {
      "name": "delegates-in-ios-with-swift.jpg",
      "alt": "Delegates in iOS with Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/delegates-in-ios-with-swift/images/delegates-in-ios-with-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use the Delegate design pattern using Swift in an iOS app.",
    "tags": [],
    "dirPath": "content/videos/videos/delegates-in-ios-with-swift",
    "indexPath": "content/videos/videos/delegates-in-ios-with-swift/index.mdx",
    "imagesPath": "content/videos/videos/delegates-in-ios-with-swift/images",
    "hash": "9fa016b4d461ba721b20ba58f06212b058ed5a3d",
    "text": "Learn how to use the Delegate design pattern using Swift in an iOS app.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "article",
    "wp_id": 596,
    "title": "AWS CLI | VPC, Subnets, EC2, and more",
    "date": "2020-11-28T19:47:00",
    "slug": "aws-cli-vpc-subnets-ec2-and-more",
    "image": {
      "name": "aws-cli-vpc-subnets-ec2-and-more.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/aws-cli-vpc-subnets-ec2-and-more/images/aws-cli-vpc-subnets-ec2-and-more.png"
    },
    "status": "published",
    "description": "Let’s take a look at how to use the aws cli to create a VPC, Subnets, EC2 instances, and more.",
    "tags": [
      "aws",
      "ec2",
      "vpc"
    ],
    "dirPath": "content/articles/aws-cli-vpc-subnets-ec2-and-more",
    "indexPath": "content/articles/aws-cli-vpc-subnets-ec2-and-more/index.mdx",
    "imagesPath": "content/articles/aws-cli-vpc-subnets-ec2-and-more/images",
    "hash": "fbf9349ede89658bf00f20a179f0017d8c855af1",
    "text": "Let’s take a look at how to use the aws cli to create a VPC, Subnets, EC2 instances, and more.\n\nIn this article, we will take a look at how to do the following using the aws cli:\n\n*   Create a VPC and subnets\n*   Create an internet gateway and route table to make the subnet public\n*   Create security groups\n*   Create an ec2 instance on a public subnet and install nginx\n\nSkip to the bottom of the article if you just want the script.\n\n## AWS CLI\n\nThe AWS Command Line Interface (CLI) lets us manage all of our AWS services from the command line, without having to use the web console. So instead of clicking a bunch of buttons to create a new EC2 instance, you could just run a command like this:\n\n```shell\naws ec2 run-instances  --region $region --image-id \"ami-0d4504aaac331dc68\" --count 1 --instance-type t2.micro --associate-public-ip-address\n```\n\nIn this article, we will take a look at how to setup an S3 bucket to host a static website using the aws cli. Skip to the bottom of the article if you just want the script.\n\n## Setup\n\nIf you haven’t setup the AWS CLI already, you can do so using this link: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html\n\nThe reference for all of the commands used here is available at  \nhttps://docs.aws.amazon.com/cli/latest/reference/\n\n## VPC and EC2 instance\n\nWhen setting up a new VPC to deploy EC2 instances, we usually follow these basic steps.\n\n1.  Create a vpc\n2.  Create subnets for different parts of the infrastructure\n3.  Create a route table for a public subnet\n4.  Attach an internet gateway to make a public subnet\n5.  Create security groups to allow specific traffic\n6.  Create ec2 instances on the subnets\n\n### 1\\. Create a vpc\n\n[aws ec2 create-vpc](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html)\n\n```shell\naws ec2 create-vpc --region us-east-1 --cidr-block \"10.0.0.0/16\" \n```\n\nThis will setup a new VPC with the cidr block `10.0.0.0/16` and return some JSON. You will need to find the `VpcId` from this JSON and save it for the next steps.\n\n```json\n{\n    \"Vpc\": {\n        \"VpcId\": \"vpc-2f09a348\", \n        ...\n    }\n}\n```\n\n### 2\\. Create subnets for different parts of the infrastructure\n\n[aws ec2 create-subnet](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html)\n\n```shell\naws ec2 create-subnet --region us-east-1 --cidr-block \"10.0.1.0/24\" --availability-zone us-east-1a --vpc-id \"...\"\naws ec2 create-subnet --region us-east-1 --cidr-block \"10.0.2.0/24\" --availability-zone us-east-1b --vpc-id \"...\"\n```\n\nThis will create two new subnets in az 1a an 1b with the cidr blocks `10.0.1.0/24` and `10.0.w.0/24`. You will need to use the VpcId from the previous step.\n\nFind the `SubnetId` from the json returned and save them for the next steps. We will use the first subnet in us-east-1a as the public subnet, so we really only need the id of that subnet.\n\n```json\n{\n  \"Subnet\": {\n      ...\n      \"SubnetId\": \"subnet-079a1cf\",\n      ...\n  }\n}\n```\n\n### 3\\. Create a route table for a public subnet\n\n[aws ec2 create-route-table](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html)\n\n```shell\naws ec2 create-route-table --region us-east-1  --vpc-id \"...\"\n```\n\nThis will create a new route table. You will need to use the VpcId from the first step.\n\nFind the `RouteTableId` from the json returned and save it for the next steps.\n\n```json\n{\n    \"RouteTable\": {\n        ... \n        \"RouteTableId\": \"rtb-c1c8faa6\", \n        ...\n    }\n}\n```\n\n[aws ec2 associate-route-table](https://docs.aws.amazon.com/cli/latest/reference/ec2/associate-route-table.html)\n\n```shell\naws ec2 associate-route-table --region us-east-1 --route-table-id \"...\" --subnet-id \"...\"\n```\n\nThis will associate the route table with a VPC. You will need to use the VpcId from the first step and the first subnet id from earlier.\n\n### 4\\. Attach an internet gateway to make a public subnet\n\n[aws ec2 create-internet-gateway](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-internet-gateway.html)\n\n```shell\naws ec2 create-internet-gateway --region us-east-1 \n```\n\nThis creates an internet gateway and does nothing else. We will still need to attach it to the VPC and route internet traffic to it.\n\nFind the `InternetGatewayId` from the returned json and save it for the next steps.\n\n```json\n{\n  \"InternetGateway\": {\n      ...\n      \"InternetGatewayId\": \"igw-07d58174\",\n      ...\n  }\n}\n```\n\n[aws ec2 attach-internet-gateway](https://docs.aws.amazon.com/cli/latest/reference/ec2/attach-internet-gateway.html)\n\n```shell\naws ec2 attach-internet-gateway --region us-east-1 --internet-gateway-id \"...\" --vpc-id \"...\"\n```\n\nThis will attach it to the vpc.\n\n[aws ec2 create-route](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html)\n\n```shell\naws ec2 create-route --region us-east-1 --route-table-id \"...\" --destination-cidr-block \"0.0.0.0/0\" --gateway-id \"...\" \n```\n\nThis will route internet traffic through the gateway.\n\nAt this point the VPC is setup in a good state. We can setup an EC2 instance on the public subnet and install a web server.\n\n### 5\\. Create security groups to allow specific traffic\n\nBefore we setup a new EC2 instance on the public subnet, we need to create a security group that allows internet traffic on port 80 and 22.\n\n[aws ec2 create-security-group](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-security-group.html)\n\n```shell\naws ec2 create-security-group --region us-east-1 --description \"Allow http access over the internet\" --group-name \"public-sg\" --vpc-id \"...\"\n```\n\nThis will create a security group, and nothing else. Save the `GroupId` from the json.\n\n```json\n{\n    \"GroupId\": \"sg-e1fb8c9a\"\n}\n```\n\n[aws ec2 authorize-security-group-ingress](https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html)\n\n```shell\naws ec2 authorize-security-group-ingress --region us-east-1 --group-id \"...\" --protocol \"tcp\" --port \"80\" --cidr \"0.0.0.0/0\"\naws ec2 authorize-security-group-ingress --region us-east-1 --group-id \"...\" --protocol \"tcp\" --port \"22\" --cidr \"0.0.0.0/0\"\n```\n\nThis will allow all network traffic on port 80 and 22 (HTTP and SSH) for the security group we just created.\n\n### 6\\. Create ec2 instances on the subnets\n\nTime to deploy an EC2 instance. If you already have an ssh keypair setup, you can just use that and skip the next step. If you haven’t, or if you want to setup a new ssh key for this instance, run the following command.\n\n[aws ec2 create-key-pair](https://docs.aws.amazon.com/cli/latest/reference/ec2/create-key-pair.html)\n\n```shell\naws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > ~/.ssh/MyKeyPair.pem\nchmod 400  ~/.ssh/MyKeyPair.pem\n```\n\nThis will generate a new keypair and store the private key on your machine at `~/.ssh/MyKeyPair.pem`\n\n[aws ec2 run-instances](https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html)\n\n```shell\n# ami-04d29b6f966df1537 = Amazon Linux 2\naws ec2 run-instances  \\\n--region us-east-1 \\\n--image-id \"ami-04d29b6f966df1537\" \\\n--count 1 \\\n--instance-type t2.micro  \\\n--subnet-id \"...\" \\\n--security-group-ids \"...\" \\\n--associate-public-ip-address \\\n--key-name \"...\" \\\n--user-data = \"\n#!/bin/bash -ex\n\namazon-linux-extras install nginx1\necho \\\"<h1>$(curl https://api.kanye.rest/?format=text)</h1>\\\" >  /usr/share/nginx/html/index.html \nsystemctl enable nginx\nsystemctl start nginx\n\"\n```\n\nThis sets up a new Amazon Linux 2 ec2 instance with nginx installed. The default home page will display a random Kanye West quote.\n\nYou’ll need the ids of the public subnet and security group, and the name of the keypair. Make sure you grab the `InstanceId` from the returned JSON.\n\n```json\n{\n    \"Instances\": [\n        {\n            ...\n            \"InstanceId\": \"i-1231231230abcdef0\",\n            ...\n        }\n    ]\n}\n```\n\nThe ec2 instance should be setup now. We will need to describe the instance to get all of the details including the public ip address.\n\n[aws ec2 describe-instances](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html)\n\n```shell\naws ec2 describe-instances --region us-east-1 --instance-ids \"...\"\n```\n\nFind the public ip address in the returned JSON `.Reservations[0].Instances[0].PublicIpAddress`. Wait a minute or two and you should be able to ssh on to the instance or navigate to the ip address in your web browser to see the Kanye West website.\n\n```shell\nssh ec2-user@public-ip -i \"~/.ssh/MyKeyPair.pem\"\n```\n\n## Script\n\nHere’s what everything looks like as a single bash script. If you run this script, it will perform all of those steps in one go.\n\nFor this to work, you’ll need to have `jq` installed. This will parse the JSON responses so each subsequent step can happen automatically.\n\n```shell\n#!/bin/bash \n\nvpc_cidr=\"10.0.0.0/16\"\nsubnet_cidr=\"10.0.1.0/24\"\nregion=\"us-east-1\"\naz=\"us-east-1a\"\nuser_data=\"$(cat <<-EOF\n#!/bin/bash -ex\n\namazon-linux-extras install nginx1\necho \"<h1>$(curl https://api.kanye.rest/?format=text)</h1>\" >  /usr/share/nginx/html/index.html \nsystemctl enable nginx\nsystemctl start nginx\nEOF\n)\"\n\n# Create a new VPC\nvpc_id=$(\n  aws ec2 create-vpc \\\n  --region $region \\\n  --cidr-block $vpc_cidr \\\n  | jq .Vpc.VpcId | tr -d '\"'\n)\necho \"VPC ID $vpc_id\"\n\n# Create a new subnet in that VPC\nsubnet_id=$(\n  aws ec2 create-subnet \\\n  --region $region \\\n  --cidr-block $subnet_cidr \\\n  --availability-zone $az \\\n  --vpc-id $vpc_id \\\n  | jq .Subnet.SubnetId | tr -d '\"'\n)\necho \"Subnet ID $subnet_id\"\n\n## Setup a Route Table for that subnet\nroute_table_id=$(\n  aws ec2 create-route-table \\\n  --region $region  \\\n  --vpc-id $vpc_id \\\n  | jq .RouteTable.RouteTableId | tr -d '\"'\n)\necho \"Route Table ID $route_table_id\"\n\naws ec2 associate-route-table \\\n--region $region  \\\n--route-table-id $route_table_id \\\n--subnet-id $subnet_id\n\n# Create an internet gateway for that Route Table\nig_id=$(\n  aws ec2 create-internet-gateway \\\n  --region $region \\\n  | jq .InternetGateway.InternetGatewayId | tr -d '\"'\n)\necho \"Internet Gateway ID $ig_id\"\n\naws ec2 attach-internet-gateway \\\n--region $region \\\n--internet-gateway-id $ig_id \\\n--vpc-id $vpc_id\n\naws ec2 create-route \\\n--region $region \\\n--route-table-id $route_table_id \\\n--destination-cidr-block \"0.0.0.0/0\" \\\n--gateway-id $ig_id\n\n# Create a security group that allows internet traffic on port 80 and 22\nsg_id=$(\n  aws ec2 create-security-group \\\n  --region $region \\\n  --description \"Allow http access over the internet\" \\\n  --group-name \"public-sg\" \\\n  --vpc-id $vpc_id \\\n  | jq .GroupId | tr -d '\"'\n)\necho \"Security Group ID $sg_id\"\n\naws ec2 authorize-security-group-ingress \\\n--region $region \\\n--group-id $sg_id \\\n--protocol \"tcp\" \\\n--port \"80\" \\\n--cidr \"0.0.0.0/0\"\n\naws ec2 authorize-security-group-ingress \\\n--region $region \\\n--group-id $sg_id \\\n--protocol \"tcp\" \\\n--port \"22\" \\\n--cidr \"0.0.0.0/0\"\n\n# Create a new EC2 instance on that subnet with that security group\n# ami-04d29b6f966df1537 = Amazon Linux 2\ninstance_id=$(\n  aws ec2 run-instances \\\n  --region $region \\\n  --image-id \"ami-04d29b6f966df1537\" \\\n  --count 1 \\\n  --instance-type t2.micro \\\n  --subnet-id $subnet_id \\\n  --security-group-ids $sg_id \\\n  --associate-public-ip-address \\\n  --key-name sam-bcit \\\n  --user-data \"$user_data\" \\\n  | jq \".Instances[0].InstanceId\" | tr -d '\"'\n)\necho \"Instance ID $instance_id\"\n\npublic_ip=$(\n  aws ec2 describe-instances \\\n  --region $region \\\n  --instance-ids $instance_id \\\n  | jq \".Reservations[0].Instances[0].PublicIpAddress\" | tr -d '\"'\n)\n\necho \"\n\nSuccess!!\n\nvpc_cidr: $vpc_cidr\nsubnet_cidr: $subnet_cidr\nregion: $region\naz: $az\nuser_data: $user_data\nvpc_id: $vpc_id\nsubnet_id: $subnet_id\nroute_table_id: $route_table_id\nig_id: $ig_id\nsg_id: $sg_id\ninstance_id: $instance_id\npublic_ip: $public_ip\nvpc_cidr: $vpc_cidr\nsubnet_cidr: $subnet_cidr\nregion: $region\naz: $az\n\nThe public ip address is:\n$public_ip\n\"\n```"
  },
  {
    "type": "article",
    "wp_id": 583,
    "title": "AWS CLI | Setup an S3 Static Website",
    "date": "2020-11-28T08:39:38",
    "slug": "aws-cli-s3-static-website",
    "image": {
      "name": "aws-cli-s3-static-website.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/aws-cli-s3-static-website/images/aws-cli-s3-static-website.png"
    },
    "status": "published",
    "description": "Let’s take a look at how to deploy a website to an S3 bucket using the aws cli.",
    "tags": [
      "aws"
    ],
    "dirPath": "content/articles/aws-cli-s3-static-website",
    "indexPath": "content/articles/aws-cli-s3-static-website/index.mdx",
    "imagesPath": "content/articles/aws-cli-s3-static-website/images",
    "hash": "9d4cf7a98de7ba720178c28814d642fe607edc41",
    "text": "Let’s take a look at how to deploy a website to an S3 bucket using the aws cli.\n\nIn this article, we will take a look at how to deploy a website to an S3 bucket using the aws cli.\n\n## AWS CLI\n\nThe AWS Command Line Interface (CLI) lets us manage all of our AWS services from the command line, without having to use the web console. So instead of clicking a bunch of buttons to create a new EC2 instance, you could just run a command like this:\n\n```shell\naws ec2 run-instances  --region $region --image-id \"ami-0d4504aaac331dc68\" --count 1 --instance-type t2.micro --associate-public-ip-address\n```\n\nIn this article, we will take a look at how to setup an S3 bucket to host a static website using the aws cli. Skip to the bottom of the article if you just want the script.\n\n## Setup\n\nIf you haven’t setup the AWS CLI already, you can do so using this link: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html\n\nThe reference for all of the commands used here is available at  \nhttps://docs.aws.amazon.com/cli/latest/reference/\n\n## S3 Static Website\n\nThe steps for hosting a static website using s3 are pretty much the following:\n\n1.  Create a new bucket with a unique name\n2.  Enable public access to the bucket\n3.  Update the bucket policy for public read access:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n          \"Sid\": \"PublicReadGetObject\",\n          \"Effect\": \"Allow\",\n          \"Principal\": \"*\",\n          \"Action\": \"s3:GetObject\",\n          \"Resource\": \"arn:aws:s3:::acit-3640-fall-2020-40126/*\"\n      }\n  ]\n}\n```\n\n4.  Enable the s3 bucket to host an `index` and `error` html page\n5.  Upload your website\n\nThese steps are covered using the aws console in my [S3 Buckets | Hosting a Static Site](https://www.youtube.com/watch?v=RoY3ekCCxKc&t=89s&ab_channel=SamMeech-Ward)\n\nBut that involves a lot of clicking on buttons and stuff, so here’s how to do it using the aws cli.\n\n### 1\\. Create a new bucket with a unique name\n\n```shell\naws s3 mb \"s3://your-bucket-name\" \n```\n\n`aws s3 mb` will create a new bucket. Make sure you change `your-bucket-name` to something better.\n\n### 2\\. Enable public access to the bucket\n\n```shell\naws s3api put-public-access-block \\\n    --bucket your-bucket-name \\\n    --public-access-block-configuration \"BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false\"\n```\n\n`aws s3api put-public-access-block` allows you to configure the public access to the bucket. We’re setting all of the blocks to false to enable public access.\n\n### 3\\. Update the bucket policy for public read access:\n\n```shell\naws s3api put-bucket-policy --bucket your-bucket-name --policy \"{\n  \\\"Version\\\": \\\"2012-10-17\\\",\n  \\\"Statement\\\": [\n      {\n          \\\"Sid\\\": \\\"PublicReadGetObject\\\",\n          \\\"Effect\\\": \\\"Allow\\\",\n          \\\"Principal\\\": \\\"*\\\",\n          \\\"Action\\\": \\\"s3:GetObject\\\",\n          \\\"Resource\\\": \\\"arn:aws:s3:::your-bucket-name/*\\\"\n      }\n  ]\n}\"\n```\n\n`aws s3api put-bucket-policy` allows us to specify a bucket policy which has to be written in JSON. This policy will allow anyone to get the objects ot of the bucket.\n\n### 4\\. Enable the s3 bucket to host an `index` and `error` html page\n\n```shell\naws s3 website \"s3://your-bucket-name\" --index-document index.html --error-document index.html\n```\n\n`aws s3 website` configures the bucket as a website. We have to include an index and an error page. We could specify a single page for both of these. This is usually what we want for a single page application.\n\n### 5\\. Upload your static website\n\n```shell\naws s3 sync directory-path \"s3://your-bucket-name/\" \n```\n\n`aws s3 sync` will update the buckets contents with that of the contents of the local directory.\n\nIf we want to just copy a single file, we can use `aws s3 cp`\n\n```shell\n# Copy a file to an s3 bucket\naws s3 cp path-to-file \"s3://your-bucket-name/filename\"\n\n# Copy a file from an s3 bucket\naws s3 cp \"s3://your-bucket-name/filename\" path-to-file\n```\n\n### `s3` vs `s3api`\n\n`s3api` gives you complete control of S3 buckets. `s3` gives you a higher level of abstraction for some of the more common operations you want to perform on an S3 bucket.\n\n## Single Script\n\nAs a single bash script, this code would look like this. There are a few more variables to make the region and profile easier to configure.\n\n```shell\n#!/bin/bash\n\nbucket_name='your-bucket-name'\nwebsite_directory='/path/to/website/'\n\nregion='us-east-1'\nprofile='default'\n\n# 1. Create a new bucket with a unique name\naws s3 mb \\\n  --profile $profile \\\n  --region $region \\\n  --region us-east-1 \"s3://$bucket_name\" \n\n# 2. Enable public access to the bucket\naws s3api put-public-access-block \\\n  --profile $profile \\\n  --region $region \\\n  --bucket $bucket_name \\\n  --public-access-block-configuration \"BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false\"\n\n# 3. Update the bucket policy for public read access:\naws s3api put-bucket-policy \\\n  --profile $profile \\\n  --region $region \\\n  --bucket $bucket_name \\\n  --policy \"{\n  \\\"Version\\\": \\\"2012-10-17\\\",\n  \\\"Statement\\\": [\n      {\n          \\\"Sid\\\": \\\"PublicReadGetObject\\\",\n          \\\"Effect\\\": \\\"Allow\\\",\n          \\\"Principal\\\": \\\"*\\\",\n          \\\"Action\\\": \\\"s3:GetObject\\\",\n          \\\"Resource\\\": \\\"arn:aws:s3:::$bucket_name/*\\\"\n      }\n  ]\n}\"\n\n# 4. Enable the s3 bucket to host an `index` and `error` html page\naws s3 website \"s3://$bucket_name\" \\\n  --profile $profile \\\n  --region $region \\\n  --index-document index.html \\\n  --error-document index.html\n\n# # 5. Upload you website\naws s3 sync \\\n  --profile $profile \\\n  --region $region \\\n  $website_directory \"s3://$bucket_name/\" \n```\n\nOnce the bucket is created, you only need to run the sync code to push new updates:\n\n```shell\n#!/bin/bash\n\nbucket_name='your-bucket-name'\nwebsite_directory='/path/to/website/'\n\nregion='us-east-1'\nprofile='default'\n\n\naws s3 sync \\\n  --profile $profile \\\n  --region $region \\\n  $website_directory \"s3://$bucket_name/\" \n```\n\nAnd if you ever want to completely destroy the bucket:\n\n```shell\n#!/bin/bash\n\nbucket_name='your-bucket-name'\nwebsite_directory='/path/to/website/'\n\nregion='us-east-1'\nprofile='default'\n\n\naws s3 rm \\\n  --profile $profile \\\n  --region $region \\\n  --recursive s3://$bucket_name\n  \naws s3api delete-bucket \\\n  --profile $profile \\\n  --region $region \\\n  --bucket $bucket_name\n```"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjlKSXlweFJzdVJB",
    "videoId": "9JIypxRsuRA",
    "title": "Fetch Requests | Core Data #4",
    "date": "2020-11-08T18:46:40Z",
    "slug": "fetch-requests-core-data-4",
    "image": {
      "name": "fetch-requests-core-data-4.jpg",
      "alt": "Fetch Requests | Core Data #4",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/fetch-requests-core-data-4/images/fetch-requests-core-data-4.jpg"
    },
    "status": "published",
    "description": "Learn how to create fetch requests to query objects from Core Data.",
    "tags": [],
    "dirPath": "content/videos/videos/fetch-requests-core-data-4",
    "indexPath": "content/videos/videos/fetch-requests-core-data-4/index.mdx",
    "imagesPath": "content/videos/videos/fetch-requests-core-data-4/images",
    "hash": "609ef3f9d0b964fdd8795a34ffa614528673e736",
    "text": "Learn how to create fetch requests to query objects from Core Data.\n\nYou can download the starter budget app here: [https://github.com/Sam-Meech-Ward/CoreDataBudget](https://github.com/Sam-Meech-Ward/CoreDataBudget)\n\n🔗Previous Video\nRelationships [https://youtu.be/2ceZt-HKrOc](https://youtu.be/2ceZt-HKrOc)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjJjZVp0LUhLck9j",
    "videoId": "2ceZt-HKrOc",
    "title": "Relationships | Core Data #3",
    "date": "2020-11-08T18:44:04Z",
    "slug": "relationships-core-data-3",
    "image": {
      "name": "relationships-core-data-3.jpg",
      "alt": "Relationships | Core Data #3",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/relationships-core-data-3/images/relationships-core-data-3.jpg"
    },
    "status": "published",
    "description": "Learn how to create different relationships between different entities using Core Data.",
    "tags": [],
    "dirPath": "content/videos/videos/relationships-core-data-3",
    "indexPath": "content/videos/videos/relationships-core-data-3/index.mdx",
    "imagesPath": "content/videos/videos/relationships-core-data-3/images",
    "hash": "eb34076d16aa73c1a56332c891b6799e22f9b052",
    "text": "Learn how to create different relationships between different entities using Core Data.\n\nYou can download the starter budget app here: [https://github.com/Sam-Meech-Ward/CoreDataBudget](https://github.com/Sam-Meech-Ward/CoreDataBudget)\n\n🔗Previous Video\nSaving Entities [https://youtu.be/kp0rxJCIvdU](https://youtu.be/kp0rxJCIvdU)\n\n🔗Next Video\nFetch Requests [https://youtu.be/9JIypxRsuRA](https://youtu.be/9JIypxRsuRA)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmtwMHJ4SkNJdmRV",
    "videoId": "kp0rxJCIvdU",
    "title": "Saving Entities | Core Data #2",
    "date": "2020-11-08T18:39:09Z",
    "slug": "saving-entities-core-data-2",
    "image": {
      "name": "saving-entities-core-data-2.jpg",
      "alt": "Saving Entities | Core Data #2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/saving-entities-core-data-2/images/saving-entities-core-data-2.jpg"
    },
    "status": "published",
    "description": "Learn how to add core data to an existing project and save entities.",
    "tags": [],
    "dirPath": "content/videos/videos/saving-entities-core-data-2",
    "indexPath": "content/videos/videos/saving-entities-core-data-2/index.mdx",
    "imagesPath": "content/videos/videos/saving-entities-core-data-2/images",
    "hash": "6695be1da9a53d00ce0f2a07a2a81dd0217b06d0",
    "text": "Learn how to add core data to an existing project and save entities.\n\nYou can download the starter budget app here: [https://github.com/Sam-Meech-Ward/CoreDataBudget](https://github.com/Sam-Meech-Ward/CoreDataBudget)\n\n🔗Previous Video\nWhat is Core Data? [https://youtu.be/ZwBIBzs3tuc](https://youtu.be/ZwBIBzs3tuc)\n\n🔗Next Video\nRelationships [https://youtu.be/2ceZt-HKrOc](https://youtu.be/2ceZt-HKrOc)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlp3QklCenMzdHVj",
    "videoId": "ZwBIBzs3tuc",
    "title": "What is Core Data? | Core Data #1",
    "date": "2020-11-08T18:28:44Z",
    "slug": "what-is-core-data-core-data-1",
    "image": {
      "name": "what-is-core-data-core-data-1.jpg",
      "alt": "What is Core Data? | Core Data #1",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/what-is-core-data-core-data-1/images/what-is-core-data-core-data-1.jpg"
    },
    "status": "published",
    "description": "Learn about what Core Data is and how to use it to persist data in an iOS application.",
    "tags": [],
    "dirPath": "content/videos/videos/what-is-core-data-core-data-1",
    "indexPath": "content/videos/videos/what-is-core-data-core-data-1/index.mdx",
    "imagesPath": "content/videos/videos/what-is-core-data-core-data-1/images",
    "hash": "0b320b8d816f913ddc466f97cc15e7c82de4aea8",
    "text": "Learn about what Core Data is and how to use it to persist data in an iOS application.\n\n🔗Next Video\nSaving Entities [https://youtu.be/kp0rxJCIvdU](https://youtu.be/kp0rxJCIvdU)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkI0eUo4NUlhVFV3",
    "videoId": "B4yJ85IaTUw",
    "title": "TDD and Unit Testing in iOS | Part 1 Stateless Objects",
    "date": "2020-11-02T18:53:42Z",
    "slug": "tdd-and-unit-testing-in-ios-part-1-stateless-objects",
    "image": {
      "name": "tdd-and-unit-testing-in-ios-part-1-stateless-objects.jpg",
      "alt": "TDD and Unit Testing in iOS | Part 1 Stateless Objects",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/tdd-and-unit-testing-in-ios-part-1-stateless-objects/images/tdd-and-unit-testing-in-ios-part-1-stateless-objects.jpg"
    },
    "status": "published",
    "description": "Learn how to use the XCTest framework to write unit tests for stateless objects.",
    "tags": [],
    "dirPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-1-stateless-objects",
    "indexPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-1-stateless-objects/index.mdx",
    "imagesPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-1-stateless-objects/images",
    "hash": "c1fc2bd8717276507686527ce122991d386c6e38",
    "text": "Learn how to use the XCTest framework to write unit tests for stateless objects.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/ios-testing-weekly-budget/](https://github.com/Sam-Meech-Ward/ios-testing-weekly-budget/)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLjBUR1FwWmlBb0tV",
    "videoId": "0TGQpZiAoKU",
    "title": "TDD and Unit Testing in iOS | Part 2 Stateful Objects",
    "date": "2020-11-02T18:53:24Z",
    "slug": "tdd-and-unit-testing-in-ios-part-2-stateful-objects",
    "image": {
      "name": "tdd-and-unit-testing-in-ios-part-2-stateful-objects.jpg",
      "alt": "TDD and Unit Testing in iOS | Part 2 Stateful Objects",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/tdd-and-unit-testing-in-ios-part-2-stateful-objects/images/tdd-and-unit-testing-in-ios-part-2-stateful-objects.jpg"
    },
    "status": "published",
    "description": "Learn how to use the XCTest framework to write unit tests for stateful objects.",
    "tags": [],
    "dirPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-2-stateful-objects",
    "indexPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-2-stateful-objects/index.mdx",
    "imagesPath": "content/videos/videos/tdd-and-unit-testing-in-ios-part-2-stateful-objects/images",
    "hash": "6ee9a040e1df3df97cc01aa16e8fc2dd0f665f6f",
    "text": "Learn how to use the XCTest framework to write unit tests for stateful objects.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/ios-testing-weekly-budget/tree/viewcontroller](https://github.com/Sam-Meech-Ward/ios-testing-weekly-budget/tree/viewcontroller)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmRORDlpTk16ZUtz",
    "videoId": "dND9iNMzeKs",
    "title": "Downloading & Caching Images in iOS with Swift",
    "date": "2020-10-29T06:33:28Z",
    "slug": "downloading-&-caching-images-in-ios-with-swift",
    "image": {
      "name": "downloading-&-caching-images-in-ios-with-swift.jpg",
      "alt": "Downloading & Caching Images in iOS with Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/downloading-&-caching-images-in-ios-with-swift/images/downloading-&-caching-images-in-ios-with-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use URLSession to download images into a UICollectionView. Then cache those images using an NSCache",
    "tags": [],
    "dirPath": "content/videos/videos/downloading-&-caching-images-in-ios-with-swift",
    "indexPath": "content/videos/videos/downloading-&-caching-images-in-ios-with-swift/index.mdx",
    "imagesPath": "content/videos/videos/downloading-&-caching-images-in-ios-with-swift/images",
    "hash": "48125f2951ea9380839f2daabff2e42e358b5951",
    "text": "Learn how to use URLSession to download images into a UICollectionView. Then cache those images using an NSCache\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/iOS-image-download](https://github.com/Sam-Meech-Ward/iOS-image-download)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnp2ZlZpWW1FVHVj",
    "videoId": "zvfViYmETuc",
    "title": "Networking in iOS with URLSession | JSON and Image data",
    "date": "2020-10-25T16:57:04Z",
    "slug": "networking-in-ios-with-urlsession-json-and-image-data",
    "image": {
      "name": "networking-in-ios-with-urlsession-json-and-image-data.jpg",
      "alt": "Networking in iOS with URLSession | JSON and Image data",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/networking-in-ios-with-urlsession-json-and-image-data/images/networking-in-ios-with-urlsession-json-and-image-data.jpg"
    },
    "status": "published",
    "description": "Learn how to use URLSession to perform HTTP requests in an iOS App",
    "tags": [],
    "dirPath": "content/videos/videos/networking-in-ios-with-urlsession-json-and-image-data",
    "indexPath": "content/videos/videos/networking-in-ios-with-urlsession-json-and-image-data/index.mdx",
    "imagesPath": "content/videos/videos/networking-in-ios-with-urlsession-json-and-image-data/images",
    "hash": "1925d5a177a6d2a695c31a633a7a66f517d205ff",
    "text": "Learn how to use URLSession to perform HTTP requests in an iOS App\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/ios-basic-networking-kanye.rest](https://github.com/Sam-Meech-Ward/ios-basic-networking-kanye.rest)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkM4eUJ5T2g4LTZV",
    "videoId": "C8yByOh8-6U",
    "title": "Multithreading & Async in iOS | A Basic Introduction",
    "date": "2020-10-25T16:47:12Z",
    "slug": "multithreading-&-async-in-ios-a-basic-introduction",
    "image": {
      "name": "multithreading-&-async-in-ios-a-basic-introduction.jpg",
      "alt": "Multithreading & Async in iOS | A Basic Introduction",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/multithreading-&-async-in-ios-a-basic-introduction/images/multithreading-&-async-in-ios-a-basic-introduction.jpg"
    },
    "status": "published",
    "description": "Learn how to use dispatch queues to perform tasks on a background queue in iOS with Swift.",
    "tags": [],
    "dirPath": "content/videos/videos/multithreading-&-async-in-ios-a-basic-introduction",
    "indexPath": "content/videos/videos/multithreading-&-async-in-ios-a-basic-introduction/index.mdx",
    "imagesPath": "content/videos/videos/multithreading-&-async-in-ios-a-basic-introduction/images",
    "hash": "ac8743b9522d2ea4164f5a1340f955a1392116ac",
    "text": "Learn how to use dispatch queues to perform tasks on a background queue in iOS with Swift.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/iOS-Basic-Multithreading-Example](https://github.com/Sam-Meech-Ward/iOS-Basic-Multithreading-Example)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmNXZkc3OU5hT3Y0",
    "videoId": "cWfG79NaOv4",
    "title": "UICollectionViews in iOS with Compositional Layout",
    "date": "2020-10-11T17:50:33Z",
    "slug": "uicollectionviews-in-ios-with-compositional-layout",
    "image": {
      "name": "uicollectionviews-in-ios-with-compositional-layout.jpg",
      "alt": "UICollectionViews in iOS with Compositional Layout",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/uicollectionviews-in-ios-with-compositional-layout/images/uicollectionviews-in-ios-with-compositional-layout.jpg"
    },
    "status": "published",
    "description": "Learn how to use UICollectionViews in an iOS app.",
    "tags": [],
    "dirPath": "content/videos/videos/uicollectionviews-in-ios-with-compositional-layout",
    "indexPath": "content/videos/videos/uicollectionviews-in-ios-with-compositional-layout/index.mdx",
    "imagesPath": "content/videos/videos/uicollectionviews-in-ios-with-compositional-layout/images",
    "hash": "135a3f723293799c981cb335a8b6d7fb57cfbbd8",
    "text": "Learn how to use UICollectionViews in an iOS app.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/Collection-View-With-Compositional-Layout](https://github.com/Sam-Meech-Ward/Collection-View-With-Compositional-Layout)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLld1U2VzYVpjYU1R",
    "videoId": "WuSesaZcaMQ",
    "title": "UIViewControllers in iOS and Swift",
    "date": "2020-10-10T01:10:48Z",
    "slug": "uiviewcontrollers-in-ios-and-swift",
    "image": {
      "name": "uiviewcontrollers-in-ios-and-swift.jpg",
      "alt": "UIViewControllers in iOS and Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/uiviewcontrollers-in-ios-and-swift/images/uiviewcontrollers-in-ios-and-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use the UIViewControllers to make a multi-screen app for iOS.",
    "tags": [],
    "dirPath": "content/videos/videos/uiviewcontrollers-in-ios-and-swift",
    "indexPath": "content/videos/videos/uiviewcontrollers-in-ios-and-swift/index.mdx",
    "imagesPath": "content/videos/videos/uiviewcontrollers-in-ios-and-swift/images",
    "hash": "e26dd96af87a9a36e6ac20fdb10ec4a69439d1c5",
    "text": "Learn how to use the UIViewControllers to make a multi-screen app for iOS.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmNoajJjZVpsNTFz",
    "videoId": "chj2ceZl51s",
    "title": "Custom UIViews and UIControls | iOS Swift Checkbox",
    "date": "2020-10-08T18:19:17Z",
    "slug": "custom-uiviews-and-uicontrols-ios-swift-checkbox",
    "image": {
      "name": "custom-uiviews-and-uicontrols-ios-swift-checkbox.jpg",
      "alt": "Custom UIViews and UIControls | iOS Swift Checkbox",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/custom-uiviews-and-uicontrols-ios-swift-checkbox/images/custom-uiviews-and-uicontrols-ios-swift-checkbox.jpg"
    },
    "status": "published",
    "description": "Learn how to make custom UIViews and UIControls in iOS",
    "tags": [],
    "dirPath": "content/videos/videos/custom-uiviews-and-uicontrols-ios-swift-checkbox",
    "indexPath": "content/videos/videos/custom-uiviews-and-uicontrols-ios-swift-checkbox/index.mdx",
    "imagesPath": "content/videos/videos/custom-uiviews-and-uicontrols-ios-swift-checkbox/images",
    "hash": "e0718e1eb9cf522245ae2758fb704011a0e97dd4",
    "text": "Learn how to make custom UIViews and UIControls in iOS\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/UIControl-Checkbox](https://github.com/Sam-Meech-Ward/UIControl-Checkbox)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnByampueFhCa3Bv",
    "videoId": "prjjnxXBkpo",
    "title": "UITableViews | Making an iOS Todo List App with Swift",
    "date": "2020-10-08T18:18:10Z",
    "slug": "uitableviews-making-an-ios-todo-list-app-with-swift",
    "image": {
      "name": "uitableviews-making-an-ios-todo-list-app-with-swift.jpg",
      "alt": "UITableViews | Making an iOS Todo List App with Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/uitableviews-making-an-ios-todo-list-app-with-swift/images/uitableviews-making-an-ios-todo-list-app-with-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use UITableViews to make a todo list app for iOS",
    "tags": [],
    "dirPath": "content/videos/videos/uitableviews-making-an-ios-todo-list-app-with-swift",
    "indexPath": "content/videos/videos/uitableviews-making-an-ios-todo-list-app-with-swift/index.mdx",
    "imagesPath": "content/videos/videos/uitableviews-making-an-ios-todo-list-app-with-swift/images",
    "hash": "fee32d89bdf625334f5b8ce3b9e810d10f98cbbd",
    "text": "Learn how to use UITableViews to make a todo list app for iOS\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/iOS-Todo-List](https://github.com/Sam-Meech-Ward/iOS-Todo-List)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlJvWTNla0NDeEtj",
    "videoId": "RoY3ekCCxKc",
    "title": "S3 Bucket Hosting a Static Website",
    "date": "2020-09-13T16:00:06Z",
    "slug": "s3-bucket-hosting-a-static-website",
    "image": {
      "name": "s3-bucket-hosting-a-static-website.jpg",
      "alt": "S3 Bucket Hosting a Static Website",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/s3-bucket-hosting-a-static-website/images/s3-bucket-hosting-a-static-website.jpg"
    },
    "status": "published",
    "description": "Learn how to set up an s3 bucket and use it to host static assets and a website. You could use this for anything from a simple landing page, to a fully featured react app.",
    "tags": [],
    "dirPath": "content/videos/videos/s3-bucket-hosting-a-static-website",
    "indexPath": "content/videos/videos/s3-bucket-hosting-a-static-website/index.mdx",
    "imagesPath": "content/videos/videos/s3-bucket-hosting-a-static-website/images",
    "hash": "294f458dce3b01ba9bbad95631da005a18a153ff",
    "text": "Learn how to set up an s3 bucket and use it to host static assets and a website. You could use this for anything from a simple landing page, to a fully featured react app.\n\n🔗  Using the AWS CLI:\n[https://sammeechward.com/aws-cli-s3-static-website/](https://sammeechward.com/aws-cli-s3-static-website/)\n\n\n🔗 Moar Links\nMy Website: [https://www.sammeechward.com](https://www.sammeechward.com)\nInstagram: [https://www.instagram.com/meech_ward](https://www.instagram.com/meech_ward)\nGithub: [https://github.com/orgs/Sam-Meech-Ward](https://github.com/orgs/Sam-Meech-Ward)\nTikTok: https://www.tiktok.com/@meech.s.ward"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkdFVmJZUVdXSmtR",
    "videoId": "GEVbYQWWJkQ",
    "title": "Setting Up And Deploying AWS EC2 Instances",
    "date": "2020-09-13T16:00:02Z",
    "slug": "setting-up-and-deploying-aws-ec2-instances",
    "image": {
      "name": "setting-up-and-deploying-aws-ec2-instances.jpg",
      "alt": "Setting Up And Deploying AWS EC2 Instances",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/setting-up-and-deploying-aws-ec2-instances/images/setting-up-and-deploying-aws-ec2-instances.jpg"
    },
    "status": "published",
    "description": "EC2 or elastic compute cloud is part of amazon's infrastructure as a service for us to rent virtual machines in the cloud. we can run a VM on amazon's servers to run any of our own applications.",
    "tags": [],
    "dirPath": "content/videos/videos/setting-up-and-deploying-aws-ec2-instances",
    "indexPath": "content/videos/videos/setting-up-and-deploying-aws-ec2-instances/index.mdx",
    "imagesPath": "content/videos/videos/setting-up-and-deploying-aws-ec2-instances/images",
    "hash": "5fd7dd1a29eac8a59f520676087c3f17057d4438",
    "text": "EC2 or elastic compute cloud is part of amazon's infrastructure as a service for us to rent virtual machines in the cloud. we can run a VM on amazon's servers to run any of our own applications.\n\nIn this video, I'm going to show you how to set up an ec2 instance on AWS and use it as an HTTP server.\n\n🔗 My Links\nMy Website: [https://www.sammeechward.com](https://www.sammeechward.com)\nInstagram: [https://www.instagram.com/meech_ward](https://www.instagram.com/meech_ward)\nGithub: [https://github.com/orgs/Sam-Meech-Ward](https://github.com/orgs/Sam-Meech-Ward)\nTikTok: https://www.tiktok.com/@meech.s.ward"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnc2T3NJQ2JuSmJB",
    "videoId": "w6OsICbnJbA",
    "title": "SSH Keys | Adding an SSH key to a Raspberry Pi",
    "date": "2020-07-29T15:00:13Z",
    "slug": "ssh-keys-adding-an-ssh-key-to-a-raspberry-pi",
    "image": {
      "name": "ssh-keys-adding-an-ssh-key-to-a-raspberry-pi.jpg",
      "alt": "SSH Keys | Adding an SSH key to a Raspberry Pi",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/ssh-keys-adding-an-ssh-key-to-a-raspberry-pi/images/ssh-keys-adding-an-ssh-key-to-a-raspberry-pi.jpg"
    },
    "status": "published",
    "description": "In this lesson, we're going to create an SSH key so that we don't have to enter our password every time we want to transfer code or control the pi.",
    "tags": [],
    "dirPath": "content/videos/videos/ssh-keys-adding-an-ssh-key-to-a-raspberry-pi",
    "indexPath": "content/videos/videos/ssh-keys-adding-an-ssh-key-to-a-raspberry-pi/index.mdx",
    "imagesPath": "content/videos/videos/ssh-keys-adding-an-ssh-key-to-a-raspberry-pi/images",
    "hash": "0ffd031c65ad1f9e24fd627791d030a5681d64b5",
    "text": "In this lesson, we're going to create an SSH key so that we don't have to enter our password every time we want to transfer code or control the pi.\n\nThis is the sixth in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\n🔗Entire Series\n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk5tXzh1NDR6Q2x3",
    "videoId": "Nm_8u44zClw",
    "title": "Transfer Code to a Raspberry Pi Using rsync",
    "date": "2020-07-25T23:50:38Z",
    "slug": "transfer-code-to-a-raspberry-pi-using-rsync",
    "image": {
      "name": "transfer-code-to-a-raspberry-pi-using-rsync.jpg",
      "alt": "Transfer Code to a Raspberry Pi Using rsync",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/transfer-code-to-a-raspberry-pi-using-rsync/images/transfer-code-to-a-raspberry-pi-using-rsync.jpg"
    },
    "status": "published",
    "description": "Writing code directly on a raspberry pi is not ideal. It doesn't have our favorite text editor or git installed, and it can be a little bit slow for testing. ",
    "tags": [],
    "dirPath": "content/videos/videos/transfer-code-to-a-raspberry-pi-using-rsync",
    "indexPath": "content/videos/videos/transfer-code-to-a-raspberry-pi-using-rsync/index.mdx",
    "imagesPath": "content/videos/videos/transfer-code-to-a-raspberry-pi-using-rsync/images",
    "hash": "e60ab640a727f98b703665512eca333888d7d061",
    "text": "Writing code directly on a raspberry pi is not ideal. It doesn't have our favorite text editor or git installed, and it can be a little bit slow for testing. \n\nIn this video, we're going to learn how to transfer the code we write on our computer, over to the pi, using a tool called rsync.\n\nThis is the fifth in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\n🔗Entire Series\n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlhlNlNfYzVBcElj",
    "videoId": "Xe6S_c5ApIc",
    "title": "Auto Layout Constraints in iOS",
    "date": "2020-07-24T15:00:09Z",
    "slug": "auto-layout-constraints-in-ios",
    "image": {
      "name": "auto-layout-constraints-in-ios.jpg",
      "alt": "Auto Layout Constraints in iOS",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/auto-layout-constraints-in-ios/images/auto-layout-constraints-in-ios.jpg"
    },
    "status": "published",
    "description": "Learn how to use Auto Layout to layout elements in UIKit on an iOS device.",
    "tags": [],
    "dirPath": "content/videos/videos/auto-layout-constraints-in-ios",
    "indexPath": "content/videos/videos/auto-layout-constraints-in-ios/index.mdx",
    "imagesPath": "content/videos/videos/auto-layout-constraints-in-ios/images",
    "hash": "459747d48e2adc75de3a7f673e2b1b4e296d06d9",
    "text": "Learn how to use Auto Layout to layout elements in UIKit on an iOS device.\n\n🔗Code:\n[https://github.com/Sam-Meech-Ward/iOS-auto-layout-basics](https://github.com/Sam-Meech-Ward/iOS-auto-layout-basics)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlZNMWNYcWJfMVYw",
    "videoId": "VM1cXqb_1V0",
    "title": "Touches and Gestures in iOS with Swift",
    "date": "2020-07-23T21:05:14Z",
    "slug": "touches-and-gestures-in-ios-with-swift",
    "image": {
      "name": "touches-and-gestures-in-ios-with-swift.jpg",
      "alt": "Touches and Gestures in iOS with Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/touches-and-gestures-in-ios-with-swift/images/touches-and-gestures-in-ios-with-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use UIGestureRecognizers to handle user input on an iOS device.",
    "tags": [],
    "dirPath": "content/videos/videos/touches-and-gestures-in-ios-with-swift",
    "indexPath": "content/videos/videos/touches-and-gestures-in-ios-with-swift/index.mdx",
    "imagesPath": "content/videos/videos/touches-and-gestures-in-ios-with-swift/images",
    "hash": "b6daedeb0c39991984d1ed3679d9fb2b45e2766a",
    "text": "Learn how to use UIGestureRecognizers to handle user input on an iOS device.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlFjMjlaR3Rxa2Ew",
    "videoId": "Qc29ZGtqka0",
    "title": "Intro to UIControls | iOS and Swift",
    "date": "2020-07-16T16:00:09Z",
    "slug": "intro-to-uicontrols-ios-and-swift",
    "image": {
      "name": "intro-to-uicontrols-ios-and-swift.jpg",
      "alt": "Intro to UIControls | iOS and Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-uicontrols-ios-and-swift/images/intro-to-uicontrols-ios-and-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to use UIControls like buttons and switches to detect user interactions in UIKit. ",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-uicontrols-ios-and-swift",
    "indexPath": "content/videos/videos/intro-to-uicontrols-ios-and-swift/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-uicontrols-ios-and-swift/images",
    "hash": "20e33668fb6f25a49d9ad9df91daaf60611615c1",
    "text": "Learn how to use UIControls like buttons and switches to detect user interactions in UIKit. \n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnc1OG5jVEhLaUs0",
    "videoId": "w58ncTHKiK4",
    "title": "Intro to UIKit and UIViews | iOS and Swift",
    "date": "2020-07-08T19:38:46Z",
    "slug": "intro-to-uikit-and-uiviews-ios-and-swift",
    "image": {
      "name": "intro-to-uikit-and-uiviews-ios-and-swift.jpg",
      "alt": "Intro to UIKit and UIViews | iOS and Swift",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/intro-to-uikit-and-uiviews-ios-and-swift/images/intro-to-uikit-and-uiviews-ios-and-swift.jpg"
    },
    "status": "published",
    "description": "Learn how to build your iOS UI using UIKit.",
    "tags": [],
    "dirPath": "content/videos/videos/intro-to-uikit-and-uiviews-ios-and-swift",
    "indexPath": "content/videos/videos/intro-to-uikit-and-uiviews-ios-and-swift/index.mdx",
    "imagesPath": "content/videos/videos/intro-to-uikit-and-uiviews-ios-and-swift/images",
    "hash": "b1352e34a345ceb1068fd8249513fb46dae4d032",
    "text": "Learn how to build your iOS UI using UIKit.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfUIRSuiVFZmuMGeSUYkNzh)\n\n🔗Frame vs Bounds\n[https://www.youtube.com/watch?v=Bw8BblNmMzw](https://www.youtube.com/watch?v=Bw8BblNmMzw)\n\n🔗Core Graphics\n[https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_overview/dq_overview.html](https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_overview/dq_overview.html)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLktrbmdFdGR3R1RZ",
    "videoId": "KkngEtdwGTY",
    "title": "Protocols and Polymorphism in Swift | Protocol Oriented Programming",
    "date": "2020-07-03T17:56:23Z",
    "slug": "protocols-and-polymorphism-in-swift-protocol-oriented-programming",
    "image": {
      "name": "protocols-and-polymorphism-in-swift-protocol-oriented-programming.jpg",
      "alt": "Protocols and Polymorphism in Swift | Protocol Oriented Programming",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/protocols-and-polymorphism-in-swift-protocol-oriented-programming/images/protocols-and-polymorphism-in-swift-protocol-oriented-programming.jpg"
    },
    "status": "published",
    "description": "How do we achieve polymorphism in Swift? And why do we prefer Protocols over superclasses?",
    "tags": [],
    "dirPath": "content/videos/videos/protocols-and-polymorphism-in-swift-protocol-oriented-programming",
    "indexPath": "content/videos/videos/protocols-and-polymorphism-in-swift-protocol-oriented-programming/index.mdx",
    "imagesPath": "content/videos/videos/protocols-and-polymorphism-in-swift-protocol-oriented-programming/images",
    "hash": "6b7f72f48a3897984bfb5c16de7c8f6b548c6063",
    "text": "How do we achieve polymorphism in Swift? And why do we prefer Protocols over superclasses?\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk5xX1FfQVF5b1M4",
    "videoId": "Nq_Q_AQyoS8",
    "title": "Swift Optionals Explained",
    "date": "2020-07-03T17:45:01Z",
    "slug": "swift-optionals-explained",
    "image": {
      "name": "swift-optionals-explained.jpg",
      "alt": "Swift Optionals Explained",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/swift-optionals-explained/images/swift-optionals-explained.jpg"
    },
    "status": "published",
    "description": "How do optionals work in the Swift Programming language?",
    "tags": [],
    "dirPath": "content/videos/videos/swift-optionals-explained",
    "indexPath": "content/videos/videos/swift-optionals-explained/index.mdx",
    "imagesPath": "content/videos/videos/swift-optionals-explained/images",
    "hash": "c1767481df0beabd0179a7494a0539ed8e87c5ff",
    "text": "How do optionals work in the Swift Programming language?\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk0yUm81d0V1WTJv",
    "videoId": "M2Ro5wEuY2o",
    "title": "Fast Introduction to The Swift Programming Language",
    "date": "2020-07-03T17:45:00Z",
    "slug": "fast-introduction-to-the-swift-programming-language",
    "image": {
      "name": "fast-introduction-to-the-swift-programming-language.jpg",
      "alt": "Fast Introduction to The Swift Programming Language",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/fast-introduction-to-the-swift-programming-language/images/fast-introduction-to-the-swift-programming-language.jpg"
    },
    "status": "published",
    "description": "In this video, I'm going to show you the basics of the Swift programming language. This is a fast-paced video that assumes you already have experience with other programming languages.",
    "tags": [],
    "dirPath": "content/videos/videos/fast-introduction-to-the-swift-programming-language",
    "indexPath": "content/videos/videos/fast-introduction-to-the-swift-programming-language/index.mdx",
    "imagesPath": "content/videos/videos/fast-introduction-to-the-swift-programming-language/images",
    "hash": "7c673dc11fc62ec56995738a3c55867004a447d1",
    "text": "In this video, I'm going to show you the basics of the Swift programming language. This is a fast-paced video that assumes you already have experience with other programming languages.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmpnSC1VZUhhRDFn",
    "videoId": "jgH-UeHaD1g",
    "title": "Swift Classes and Structs | Value and Reference Types",
    "date": "2020-07-03T17:45:00Z",
    "slug": "swift-classes-and-structs-value-and-reference-types",
    "image": {
      "name": "swift-classes-and-structs-value-and-reference-types.jpg",
      "alt": "Swift Classes and Structs | Value and Reference Types",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/swift-classes-and-structs-value-and-reference-types/images/swift-classes-and-structs-value-and-reference-types.jpg"
    },
    "status": "published",
    "description": "How to use classes and structs in the swift programming language.",
    "tags": [],
    "dirPath": "content/videos/videos/swift-classes-and-structs-value-and-reference-types",
    "indexPath": "content/videos/videos/swift-classes-and-structs-value-and-reference-types/index.mdx",
    "imagesPath": "content/videos/videos/swift-classes-and-structs-value-and-reference-types/images",
    "hash": "42942c32c015d9a68a5bbce731c41991390be465",
    "text": "How to use classes and structs in the swift programming language.\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkJOWXJBVE9UNGlj",
    "videoId": "BNYrATOT4ic",
    "title": "iOS Storyboard Merge Conflicts",
    "date": "2020-06-18T01:18:02Z",
    "slug": "ios-storyboard-merge-conflicts",
    "image": {
      "name": "ios-storyboard-merge-conflicts.jpg",
      "alt": "iOS Storyboard Merge Conflicts",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/ios-storyboard-merge-conflicts/images/ios-storyboard-merge-conflicts.jpg"
    },
    "status": "published",
    "description": "Learn how ow to create, resolve, and avoid merge conflicts in storyboards in an iOS app.",
    "tags": [],
    "dirPath": "content/videos/videos/ios-storyboard-merge-conflicts",
    "indexPath": "content/videos/videos/ios-storyboard-merge-conflicts/index.mdx",
    "imagesPath": "content/videos/videos/ios-storyboard-merge-conflicts/images",
    "hash": "efcf3a42c075c1b0b832b6a1a739bb852be98ab0",
    "text": "Learn how ow to create, resolve, and avoid merge conflicts in storyboards in an iOS app."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmZWN1prWUlfZWZ3",
    "videoId": "fV7ZkYI_efw",
    "title": "Beginning iOS Development for Not Beginners",
    "date": "2020-06-06T23:15:56Z",
    "slug": "beginning-ios-development-for-not-beginners",
    "image": {
      "name": "beginning-ios-development-for-not-beginners.jpg",
      "alt": "Beginning iOS Development for Not Beginners",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/beginning-ios-development-for-not-beginners/images/beginning-ios-development-for-not-beginners.jpg"
    },
    "status": "published",
    "description": "In this video, I'm going to show you how to get started making iOS apps by building a basic Rock, Paper, Scissors game.",
    "tags": [],
    "dirPath": "content/videos/videos/beginning-ios-development-for-not-beginners",
    "indexPath": "content/videos/videos/beginning-ios-development-for-not-beginners/index.mdx",
    "imagesPath": "content/videos/videos/beginning-ios-development-for-not-beginners/images",
    "hash": "f9643af8180d74b7c5717ee877803ecb583771f0",
    "text": "In this video, I'm going to show you how to get started making iOS apps by building a basic Rock, Paper, Scissors game.\n\nWe will be writing a little bit of Swift, so to get the most out of this video, you should be familiar with some sort of programming language. You don't have to know Swift, but you should know what things like functions and classes are. \n\n🔗RPS Code\n[https://github.com/Sam-Meech-Ward/RPS_iOS](https://github.com/Sam-Meech-Ward/RPS_iOS)\n\n🔗Entire iOS Playlist \n[https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ](https://www.youtube.com/playlist?list=PL0X6fGhFFNTdT5W3b8kh2DQH4OgKAIewZ)"
  },
  {
    "type": "article",
    "wp_id": 502,
    "title": "Concurrency Control",
    "date": "2020-03-30T05:05:35",
    "slug": "concurrency-control",
    "image": {
      "name": "concurrency-control.png",
      "width": 2048,
      "height": 512,
      "url": "content/articles/concurrency-control/images/concurrency-control.png"
    },
    "status": "published",
    "description": "In this post, we will take a high-level look at how computers execute tasks in parallel and some of the solutions we have for concurrency control.",
    "tags": [
      "concurrency",
      "multithreading",
      "mvcc",
      "parallelism"
    ],
    "dirPath": "content/articles/concurrency-control",
    "indexPath": "content/articles/concurrency-control/index.mdx",
    "imagesPath": "content/articles/concurrency-control/images",
    "hash": "e8bfa185da29c803a0a9eca155ddba854c81989e",
    "text": "Humans like to do multiple things at the same time, it makes us feel more productive and less bored. We go on Instagram while we’re on the toilet, listen to music while working out, and contemplate life decisions while binge-watching Love is Blind.\n\nMy morning routine usually goes a little something like this:\n\n*   Get out of bed.\n*   Start a pot of coffee.\n*   Brush teeth.\n*   Go pee.\n*   Shower.\n*   …\n\nThis is the order I start things, but not the order that I finish them. The coffee takes about 5 minutes and I don’t just stand there waiting for it to finish. I instead go and brush my teeth while the coffee machine does its thing. Then to really maximize my time, I pee in the shower while brushing my teeth, while my coffee is being made. That’s four things happening at the same time.\n\nAll of these tasks, except for the first, can be executed **concurrently**. They can be executed out-of-order or in a partial order, without affecting the final outcome. So I could take half a shower, then turn on the coffee pot, then start brushing my teeth, then finish my shower and go on like this until everything on the list was complete and the final outcome would still be the same.\n\nSince these tasks can be run **concurrently**, I choose to execute some of them at the exact same time. This is executing the tasks in **parallel**.\n\nNot to brag, but I’m pretty good at executing these **concurrent** tasks in **parallel**. Computers, on the other hand, might not be so great. If I told a computer to do my morning routine, I might end up with shower in my bed and pee in my coffee.\n\nTo avoid situations like this, applications need a good plan for **concurrency control**. A way of managing simultaneous operations on data without the operations interfering with each other.\n\nIn this post, we will take a high-level look at how computers execute tasks in parallel and some of the solutions we have for concurrency control.\n\n### Catstagram\n\nFor the examples in this post, we will use a completely fictional app called Catstagram, an app where cats can share images about themselves.\n\nLet’s say we’ve built Catstagram and one of our cats, let’s call her Kitten, posts this image and caption:\n\n<Image src=\"images/freelance.png\" width={512} height={512} quality={100} />\n\nIf human is on computer, sit on keyboard.\n\nThe app is responsible for storing the image and the caption. For this article, we’re going to focus on the caption “If human is on computer, sit on keyboard.” Every time someone loads this post, the app will read the caption into memory to display the user. If Kitten wants to update that caption, the app will have to update the data that is being stored.\n\n### Serial Read\n\nLet’s say there are 8 cats that are trying to view Kitten’s post. If the app only processes one thing at a time, then each read will be processed one after the other. Click the run button below to see a simulation of this:\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\n### Parallel Read\n\nBut these reads can be run concurrently and the hardware is capable of running them at the exact same time (in parallel). So multiple reads could be processed at the same time.\n\nIn this example, the app can process up to 5 things in parallel.\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\nAs you can see, this will significantly speed up our app so we can run many more reads in a smaller amount of time. If we need to build an app that scales well, it’s going to need to process multiple things at the same time.\n\n### Parallel Write\n\nNow, what happens if kitten updates her post? What if kitten changes the caption to “My slave human didn’t give me any food so I pooped on the floor.” while other cats are trying to view the post?\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\nEverything is fine when we have multiple reads happening at the same time, but things get weird when we start writing in parallel. Before the caption is changed, our reads are safe. After the caption is changed, our reads are safe. But while the caption is being changed, our reads look like garbage. This is a big issue!\n\nScroll through the list of the last results to see what happened.\n\n### Serial Write\n\nSo what can we do? Well, we could go back to running everything on after the other:\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\nBut now everything is really slow again. We’re not utilizing the full power of the app, just because there’s one little write involved.\n\nWe need some sort of plan for **concurrency control**. We need a way of managing simultaneous operations on the data without the operations interfering with each other.\n\n### Locked Write\n\nThe reads can run concurrently, but the writes can’t, so what if we run all of the reads in parallel, and make sure that a write happens in isolation?\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\nThis is referred to as locking. When we lock the write like this, nothing can read or write that piece of data at the same time.\n\nBut this is still limiting our performance because every read is always waiting for the write. This app is going to be huge and we can have users waiting around because Kitten is updating her caption. But what other option do we have?\n\nWe want the speed and performance of being able to run everything in parallel, but we need to make sure that we never read garbage as we did in the Parallel Write section.\n\n### M**ulti-Version Concurrency Control** (MVCC)\n\nWhat if we keep track of multiple versions of Kitten’s captions? So as Kitten is updating the caption to a new value, all other cats can only see the old value. Then when the write is completely done, everyone sees the new value.\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:\n\nIf you scroll through the results, you will see that every time we read the data, we get an accurate piece of data. Up until the update is complete, we see the old data, then we see the new data. This is know as **Multi-Version Concurrency Control** and it’s what most relational database systems use.\n\nTo avoid conflicts, the app will have to block multiple writes from happening at the same time. So if you have many write transactions, they will all happen one after the other:\n\nInitial Value \n\nFinal Value \n\nRun\n\n#### Data:\n\nIf human is on laptop sit on the keyboard.\n\nProcessor\n\n#### Read:"
  },
  {
    "type": "article",
    "wp_id": 451,
    "title": "SQL & DDL: A Quick Guide to Creating Tables",
    "date": "2020-02-02T23:39:19",
    "slug": "a-quick-guide-to-creating-tables",
    "image": {
      "name": "a-quick-guide-to-creating-tables.png",
      "width": 3176,
      "height": 2088,
      "url": "content/articles/a-quick-guide-to-creating-tables/images/a-quick-guide-to-creating-tables.png"
    },
    "status": "published",
    "description": "Relational databases are all about tables. In order to store, organize, or query data; we must first create the tables. In this article, we will use the Data Definition Language (DDL) to learn about the basics of creating tables, choosing data types, adding constraints and default values.",
    "tags": [
      "mysql"
    ],
    "dirPath": "content/articles/a-quick-guide-to-creating-tables",
    "indexPath": "content/articles/a-quick-guide-to-creating-tables/index.mdx",
    "imagesPath": "content/articles/a-quick-guide-to-creating-tables/images",
    "hash": "16bfbaa28456c6e87fbe46483f9e8d5ba7c0814b",
    "text": "Relational databases are all about tables. In order to store, organize, or query data; we must first create the tables. In this article, we will use the Data Definition Language (DDL) to learn about the basics of creating tables, choosing data types, adding constraints and default values.\n\nI will be using MySQL for the syntax, but the concepts will apply to any SQL database.\n\n## Prerequisites\n\nTo get the most out of this article, you should be somewhat comfortable with Database Design and ERDs.\n\nIn this article, we’re going to create tables using the following ERD for reference:\n\n<Image src=\"images/basic_socail_network.png\" width={821} height={171} quality={100} />\n\nan ecomerce erd\n\nIt’s a really really really basic e-commerce database.\n\n*   A **user** can make many **orders** and an **order** belongs to a single **user**.\n*   An **order** can contain many **products** and a **product** can be purchased by many **orders**.\n\nIn a real-world application, this database would be much larger, but this small little database works perfectly for this post. It would probably even work for the world’s simplest ecomerce site.\n\n## CREATE TABLE\n\nEach box in the ERD will be a table in the database and each row will be a column in the table. Let’s start by taking a look at the users.\n\n### users\n\n```\n+"
  },
  {
    "type": "article",
    "wp_id": 403,
    "title": "SQL Injection | SQL is demon spawn",
    "date": "2020-01-20T16:22:01",
    "slug": "sql-injection-sql-is-demon-spawn",
    "image": {
      "name": "sql-injection-sql-is-demon-spawn.png",
      "width": 480,
      "height": 360,
      "url": "content/articles/sql-injection-sql-is-demon-spawn/images/sql-injection-sql-is-demon-spawn.png"
    },
    "status": "published",
    "description": "In this video, we will take a look at how to perform some SQL injection attacks on a site, and we’ll learn how to protect our sites from attacks.",
    "tags": [
      "mysql"
    ],
    "dirPath": "content/articles/sql-injection-sql-is-demon-spawn",
    "indexPath": "content/articles/sql-injection-sql-is-demon-spawn/index.mdx",
    "imagesPath": "content/articles/sql-injection-sql-is-demon-spawn/images",
    "hash": "a4b48f6ddab1ab3769605cd10a646da22e2c60e0",
    "text": "In this video, we will take a look at how to perform some SQL injection attacks on a site, and we’ll learn how to protect our sites from attacks.\n\n> SQL is demon spawn, and no self-respecting software developer should ever use it.\n> \n> [https://blog.cleancoder.com/uncle-bob/2017/12/03/BobbyTables.html](https://blog.cleancoder.com/uncle-bob/2017/12/03/BobbyTables.html)\n\nSQL databases have been around since the 70s and most websites these days use a SQL database to store data. However, SQL Injection attacks have been one of the most most common hacking techniques for the past 20 years.\n\nIn this video, we will take a look at how to perform some SQL injection attacks on a site, and we’ll learn how to protect our sites from attacks.\n\nThe site I made serves up data about the Oscars. just enter the name of an actor, and you get details about them. I have two versions of this site, one in javascript using node, and one in PHP. We hack both versions.\n\nCode: [https://github.com/meech-ward/sql\\_injection](https://github.com/meech-ward/sql_injection)\n\nInjections:\n\n[https://raw.githubusercontent.com/meech-ward/sql\\_injection/master/sql/injection.md](https://raw.githubusercontent.com/meech-ward/sql_injection/master/sql/injection.md)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLkhoNkNickRyMExr",
    "videoId": "Hh6CbrDr0Lk",
    "title": "SQL Injection",
    "date": "2020-01-16T19:33:10Z",
    "slug": "sql-injection",
    "image": {
      "name": "sql-injection.jpg",
      "alt": "SQL Injection",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/sql-injection/images/sql-injection.jpg"
    },
    "status": "published",
    "description": "#sqlinjection",
    "tags": [],
    "dirPath": "content/videos/videos/sql-injection",
    "indexPath": "content/videos/videos/sql-injection/index.mdx",
    "imagesPath": "content/videos/videos/sql-injection/images",
    "hash": "e8d0c296989f9870a04c470e4ab90deaa186b78b",
    "text": "* #sqlinjection\n\nIn this video, we will take a look at how to perform some SQL injection attacks on a site, and we’ll learn how to protect our sites from attacks.\n\nAll of the code examples can be found here [https://github.com/meech-ward/sql_injection](https://github.com/meech-ward/sql_injection)\n\nAlso, check out one of my favorite videos on the subject from computerphile: [https://www.youtube.com/watch?v=ciNHn38EyRc](https://www.youtube.com/watch?v=ciNHn38EyRc)"
  },
  {
    "type": "article",
    "wp_id": 392,
    "title": "How to lose an entire afternoon reading about JavaScript",
    "date": "2020-01-06T13:29:05",
    "slug": "how-to-lose-an-entire-afternoon-reading-about-javascript",
    "image": {
      "name": "how-to-lose-an-entire-afternoon-reading-about-javascript.png",
      "width": 512,
      "height": 512,
      "url": "content/articles/how-to-lose-an-entire-afternoon-reading-about-javascript/images/how-to-lose-an-entire-afternoon-reading-about-javascript.png"
    },
    "status": "published",
    "description": "Interested in losing an entire afternoon reading about JavaScript? 1. Our journey starts at the hello world page on reactjs.org. But don’t worry, we won’t stay there long, we ended up there by accident looking for the create react app docs. About 1 minute in, we’ll come across the most interesting paragraph on the page: \\[…\\]",
    "tags": [
      "javascript"
    ],
    "dirPath": "content/articles/how-to-lose-an-entire-afternoon-reading-about-javascript",
    "indexPath": "content/articles/how-to-lose-an-entire-afternoon-reading-about-javascript/index.mdx",
    "imagesPath": "content/articles/how-to-lose-an-entire-afternoon-reading-about-javascript/images",
    "hash": "51982f33a057b88752af1425468ec328317080cf",
    "text": "Interested in losing an entire afternoon reading about JavaScript?\n\n### 1.\n\nOur journey starts at the [hello world](https://reactjs.org/docs/hello-world.html) page on reactjs.org. But don’t worry, we won’t stay there long, we ended up there by accident looking for the [create react app](https://github.com/facebook/create-react-app) docs. About 1 minute in, we’ll come across the most interesting paragraph on the page:\n\n> If you don’t feel very confident, we recommend going through a [JavaScript tutorial](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) to check your knowledge level\n> \n> [https://reactjs.org/docs/hello-world.html](https://reactjs.org/docs/hello-world.html)\n\nThis is so interesting because it links out to MDN’s [A re-introduction to JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript)\n\n### 2.\n\nOk, so we’re done with reactjs. We must immediately click the link to get to MDN’s [A re-introduction to JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript). This is a very extensive, long, and well-made article. I suggest that **everyone** reads this article, even if you’re an experienced JS dev.\n\nUnfortunately for us, the very first paragraph provides an inner conflict as we struggle not to click on the provided link:  \n\n> Why a re-introduction? Because [JavaScript](https://developer.mozilla.org/en-US/docs/Glossary/JavaScript) is notorious for being [the world’s most misunderstood programming language](http://crockford.com/javascript/javascript.html).\n> \n> [https://developer.mozilla.org/en-US/docs/Web/JavaScript/A\\_re-introduction\\_to\\_JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript)\n\n[the world’s most misunderstood programming language](http://crockford.com/javascript/javascript.html). What an irresistible link to let’s click on it.\n\n### 3.\n\nWe end up on an old-school looking website, is this right? Oh, I see, it’s an article written by [Douglas Crockford](mailto:douglas@crockford.com). We’ve been linked to [crockford.com](http://crockford.com/javascript/javascript.html). Apart from some `align center`s here and there, this seems to be the only css applied to the entire site:\n\n```html\n<body bgcolor=\"linen\" style=\"margin: 8%;\"\n```\n\nAnyway, this is only like a 5-minute reading, but it will take us about an hour to read because every sentence will make us want to stare out of the window and question our existence as JavaScript developers.\n\nAfter we read this, we realize that the first word in the article is a link. Let’s click the link.\n\n### 4.\n\nAt this point, we’ve ended up on Crockford’s JavaScript archive page [http://crockford.com/javascript/](http://crockford.com/javascript/) Now we could take this opportunity to read through all of his JavaScript posts, but then we notice a little image in the top right corner that has the title “How JavaScript Works.” Also, it’s a link, so we click it.\n\nIt takes us to a new page about a book he’s written. I didn’t know he’d written more than [one book](https://www.amazon.ca/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742), it’s probably worth checking it out. So we click one of the links that take us to an amazon page where we realize that the book is about $40 USD, which is about $40 too expensive at this point.\n\n### 5.\n\nJust out of _curiosity_, we google “douglas crockford how javascript works” to see what comes up. One of first results is a link to a youtube video. Watch the [video](https://www.youtube.com/watch?v=8oGCyfautKo).\n\nHere, I’ll embed it for you:\n\n## 6.\n\nI trust you can take it from here. Good luck, and if you end up buying a copy of “[How JavaScript Works](https://www.amazon.com/dp/1949815005/wrrrldwideweb),” I would love to borrow it."
  },
  {
    "type": "article",
    "wp_id": 386,
    "title": "We Surprised Her With Another Motorized Advent Calendar",
    "date": "2019-12-11T23:29:51",
    "slug": "we-surprised-her-with-another-motorized-advent-calendar",
    "image": {
      "name": "we-surprised-her-with-another-motorized-advent-calendar.png",
      "width": 1440,
      "height": 1440,
      "url": "content/articles/we-surprised-her-with-another-motorized-advent-calendar/images/we-surprised-her-with-another-motorized-advent-calendar.png"
    },
    "status": "published",
    "description": "We Surprised Her With Another Motorized Advent Calendar.",
    "tags": [
      "arduino",
      "ios",
      "raspberry pi"
    ],
    "dirPath": "content/articles/we-surprised-her-with-another-motorized-advent-calendar",
    "indexPath": "content/articles/we-surprised-her-with-another-motorized-advent-calendar/index.mdx",
    "imagesPath": "content/articles/we-surprised-her-with-another-motorized-advent-calendar/images",
    "hash": "fc51057c1daf8db34f1be15f4c8651b0e6055931",
    "text": "My 16-month-old daughter and I built an advent calendar for her mother for Christmas. It uses a linear actuator and an iPhone app to push out a box of candy each day.\n\nCheck out my advent calendar from last year:\n\n> [Razor Blade Advent Calendar](https://sammeechward.com/razor-blade-advent-calendar/)\n\nWe used a linear actuator, arduino nano, motor driver l298n, and raspberry pi zero w. Leave me a comment if you want to know any other details about how I built it.\n\nMore photos on Instagram:\n\n> [\n> \n> View this post on Instagram\n> \n> ](https://www.instagram.com/p/B5rT5NKnVIp/?utm_source=ig_embed&utm_campaign=loading)\n> \n> [Another motorized advent calendar. Watch the full video on YouTube https://youtu.be/jx2uH0iK-bQ #raspberrypi #arduino #christmas #adventcalendar #baby #diy](https://www.instagram.com/p/B5rT5NKnVIp/?utm_source=ig_embed&utm_campaign=loading)\n> \n> A post shared by [Sam Meech-Ward](https://www.instagram.com/meech_ward/?utm_source=ig_embed&utm_campaign=loading) (@meech\\_ward) on Dec 4, 2019 at 8:06pm PST"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmp4MnVIMGlLLWJR",
    "videoId": "jx2uH0iK-bQ",
    "title": "Raspberry pi, Arduino, Motors, and Candy",
    "date": "2019-12-04T18:17:25Z",
    "slug": "raspberry-pi,-arduino,-motors,-and-candy",
    "image": {
      "name": "raspberry-pi,-arduino,-motors,-and-candy.jpg",
      "alt": "Raspberry pi, Arduino, Motors, and Candy",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/raspberry-pi,-arduino,-motors,-and-candy/images/raspberry-pi,-arduino,-motors,-and-candy.jpg"
    },
    "status": "published",
    "description": "My 16-month-old daughter and I built an advent calendar for her mother for Christmas. It uses a linear actuator and an iPhone app to push out a box of candy each day. ",
    "tags": [],
    "dirPath": "content/videos/videos/raspberry-pi,-arduino,-motors,-and-candy",
    "indexPath": "content/videos/videos/raspberry-pi,-arduino,-motors,-and-candy/index.mdx",
    "imagesPath": "content/videos/videos/raspberry-pi,-arduino,-motors,-and-candy/images",
    "hash": "a24d4ce502047ab8d3f42d310fa8fe71fba987d1",
    "text": "My 16-month-old daughter and I built an advent calendar for her mother for Christmas. It uses a linear actuator and an iPhone app to push out a box of candy each day. \n\nCheck out my advent calendar video from last year: [https://youtu.be/Mbtjb1aTHU4](https://youtu.be/Mbtjb1aTHU4)\n\nWe used a linear actuator, arduino nano, motor driver l298n, and raspberry pi zero w. Leave me a comment if you want to know any other details about how I built it.\n\n• All of my projects: [https://sammeechward.com/category/articles/](https://sammeechward.com/category/articles/)\n• My website: [https://sammeechward.com](https://sammeechward.com)\n• Instagram: [https://www.instagram.com/meech_ward/](https://www.instagram.com/meech_ward/)"
  },
  {
    "type": "article",
    "wp_id": 371,
    "title": "Using the WordPress REST API to Build a Chrome Extension",
    "date": "2019-11-13T19:29:45",
    "slug": "using-the-wordpress-rest-api-to-build-a-chrome-extension",
    "image": {
      "name": "using-the-wordpress-rest-api-to-build-a-chrome-extension.png",
      "width": 2754,
      "height": 916,
      "url": "content/articles/using-the-wordpress-rest-api-to-build-a-chrome-extension/images/using-the-wordpress-rest-api-to-build-a-chrome-extension.png"
    },
    "status": "published",
    "description": "The WordPress REST API provides us with a way to communicate with our WordPress sites using JSON. To some people, this might not mean much, but to every web and application developer, this is kind of huge. We can use WordPress to easily set up a CMS while taking complete control of the front end \\[…\\]",
    "tags": [],
    "dirPath": "content/articles/using-the-wordpress-rest-api-to-build-a-chrome-extension",
    "indexPath": "content/articles/using-the-wordpress-rest-api-to-build-a-chrome-extension/index.mdx",
    "imagesPath": "content/articles/using-the-wordpress-rest-api-to-build-a-chrome-extension/images",
    "hash": "a5acae5bc0fc9b909e01889beca881db11b33a9d",
    "text": "The WordPress REST API provides us with a way to communicate with our WordPress sites using JSON. To some people, this might not mean much, but to every web and application developer, this is kind of huge. We can use WordPress to easily set up a CMS while taking **complete control** of the front end using the REST API.\n\nIn this tutorial, we will just take a small peak at the WordPress REST API by creating a chrome extension that shows recent posts. We will get the 5 most recent posts from a site and display them in a small extension like this:\n\n<Image src=\"images/Screen-Shot-2019-11-13-at-11.21.38-AM.png\" width={464} height={508} quality={100} />\n\nIf you have your own WordPress site setup, then use posts from that site, otherwise, you can use sammeechward.com. If you are using your own site, just replace sammeechward.com with your own URL in the code examples.\n\n#### Note:\n\n  \nThis tutorial assumes you are already familiar with WordPress, basic front end web dev, and using RESTful APIs.  \n\n## Rest API\n\nAs I already mentioned, the WordPress REST API provides us with a way to communicate with our WordPress sites using JSON. Take this site for example. You can view all of my posts by going to https://sammeechward.com/posts/ **or** you can view all of my posts as JSON by going to https://sammeechward.com/wp-json/wp/v2/posts. Or if you just wanted to view this post, you could go to https://sammeechward.com/wp-json/wp/v2/posts/371.\n\nFor this tutorial, we want to get the first 5 posts, so we’ll be using the following URL: https://sammeechward.com/wp-json/wp/v2/posts?per\\_page=5. This will give us a list of objects that contain all of the data about the post. By default, these queries don’t contain all of the data we need. Things like image URLs are left out of the results. If we add the parameter `_embed=true`, then we’ll get everything we need\n\n```\nhttps://sammeechward.com/wp-json/wp/v2/posts?per_page=5&_embed=true\n```\n\nThis is the basic gist of the REST API. There is way more to it than this, but that’s all I’m going to cover here. For more information, check out the following resources:\n\n*   [REST API Handbook](https://developer.wordpress.org/rest-api/) at wordpress.org\n*   [WordPress: REST API](https://www.lynda.com/WordPress-tutorials/WordPress-REST-API/572168-2.html) at lynda.com\n\n## Setup The Chrome Extension\n\nNow that we know how we’re getting the data, it’s time to set up the chrome extension. We will just go over the basics here and set up a very simple extension. For more information on creating chrome extensions, visit Chrome’s [Getting Started Tutorial](https://developer.chrome.com/extensions/getstarted).\n\n  \nCreate a new directory for the extension named sams\\_posts. (or whatever your site’s name is)  \n\nAll extensions need a `manifest.json` file that contains all of the details to run the extension.\n\n  \nCreate a `manifest.json` file inside the sams\\_posts directory and paste the following code inside of it:  \n\n```json\n{\n  \"name\": \"Sam's Posts\",\n  \"version\": \"1.0\",\n  \"description\": \"The most recent posts from Sam's site\",\n  \"browser_action\": {\n    \"default_popup\": \"popup.html\"\n  },\n  \"manifest_version\": 2\n}\n```\n\nMost of that should be self-explanatory, but what’s up with the `popup.html`? Well that’s where we’ll put the html that will be rendered when we click on the extension button in chrome.\n\n  \nCreate a `popup.html`, `popup.css` and a `popup.js` file. Paste the following code into the `popup.html` file:  \n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <link rel=\"stylesheet\" href=\"popup.css\">\n</head>\n<body>\n\n  <h1>Hello Popup</h1>\n\n  <script src=\"popup.js\"></script>\n</body>\n</html>\n```\n\nThis is our boilerplate HTML code with a little message to show up when we view our extension. Ok, let’s add this thing to chrome.\n\n  \nOpen the Extension Management page by navigating to `chrome://extensions`.  \n\n  \nEnable Developer Mode by clicking the toggle switch next to Developer mode.  \n\n  \nClick the LOAD UNPACKED button and select the `sams_posts` directory.  \n\nAt this point, you should a little `S` icon appear with the other installed extensions in chrome. Click this icon and you should see the `Hello Popup` message.\n\n<Image src=\"images/Screen-Shot-2019-11-12-at-6.17.31-AM.png\" width={288} height={270} quality={100} />\n\nNow that we’ve got an extension, let’s pull in data from our API.\n\n## Fetching The JSON\n\nI’m going to use jQuery for this example because anyone can understand how to use jQuery. But really, you can use any library, framework, or lack of library and framework.\n\n  \nDownload jQuery from https://code.jquery.com/jquery-3.4.1.min.js and include it in your project. Make sure you include it in your `popup.html`.  \n\n  \nAdd the following code to you popup.js file:  \n\n```js\n$( async () => {\n  const results = await $.get(\"https://sammeechward.com/wp-json/wp/v2/posts?per_page=5&_embed=true\")\n  console.log(results)\n});\n```\n\nThis should grab the 5 most recent posts from the API and log them to the console. If you save this file and click on the extension icon again, you should still see the `Hello Popup` message, but how do we see the results that we log to the console?\n\n  \nRight click on the extension icon and select **Inspect Popup**.  \n\n<Image src=\"images/Screen-Shot-2019-11-13-at-10.54.35-AM.png\" width={385} height={246} quality={100} />\n\nThis will open the chrome developer tools for the popup. Open the console tab. If you’re using your own site, then you’ll probably see an error message stating the request has been blocked by CORS policy: ‘Access-Control-Allow-Origin’.\n\n<Image src=\"images/Screen-Shot-2019-11-13-at-10.56.34-AM.png\" width={487} height={324} quality={100} />\n\nI’m not going to go into a huge amount of detail about what CORS is here, but here’s a quick sentence about it. A website from one server can’t make a request to a different server without special permission. So we need our WordPress site to give special permission to chrome extensions that allow them to GET data.\n\nThere are a few ways of doing this, but the code block below will solve this problem for us:\n\n```php\nfunction chrome_extension_cors_rest_send_cors_headers() {\n  function is_chrome_extension() {\n    $chrome = \"chrome-extension://\";\n    $origin = get_http_origin();\n    return substr($origin, 0, strlen($chrome)) === $chrome;\n  }\n\n  function chrome_extension_cors_allow_access( $filter ) {\n    header( 'Access-Control-Allow-Origin: *');\n        header( 'Access-Control-Allow-Methods: OPTIONS, GET' );\n    return $filter;\n  }\n\n  if (is_chrome_extension()) {\n    add_filter( 'rest_pre_serve_request', 'chrome_extension_cors_allow_access' );\n  }\n}\nadd_action( 'rest_api_init', 'chrome_extension_cors_rest_send_cors_headers');\n```\n\nYou could copy and paste this into your theme’s functions.php file, or put it into an existing theme, but let’s put it in its own plugin.\n\n## chrome-extension-cors Plugin\n\n  \nCreate a new file called `chrome-extension-cors.php` inside you plugins directory and add the following code to it:  \n\n```php\n<?php\n/**\n* Plugin Name:       Chrome Extension CORS\n* Description:       Enable GET requests for any chrome extensions using the REST API\n* Version:           1.0.0\n* Requires at least: 5.2\n* Requires PHP:      7.2\n* Author:            me\n* Text Domain:       chrome_extension_cors\n* License:           GPL v2 or later\n* License URI:       http://www.gnu.org/licenses/gpl-2.0.txt\n*/\n\nfunction chrome_extension_cors_rest_send_cors_headers() {\n  function is_chrome_extension() {\n    $chrome = \"chrome-extension://\";\n    $origin = get_http_origin();\n    return substr($origin, 0, strlen($chrome)) === $chrome;\n  }\n\n  function allow_access( $filter ) {\n    header( 'Access-Control-Allow-Origin: *');\n        header( 'Access-Control-Allow-Methods: OPTIONS, GET' );\n    return $filter;\n  }\n\n  if (is_chrome_extension()) {\n    add_filter( 'rest_pre_serve_request', 'allow_access' );\n  }\n}\nadd_action( 'rest_api_init', 'chrome_extension_cors_rest_send_cors_headers');\n```\n\n  \nIn the admin panel, activate the new plugin.  \n\nAs long as this plugin is activated, chrome extensions will be able to make GET requests to your WordPress site.\n\n## Back to the JS\n\nNow that we don’t have CORS issues anymore, let’s take another look at the extension’s console. We should now be able to see 5 JSON posts show up. So now we just want to take those objects and turn them into HTML elements.\n\n<Image src=\"images/Screen-Shot-2019-11-13-at-11.07.43-AM.png\" width={499} height={272} quality={100} />\n\n  \nAdd the following code to your popup.js file:  \n\n```js\nconst posts = results.map(post => $(`\n  <a href=\"${post.link}\" class=\"post\">\n    <h2 class=\"post__title\">${post.title.rendered}</h2>\n    <img class=\"post__image\" src=\"${post._embedded['wp:featuredmedia'][0].media_details.sizes.thumbnail.source_url}\">\n    <p class=\"post__excerpt\">${post.excerpt.rendered}</p>\n  </a>\n`))\n\n$(document.body).append(posts)\n```\n\nThis code will create a new post element for each post returned from the API. It will then append them to the body of the `popup.html` file.\n\nOpen the popup again and you should see the 5 posts show up. Of course, they don’t look great, so we should add some CSS. Feel free to use my CSS or create your own styles.\n\n```css\nbody {\n  width: 400px;\n  margin: 0;\n}\n.post::after {\n  content: \"\";\n  display: block;\n  clear: left;\n}\n.post {\n  display: block;\n  border-bottom: 1px solid #DBDBDB;\n  color: black;\n  text-decoration: none;\n  padding: 10px;\n}\n.post:last-child {\n  border-bottom: none;\n}\n.post:hover {\n  background-color: #DBDBDB;\n}\n\n.post__title {\n  width: 100%;\n  text-align: center;\n}\n.post__image {\n  float: left;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  max-width: 100px;\n}\n```\n\nNow your posts should look something like this:\n\n<Image src=\"images/Screen-Shot-2019-11-13-at-11.21.38-AM.png\" width={464} height={508} quality={100} />\n\nTake a moment to look through the JSON objects and see what other pieces of information you could display in the extension.\n\n## Linking out of the Extension\n\nEach of the posts is wrapped in an anchor tag that should link to the original post on the WordPress site. Notice that clicking on a post in the extension doesn’t do anything. That’s because chrome extensions need to do things differently sometimes, and opening new tabs are one of those times.\n\n  \nAdd the following line of code to the `popup.js` file:  \n\n```js\n$('.post').on('click', function(event) {\n  const url = $(this).attr('href');\n  chrome.tabs.create({ url });\n})\n```\n\nThis will listen for a click event on any posts, grab the URL from the anchor tag, and tell chrome to open a new tab with that URL.\n\n## Summary\n\nIn this tutorial, we took a look at how we can use the WordPress REST API to display our post content in a different application. For this example, we used a chrome extension, but this could be any type of web, mobile, or desktop application. You could even make an alexa app to read you the newest post every morning, it’s really up to you.\n\nThis was just an introductory look at using the REST API and I encourage you to learn more by checking out the [REST API Handbook](https://developer.wordpress.org/rest-api/) at wordpress.org"
  },
  {
    "type": "article",
    "wp_id": 357,
    "title": "Connecting to MySQL from PHP using Procedural MySQLi",
    "date": "2019-10-01T03:37:58",
    "slug": "connecting-to-mysql-from-php-using-procedural-mysqli",
    "image": {
      "name": "connecting-to-mysql-from-php-using-procedural-mysqli.png",
      "width": 2194,
      "height": 952,
      "url": "content/articles/connecting-to-mysql-from-php-using-procedural-mysqli/images/connecting-to-mysql-from-php-using-procedural-mysqli.png"
    },
    "status": "published",
    "description": "We can use the mysqli functions to access a MySQL database from PHP. mysqli has a Procedural and an Object-Oriented API. This is a quick tutorial on how to perform some basic queries using procedural mysqli. MySQL Improved Extension The general steps that we will follow when performing an SQL query from PHP will be: \\[…\\]",
    "tags": [
      "mysql",
      "php"
    ],
    "dirPath": "content/articles/connecting-to-mysql-from-php-using-procedural-mysqli",
    "indexPath": "content/articles/connecting-to-mysql-from-php-using-procedural-mysqli/index.mdx",
    "imagesPath": "content/articles/connecting-to-mysql-from-php-using-procedural-mysqli/images",
    "hash": "d2d8cb95bd39b6ec5500bd3535dcfaa904d7a4ad",
    "text": "We can use the `mysqli` functions to access a MySQL database from PHP. `mysqli` has a Procedural and an Object-Oriented API. This is a quick tutorial on how to perform some basic queries using procedural `mysqli`.\n\n## MySQL Improved Extension\n\nThe general steps that we will follow when performing an SQL query from PHP will be:\n\n1.  Create a connection to the database. Like logging in to `mysql` from terminal.\n2.  Execute an SQL query.\n3.  If the query returns some data, use that data.\n4.  Release any returned data and close the connection to the database.\n\n## Setup\n\nBefore we can connect to a database, we will need the following information:\n\n*   The database’s host.\n*   The name of the database.\n*   The username and password of the database user.\n\nFor this example, we will be using a `kanye` database on `localhost` accessible with the user `testuser` and password `password`. You can set this up by running the following code on your MySQL database:\n\n```sql\nCREATE DATABASE kanye;\n\nCREATE USER 'testuser'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL PRIVILEGES ON kanye.* TO 'testuser'@'localhost';\n\nUSE kanye;\n```\n\nWhile we’re at it, let’s setup a `quotes` table and fill it with Kanye West Quotes. We’ll end up using this later on when we query the database from PHP using mysqli.\n\n```sql\nCREATE TABLE quotes (\n  id INT NOT NULL AUTO_INCREMENT,\n  txt VARCHAR(255) NOT NULL,\n  PRIMARY KEY (id)\n);\n\nINSERT INTO quotes (txt) \nVALUES ('Pulling up in the may bike'), \n  ('I wish I had a friend like me'), \n  ('Style is genderless'), \n  ('If I don''t scream, if I don''t say something then no one''s going to say anything.'), \n  ('Believe in your flyness...conquer your shyness.'), \n  ('Sometimes you have to get rid of everything');\n```\n\n## 1\\. Connect To The Database\n\nNow that we have a database, user and password; we can connect to the database from our PHP app.\n\n```php\n// Database Credentials\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'testuser');\ndefine('DB_PASS', 'password');\ndefine('DB_NAME', 'kanye');\n\n// Create a connection to the database\n$connection = mysqli_connect(DB_HOST, DB_USER, DB_PASS, DB_NAME);\nif(mysqli_connect_errno()) {\n  exit(\"Database connection failed: (\" . mysqli_connect_errno() . \")\");\n}\n```\n\n*   First, we create some constants for the credentials. This isn’t completely necessary, but it’s a nice way of organizing this information.\n*   Next, we create a connection to the databases by calling the `mysqli_connect` function. This function returns a reference to the database, that we need to keep track of to use later.\n*   Finally, we make sure that the connection to the database was successful. If there were any issues, then we stop the PHP script with the error message.\n\n## 2\\. Execute an SQL query\n\nNow that we have a connection to the database, we can execute a query. We will be executing a query to get all of the quotes from the database.\n\n```php\n$sql = \"SELECT * FROM quotes\"; // 1\n$results = mysqli_query($connection, $sql); // 2\nif (!$results) { // 3\n  exit(\"Database query failed.\");\n}\n```\n\n1.  Create a variable to hold the SQL query. This is just a PHP string.\n2.  Perform the query against the database by calling `mysqli_query` and passing in the connection to the database, and the query.\n3.  Make sure the query was successful and exit the script if it wasn’t.\n\nThe `$results` variable represents the result set obtained from a query, but it doesn’t actually have the data we need. We need to call one more function to get the data out of the database.\n\n## 3\\. Use The Data\n\n```php\n$row1 = mysqli_fetch_assoc($results);\necho $row1[\"id\"]; // 1\necho $row1[\"txt\"]; // 'Pulling up in the may bike'\n```\n\nOur `$results` represents 6 rows from the `quotes` table. Calling `mysqli_fetch_assoc` and passing in the `$results` gives us a single row from the table as an associated array. If we want to get data from all of the queried rows, then we will have to call `mysqli_fetch_assoc` 6 times.\n\n```php\n$row1 = mysqli_fetch_assoc($results);\necho $row1[\"id\"]; // 1\necho $row1[\"txt\"]; // 'Pulling up in the may bike'\n\n$row2 = mysqli_fetch_assoc($results);\necho $row2[\"id\"]; // 2\necho $row2[\"txt\"]; // 'I wish I had a friend like me'\n\n$row3 = mysqli_fetch_assoc($results);\necho $row3[\"id\"]; // 3\necho $row3[\"txt\"]; // 'Style is genderless'\n\n...\n```\n\n`mysqli_fetch_assoc` will automatically go to the next row in the result set every time we call it. When there are no more rows, the function will return NULL.\n\nObviously calling the function 6 times like this will never work in a real application. We need a way of putting this logic into a loop.\n\n### For Loop\n\n```php\n$count = mysqli_num_rows($results);\nfor ($i = 0; $i < $count; $i++) {\n  $row = mysqli_fetch_assoc($result);\n  echo $row[\"id\"]; \n  echo $row[\"txt\"];\n}\n```\n\nBy using the `mysqli_num_rows` function to get the total number of results from the query, we can create a for loop to get each individual row.\n\n### While Loop\n\n```php\nwhile ($row = mysqli_fetch_assoc($result)) {\n  echo $row[\"id\"]; \n  echo $row[\"txt\"];\n}\n```\n\nBecause the `mysqli_fetch_assoc` function returns null when there’s no more rows, we can use a while loop like this to write less code.\n\n#### Note:\n\n  \nEither the for loop or while loop will work, choose which ever one works best for you.  \n\n## 4\\. Close The Connection\n\n```php\nmysqli_free_result($results); // 1\nmysqli_close($connection); // 2\n```\n\n1.  Free up the memory that’s being used up by the data.\n2.  Close the connection to the database.\n\n## The Final Code\n\nHere’s an example of the previous steps put together to make a script that outputs the `quotes` as JSON.\n\n```php\n<?php\n\ndefine('DB_HOST', 'localhost');\ndefine('DB_USER', 'testuser');\ndefine('DB_PASS', 'password');\ndefine('DB_NAME', 'kanye');\n\n$connection = mysqli_connect(DB_HOST, DB_USER, DB_PASS, DB_NAME);\nif(mysqli_connect_errno()) {\n  exit(\"Database connection failed: (\" . mysqli_connect_errno() . \")\");\n}\n\n$sql = \"SELECT * FROM quotes \";\n$results = mysqli_query($connection, $sql);\nif (!$results) {\n  exit(\"Database query failed.\");\n}\n\n$count = mysqli_num_rows($results);\n$quotes = [];\nfor ($i = 0; $i < $count; $i++) {\n  $row = mysqli_fetch_assoc($results);\n  $quotes[] = $row[\"txt\"];\n}\n\nmysqli_free_result($results);\nmysqli_close($connection);\n\nheader(\"Content-type: application/json\");\necho json_encode([\"quotes\" => $quotes]);\n```\n\n## Summary\n\nThis was a quick overview of how to connect to and query a MySQL database from PHP using `mysqli`. Here are the basic steps you can follow for a query:\n\n1.  Create a connection to the database. Like logging in to `mysql` from terminal.\n2.  Execute an SQL query.\n3.  If the query returns some data, use that data.\n4.  Release any returned data and close the connection to the database."
  },
  {
    "type": "article",
    "wp_id": 347,
    "title": "AJAX & PHP – A GET and POST Server",
    "date": "2019-09-16T17:35:20",
    "slug": "ajax-php-a-get-and-post-server",
    "image": {
      "name": "ajax-php-a-get-and-post-server.png",
      "width": 2048,
      "height": 926,
      "url": "content/articles/ajax-php-a-get-and-post-server/images/ajax-php-a-get-and-post-server.png"
    },
    "status": "published",
    "description": "When we’re building modern single-page web applications, or when we’re building native mobile and desktop applications, we need an API that accepts and returns data in formats other than HTML. URL encoded data is a common format for sending data to servers, and JSON is common for sending data from a server to a client. \\[…\\]",
    "tags": [
      "ajax",
      "http",
      "php"
    ],
    "dirPath": "content/articles/ajax-php-a-get-and-post-server",
    "indexPath": "content/articles/ajax-php-a-get-and-post-server/index.mdx",
    "imagesPath": "content/articles/ajax-php-a-get-and-post-server/images",
    "hash": "cac316b8f3b608ddbe16b471e9eed863f80b5bb9",
    "text": "When we’re building modern single-page web applications, or when we’re building native mobile and desktop applications, we need an API that accepts and returns data in formats other than HTML. URL encoded data is a common format for sending data to servers, and JSON is common for sending data from a server to a client.\n\nIn this tutorial, we will send URL encoded data to an HTTP server that returns JSON data to a client.\n\nYou can view the completed code from this tutorial here: [https://gist.github.com/meech-ward/f72d101c400692da703fef920355f149](https://gist.github.com/meech-ward/f72d101c400692da703fef920355f149)\n\n## AJAX and HTTP\n\nBefore reading, check out this short video on AJAX and HTTP: [https://www.youtube.com/watch?v=RDo3hBL1rfA](https://www.youtube.com/watch?v=RDo3hBL1rfA)\n\n## Basic GET\n\nWhen our application needs to get some new data, maybe a new image or search result, we will create a GET request.\n\nLet’s start with a basic example of a php script that serves some JSON. This example mimics the [`kanye.rest`](https://api.kanye.rest) api and serves up random Kanye West Quotes.\n\n### Server `kanye.php`\n\n```php\n<?php\n\n// 1\n$quotes = [\n  \"Pulling up in the may bike\", \n  \"If I don't scream, if I don't say something then no one's going to say anything.\", \n  \"I wish I had a friend like me\", \n  \"Style is genderless\", \n  \"Believe in your flyness...conquer your shyness.\", \n  \"Sometimes you have to get rid of everything\"\n];\n\n$randomQuote = $quotes[array_rand($quotes)]; // 2\n$data = [\"quote\" => $randomQuote]; // 3\n\n// 4\nheader(\"Content-type: application/json\");\necho json_encode($data);\n```\n\n1.  Create an array of quotes.\n2.  Select a random quote from the array.\n3.  Create an associative array with the random quote.\n4.  Echo the quote as JSON.\n\nIf this file is named `kanye.php`, we can run `php -S 0.0.0.0:8080` from within the directory and access the api by going to `localhost:8080/kanye.php` in a web browser.\n\nThe api will return a random quote as a JSON object:\n\n```\n{\n  \"quote\": \"Style is genderless\"\n}\n```\n\n### Client\n\nNow we need a client to display this quote.\n\n#### Note:\n\n  \nThe client-side examples in this post will all be using jQuery and `$.ajax` to make HTTP requests.  \n\n```html\n<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\n<script>\nfunction updateQuote() {\n  $.ajax({\n    type: \"GET\",\n    url: \"kanye.php\"\n  }).then(data => {\n    $('<p>')\n      .text(data.quote)\n      .appendTo(body);\n  }).catch(error => {\n    console.log(\"ERROR\", error);\n  });\n}\n\n$(body).on('click', updateQuote);\n</script>\n```\n\nEvery time the body is clicked, a GET request is sent to the `kanye.php` file which returns a new quote JSON object. We can then create a new `p` tag and set its text to the JSON object’s quote.\n\n## Form GET\n\nThe previous `GET` request was an overly simplified example. Usually, we want to specify some parameters when making a GET request. For example, when we shop on Amazon, we don’t just see random products show up—our `GET` request includes data about what we’re searching for.\n\n[https://www.amazon.ca/s?k=kanye+west](https://www.amazon.ca/s?k=kanye+west)\n\nThe `k=kanye+west` part of the url is the extra data that we’re sending with the get request. The server can then access this data and show relevant results.\n\nFor our quote server, we will allow a client to specify the index of a quote to be served. So if someone wanted the third quote, they could pass an index of `2` in the url like this:\n\n[http://localhost:8080/kanye.php?index=2](http://localhost:8080/kanye.php?index=2)\n\n### Server\n\n```php\n<?php\n\n$quotes = [\n  \"Pulling up in the may bike\", \n  \"If I don't scream, if I don't say something then no one's going to say anything.\", \n  \"I wish I had a friend like me\", \n  \"Style is genderless\", \n  \"Believe in your flyness...conquer your shyness.\", \n  \"Sometimes you have to get rid of everything\"\n];\n\nif (isset($_GET['index'])) {\n  $index = $_GET['index'];\n} else {\n  $index = array_rand($quotes);\n}\n\n$data = [\"quote\" => $quotes[$index]];\n\nheader(\"Content-type: application/json\");\necho json_encode($data);\n```\n\nWe are checking if the `index` parameter has been added to the URL using the $\\_GET superglobal. If it has been set, then we use it as the index, otherwise, we use a random index.\n\n### PHP Superglobals\n\nFor more information on PHP Superglobals, read the following post on w3schools.\n\n[https://www.w3schools.com/php/php\\_superglobals.asp](https://www.w3schools.com/php/php_superglobals.asp)\n\n### Client\n\nMaking a GET request with query parameters from the client could look something like this:\n\n```html\n<form id=\"quoteForm\">\n  <input type=\"number\" name=\"index\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n```js\nfunction updateQuote(data) {\n  $.ajax({\n    type: \"GET\",\n    url: \"kanye.php\",\n    data: data\n  }).then(data => {\n    console.log(data.quote);\n  }).catch(error => {\n    console.log(\"ERROR\", error);\n  });\n}\n\n$(\"#quoteForm\").on(\"submit\", function(event) {\n  event.preventDefault();\n  const data = $(this).serialize(); // index=#\n  updateQuote(data);\n});\n```\n\nCalling `.serialize()` on the form will [url encode](https://www.w3schools.com/tags/ref_urlencode.asp) the data. Then we add that data to the ajax request which jQuery will send to the server in the url of the GET request.\n\nYou an see an example of the jQuery `.serialize()` function at the demo section on the following page: [https://api.jquery.com/serialize/](https://api.jquery.com/serialize/)\n\n### GET VS POST\n\nRead the following article that describes the differences between a GET and a POST request.\n\n[https://www.w3schools.com/tags/ref\\_httpmethods.asp](https://www.w3schools.com/tags/ref_httpmethods.asp)\n\nWe use a GET request any time that we’re getting some data and we’re not making any updates to any resources on the server. A GET request is safe in that you can make as many GET requests as you want, and no resources should be modified as a consequence.\n\nA POST request on the other hand is not safe. A POST request can create, update and delete resources. Resources are usually database entries like user accounts or posts.\n\n## POST\n\nWe wouldn’t use a POST request to get quotes from the server, but we _would_ use a POST request to create a new quote or update existing quotes.\n\nLet’s look at the client-side code first this time.\n\n### Client\n\n```html\n<form id=\"quoteForm\">\n  <input type=\"text\" name=\"quote\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```\n\n```js\n$.ajax({\n  type: \"POST\",\n  url: \"kanye.php\",\n  data: data\n}).then(data => {\n  console.log(data);\n}).catch(error => {\n  console.log(\"ERROR\", error);\n});\n}\n\n$(\"#quoteForm\").on(\"submit\", function(event) {\n  event.preventDefault();\n  const data = $(this).serialize();\n  createQuote(data);\n});\n```\n\nWe have a form that has a `quote` input. When the form is submitted, a POST request is made to the server that contains the quote data.\n\n### Server\n\n```php\n// 1\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n\n  $quote = $_POST[\"quote\"]; // 2\n\n  // 3\n  $file = fopen(\"quote.txt\", \"w\");\n  fwrite($file, $quote);\n  fclose($file);\n\n  // 4\n  header(\"Content-type: application/json\");\n  echo json_encode([\"message\" => \"Successfully added quote\"]);\n\n} else if ($_SERVER['REQUEST_METHOD'] == 'GET') {\n  ...\n```\n\n1.  Check if the request was a `POST` request.\n2.  The server receives the quote data in the `$_POST` superglobal.\n3.  A new text file is created with the quoted text inside of it. In this example there is no database, so a text file works for demonstration purposes.\n4.  A success message is sent back to the client. A response must always be sent at the end of an HTTP request.\n\n#### Note:\n\n  \nWe are passing `\"quote\"` to the `$_POST` superglobal because the name of the input is `quote` `<input type=\"text\" name=\"quote\">`. If we changed the name of the input to something else, like pancakes,`<input type=\"text\" name=\"pancakes\">`, then we would also have to use that on the server `$_POST[\"pancakes\"]`. Essentially, the server will access the form value using it’s `name`.  \n\n## Summary\n\nClient-side apps will make GET and POST requests to a server to get and manipulate data. Using PHP, we can create scripts that respond to these requests appropriately.\n\nFull Code Example: [https://gist.github.com/meech-ward/f72d101c400692da703fef920355f149](https://gist.github.com/meech-ward/f72d101c400692da703fef920355f149)"
  },
  {
    "type": "article",
    "wp_id": 344,
    "title": "Installing Node.js on Any Raspberry Pi",
    "date": "2019-09-10T04:49:47",
    "slug": "installing-node-js-on-any-raspberry-pi",
    "image": {
      "name": "installing-node-js-on-any-raspberry-pi.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/installing-node-js-on-any-raspberry-pi/images/installing-node-js-on-any-raspberry-pi.png"
    },
    "status": "published",
    "description": "JavaScript is one of the most simple yet powerful languages that we can use make apps for pretty much anything. This includes apps for the raspberry pi. In this tutorial, we will learn how to install NodeJs on any raspberry pi. For those of you that would prefer a video, here’s one that I prepared \\[…\\]",
    "tags": [
      "IoT",
      "javascript",
      "node js",
      "raspberry pi"
    ],
    "dirPath": "content/articles/installing-node-js-on-any-raspberry-pi",
    "indexPath": "content/articles/installing-node-js-on-any-raspberry-pi/index.mdx",
    "imagesPath": "content/articles/installing-node-js-on-any-raspberry-pi/images",
    "hash": "59e93259dd37657229bd405bbff0c020e5b9ac2d",
    "text": "JavaScript is one of the most simple yet powerful languages that we can use make apps for pretty much anything. This includes apps for the raspberry pi.\n\nIn this tutorial, we will learn how to install NodeJs on any raspberry pi.\n\nFor those of you that would prefer a video, here’s one that I prepared earlier: [https://www.youtube.com/watch?v=oFdlRcRl5aQ](https://www.youtube.com/watch?v=oFdlRcRl5aQ)\n\n## Node JS\n\nNode js is a javascript runtime environment that allows us to run javascript directly on a computer, without a browser. By installing node on the raspberry pi, we will be able to control everything using JavaScript.\n\nDifferent versions of the raspberry pi sometimes require different versions of node. So to make things simple, we’re just going to use a script that will handle all of the complexities for us. The script and the details about it can be found at https://github.com/meech-ward/NodeJs-Raspberry-Pi.\n\n## Don’t use nvm\n\nA quick aside for anyone wondering why we’re not using nvm here. NVM doesn’t work well with `sudo`, and it helps to be able to run a script on the raspberry pi with `sudo`. You can still use nvm with sudo but it usually involves something weird like `sudo $(which node) script.js`, and deamon services are awkward. It’s better just to install it without nvm.\n\n## Open Terminal\n\nBefore installing node, you need to have your raspberry pi setup and access to the pi’s terminal. If you need help getting setup, check out my getting started videos: https://sammeechward.com/raspberry-pi-for-developers-getting-started/\n\n## Install Node\n\nThe following code comes straight from https://github.com/meech-ward/NodeJs-Raspberry-Pi\n\nCopy the following line of code and paste it into your terminal:\n\n```shell\nwget -O - https://raw.githubusercontent.com/meech-ward/NodeJs-Raspberry-Pi/master/Install-Node.sh | sudo bash\n```\n\nHit enter to install node. This should only take a moment.\n\nThat’s it, node js should be installed and ready to go.\n\nWe can test this out by typing in `node` and pressing enter. This will put us in the node repl where we can start typing javascript commands, like\n\n```js\nvar greeting = \"Hello Pi\";\nconsole.log(greeting);\n```\n\nPress control + d to get out of there.\n\n## Summary\n\nThe raspberry pi now has node installed which means that we can start writing javascript and executing it directly on the pi. To start controlling the gpio pins with JavaScript, check out the [onoff](https://www.npmjs.com/package/onoff) library. For more help getting setup with the raspberry pi check out [my videos on the subject](https://sammeechward.com/raspberry-pi-for-developers-getting-started/)."
  },
  {
    "type": "article",
    "wp_id": 336,
    "title": "Swift Array Transformation Examples",
    "date": "2019-08-13T21:51:43",
    "slug": "swift-array-methods",
    "image": {
      "name": "swift-array-methods.png",
      "width": 1468,
      "height": 498,
      "url": "content/articles/swift-array-methods/images/swift-array-methods.png"
    },
    "status": "published",
    "description": "Just some examples of some of the built-in methods you can call on a swift array. Let’s start with some data. A sentence that is split into an array of words. forEach Execute a closure once for each item in an array. map Create a new array based on an existing array. filter Create a \\[…\\]",
    "tags": [
      "programming",
      "swift"
    ],
    "dirPath": "content/articles/swift-array-methods",
    "indexPath": "content/articles/swift-array-methods/index.mdx",
    "imagesPath": "content/articles/swift-array-methods/images",
    "hash": "595f22cbacfa31eeabe6a7ceba4a76f18fbde83d",
    "text": "Just some examples of some of the built-in methods you can call on a swift array.\n\nLet’s start with some data. A sentence that is split into an array of words.\n\n```swift\nlet quote = \"What I cannot create, I do not understand.\"\nlet words = quote.split(separator: \" \")\n// [\"What\", \"I\", \"cannot\", \"create,\", \"I\", \"do\", \"not\", \"understand.\"]\n```\n\n#### forEach\n\nExecute a closure once for each item in an array.\n\n```swift\nlet wordLengths = words.forEach { word in\n  print(word)\n}\n```\n\n#### map\n\nCreate a new array based on an existing array.\n\n```swift\nlet wordLengths = words.map { word in\n  return word.count\n}\n// [4, 1, 6, 7, 1, 2, 3, 11]\n```\n\n#### filter\n\nCreate a new array that is a subset of the items from an existing array.\n\n```swift\nlet largeWords = words.filter { word in\n  return word.count > 3\n}\n// [\"What\", \"cannot\", \"create,\", \"understand.\"]\n```\n\n#### sorted\n\nCreate a new array that is the sorted version of an existing array.\n\n```swift\nlet largestToSmallest = words.sorted { word1, word2 in\n  return word1.count > word2.count\n}\n// [\"understand.\", \"create,\", \"cannot\", \"What\", \"not\", \"do\", \"I\", \"I\"]\n```\n\n#### reduce\n\nCreate a new single value based on the values inside an array.\n\n```swift\nlet totalLetters = words.reduce(0) { result, word in\n  return result + word.count\n}\n// 35\n// Won't include any whitespace characters\n```"
  },
  {
    "type": "article",
    "wp_id": 298,
    "title": "net-socket.io: Sockets in JavaScript",
    "date": "2019-07-16T20:52:12",
    "slug": "net-socket-io",
    "image": {
      "name": "net-socket-io.png",
      "width": 2048,
      "height": 1050,
      "url": "content/articles/net-socket-io/images/net-socket-io.png"
    },
    "status": "published",
    "description": "net-socket.io is a small wrapper around node’s net library, that makes low-level socket programming in JavaScript easy. It is heavily based on Socket.io and Event Emitters.",
    "tags": [
      "ipc",
      "javascript",
      "library",
      "node js",
      "sockets",
      "tcp"
    ],
    "dirPath": "content/articles/net-socket-io",
    "indexPath": "content/articles/net-socket-io/index.mdx",
    "imagesPath": "content/articles/net-socket-io/images",
    "hash": "1e4cb38d8637e02430a9b04de68914dfa0ec5f69",
    "text": "[net-socket.io](https://www.npmjs.com/package/net-socket.io) is a small wrapper around node’s [`net`](https://nodejs.org/api/events.html) library, that makes low-level socket programming in JavaScript easy. It is heavily based on [Socket.io](https://github.com/socketio/socket.io) and [Event Emitters](https://nodejs.org/api/events.html).\n\n```js\nconst { Server } = require('ipc-socket.io');\nconst io = Server('/tmp/socket');\n\nio.on('connection', function(socket){\n  socket.emit('message', {\n    text: 'hello',\n    totalClients: io.sockets\n  }); \n});\n```\n\n## But Why?\n\nThe use case for this library is the same as the use case for node’s [`net`](https://nodejs.org/api/events.html) library. Which really just has the same use cases as TCP sockets or UNIX domain sockets. So really, it’s all about sockets.\n\n#### Note:\n\nThe net module uses sockets on everything that isn’t Windows and uses named pipes on Windows.\n\n## Sockets\n\nYou know, like [Berkeley sockets](https://en.wikipedia.org/wiki/Berkeley_sockets), not [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API)\n\nThe sockets API, available on pretty much all computers, is used for inter-process communication (IPC). So we can use sockets to have two or more applications communicate with each other. These applications could be on the same host (computer), or on different hosts (computers). In fact, we can create an HTTP server and client using sockets. But we could also just create a TCP server and client using sockets, without the overhead of any other protocols like HTTP.\n\n<Image src=\"images/AxhLEPd.png\" width={581} height={271} quality={100} />\n\nUsing sockets, we could create a TCP server application that allows connections from TCP client applications. As you can see, this looks a lot like a standard web server using HTTP and WebSockets, but this is just plain ol’ TCP without any other protocols.\n\nJust for reference, we’ve been able to use sockets to create TCP servers and clients since 1983. HTTP was introduced in 1991, and the WebSockets protocol was introduced in 2011. So this is the \\*old\\* way of doing things.\n\n### Example Using net-socket.io\n\n**server**\n\n```js\nconst { Server } = require('ipc-socket.io');\nconst io = Server(3000);\n\nio.on('connection', (socket) => {\n  socket.on('message', (data) => {\n    console.log('socket sent a message', data);\n  })\n});\n```\n\n**client**\n\n```js\nconst { Socket } = require('ipc-socket.io');\nconst socket = Socket(3000, 'localhost');\n\nsocket.on('ready', () => {\n  socket.emit('message', 'hello');\n});\n```\n\n#### Note:\n\nIf you actually wanted bidirectional communication between a client and server both connected to The Internet, WebSockets would be a much better option than plain ol’ TCP sockets.\n\n## Unix Domain Socket\n\nNow here’s where things get interesting. What if we have multiple applications running on the **same** computer and we want to enable communication between them?\n\n<Image src=\"images/wmB6TaC.png\" width={561} height={251} quality={100} />\n\nWe can still use sockets, but they don’t have to communicate through TCP. Instead, all of the communication can happen entirely within the operating system’s kernel. The sockets do this by binding to a filesystem pathname.\n\n### Example Using net-socket.io\n\n**server**\n\n```js\nconst { Server } = require('ipc-socket.io');\nconst io = Server('/tmp/my-app');\n\nio.on('connection', (socket) => {\n  socket.on('message', (data) => {\n    console.log('socket sent a message', data);\n  })\n});\n```\n\n**client**\n\n```js\nconst { Socket } = require('ipc-socket.io');\nconst socket = Socket('/tmp/my-app');\n\nsocket.on('ready', () => {\n  socket.emit('message', 'hello');\n});\n```\n\nAnd voila, we have applications on the same machine that are able to communicate bidirectionally with each other.\n\n## But Why?\n\nWhy might we want to create multiple applications on the same machine that communicate with each other? If all of the applications are running on the same computer, why not just create one big application instead of multiple smaller ones?\n\nThere are many many many reasons, but for me, there are two main motivators.\n\n1.  Modularity.\n2.  Language Freedom.\n\n## Language Freedom\n\nUsually, we need to use the same language for everything when we’re writing an application. If we’re writing an app in `JavaScript`, we can only use `JavaScript` and libraries written in `JavaScript`. Of course, there are exceptions, like pretty much every language has a way of importing `C` or `C++` libraries; but let’s say that we’re building a web app that allows users to upload images to be classified by an ML model. We might choose to build the `HTTP` server in `JavaScript` but build the image classification feature in `Python`. Using sockets, we could build multiple applications, in multiple languages, that each represents a single feature, running on the same machine, that communicate with each other to form a single application.\n\nOf course, the [net-socket.io](https://github.com/meech-ward/net-socket.io) library only exists as a JavaScript library. This means that the app written in the other language would need its own [net-socket.io](https://github.com/meech-ward/net-socket.io) library. Or it would have to use the language’s built-in way of using sockets. Here’s a list of some popular languages’ default socket API:\n\n*   [Python](https://docs.python.org/3/library/socket.html)\n*   [Ruby](https://docs.ruby-lang.org/en/2.1.0/Socket.html)\n*   [Go Lang](https://godoc.org/golang.org/x/net/internal/socket)\n*   [PHP](https://www.php.net/manual/en/book.sockets.php)\n*   [C#](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket?view=netframework-4.8)\n*   Some languages like Java and Swift have to rely on the default system socket library `#include <sys/socket.h>`\n\n#### Note:\n\n[The Linux Programming Interface Book](https://amzn.to/2XRZUBb) has some really great chapters on how sockets work.\n\n## Modularity\n\nLet’s talk a little bit about application architecture. When we’re writing software, we generally want to keep our code _**modular**_. We want to keep different parts of our application _**independent**_ of each other making them more _**stable**_ and _**reusable**_.\n\n#### Example:\n\n**Bad:**\n\n```js\nconst numbers = [1, 2, 3];\n\nfunction sumNumbers() {\n  const result = numbers.reduce((n, a) => n+a);\n  console.log(result);\n}\n```\n\n`sumNumbers` relies on other parts of the application to work, in this case, the `numbers` array. It will only work with this array and could break if this array is renamed or changed for some other reason. It also relies on `console.log`, so if we want a function that sums different numbers or does something else with the result, we need to write a new function.\n\n**Good:**\n\n```js\nfunction sumNumbers(numbers) {\n  const result = numbers.reduce((n, a) => n+a);\n  return result;\n}\n\nconst numbers = [1, 2, 3];\nconst result =sumNumbers(numbers);\nconsole.log(result);\n```\n\nThis function allows its only dependency, the `numbers` array, to be passed to it. This function is very independent, stable, and reusable. It will work with any array of numbers and will not break if other parts of the application change.\n\nWe use language features like functions, modules, and classes to _try_ and write good, modular code. Sometimes we do a good job, but most of the time we don’t.\n\n### Modularity Using Libraries\n\nA great way to enforce modularity and independence is to create libraries for the different parts of our code. If we take any part of our application that _can_ be turned into a library and turn it into a library, we will end up with very modular code.\n\nA library is completely separate from our application, so there’s no chance of _accidentally_ allowing some generic function to _know_ about parts of the application that it shouldn’t know about.\n\n#### Example:\n\n**Sum Numbers Library:**\n\n```js\nfunction sumNumbers(numbers) {\n  const result = numbers.reduce((n, a) => n+a);\n  return result;\n}\nmodule.exports = sumNumbers;\n```\n\nThere’s no possible way for this library to know about the rest of our application.\n\n**My App:**\n\n```html\nnpm install summmmmm-numbers\n```\n\n```js\nconst sumNumbers = require('summmmmm-numbers');\n\nconst numbers = [1, 2, 3];\nconst result = sumNumbers(numbers);\nconsole.log(result);\n```\n\nI love building an app by building generic libraries. The only thing I love more is building an app out of smaller apps.\n\n### Modularity Using Applications\n\nNow imagine that instead of separating our code into different libraries, we separated it into different applications.\n\n#### Example:\n\n**Sum Numbers Application:**\n\n```js\nconst io = require('ipc-socket.io').Server('/tmp/sum_numbers');\n\nfunction sumNumbers(numbers) {\n  const result = numbers.reduce((n, a) => n+a);\n  return result;\n}\n\nio.on('connection', socket => {\n  socket.on('sum', numbers => {\n    socket.emit('result', sumNumbers(numbers));\n  });\n});\n```\n\n**My App:**\n\n```js\nconst socket = require('ipc-socket.io').Socket('/tmp/sum_numbers');\n\nsocket.on('result', result => {\n  console.log(result);\n});\n\nsocket.on('ready', () => {\n  socket.emit('sum', [1,2,3,4,5,6]);\n});\n```\n\nIt doesn’t get much more modular than this. My code is separated into completely separate applications. It leads to cleaner application management too. Every time I deploy an update, I only have to update the app where the change occurred. Everything else can remain untouched.\n\n## Summary\n\nWe can use sockets to enable communication between two or more applications. These applications could be on the same computer, or on different computers. This frees us to use more languages and to write applications in different ways that can make our code more modular.\n\nCheck out the [net-socket.io](https://github.com/meech-ward/net-socket.io) library to get started.\n\n### See Also\n\n*   [Unix domain socket](https://en.wikipedia.org/wiki/Unix_domain_socket)\n*   [Berkeley sockets](https://en.wikipedia.org/wiki/Berkeley_sockets)"
  },
  {
    "type": "article",
    "wp_id": 246,
    "title": "Raspberry Pi for Developers: Getting Started",
    "date": "2019-07-13T13:07:06",
    "slug": "raspberry-pi-for-developers-getting-started",
    "image": {
      "name": "raspberry-pi-for-developers-getting-started.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/raspberry-pi-for-developers-getting-started/images/raspberry-pi-for-developers-getting-started.png"
    },
    "status": "published",
    "description": "How to get started making things with a raspberry pi. Learn how to write code that interacts with the physical world. It is targeted at existing developers but will be helpful to you no matter what your background is.",
    "tags": [
      "IoT",
      "javascript",
      "node js",
      "raspberry pi"
    ],
    "dirPath": "content/articles/raspberry-pi-for-developers-getting-started",
    "indexPath": "content/articles/raspberry-pi-for-developers-getting-started/index.mdx",
    "imagesPath": "content/articles/raspberry-pi-for-developers-getting-started/images",
    "hash": "61333625639b37976300779bf01cbb7a90d93a35",
    "text": "How to get started making things with a raspberry pi. Learn how to write code that interacts with the physical world. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\nView the entire playlist on [YouTube](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLm9GZGxSY1JsNWFR",
    "videoId": "oFdlRcRl5aQ",
    "title": "Installing Node.js - Raspberry Pi & JavaScript",
    "date": "2019-04-18T13:53:33Z",
    "slug": "installing-nodejs-raspberry-pi-&-javascript",
    "image": {
      "name": "installing-nodejs-raspberry-pi-&-javascript.jpg",
      "alt": "Installing Node.js - Raspberry Pi & JavaScript",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/installing-nodejs-raspberry-pi-&-javascript/images/installing-nodejs-raspberry-pi-&-javascript.jpg"
    },
    "status": "published",
    "description": "In this video, I will show you how to install Node.js on your raspberry pi. Once you've completed this, you can control your pi using JavaScript.",
    "tags": [],
    "dirPath": "content/videos/videos/installing-nodejs-raspberry-pi-&-javascript",
    "indexPath": "content/videos/videos/installing-nodejs-raspberry-pi-&-javascript/index.mdx",
    "imagesPath": "content/videos/videos/installing-nodejs-raspberry-pi-&-javascript/images",
    "hash": "d8d2af530056b8ac9616acf39fb8f6a58c1095d0",
    "text": "In this video, I will show you how to install Node.js on your raspberry pi. Once you've completed this, you can control your pi using JavaScript.\n\nThis is the fourth in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\nTransfering code to the raspberry pi using rsync:  [https://youtu.be/Nm_8u44zClw](https://youtu.be/Nm_8u44zClw)\n\nEntire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmZnMnNmSC03Ti1R",
    "videoId": "fg2sfH-7N-Q",
    "title": "Configuring Hostname and Password - Raspberry Pi for Developers",
    "date": "2019-04-16T19:40:50Z",
    "slug": "configuring-hostname-and-password-raspberry-pi-for-developers",
    "image": {
      "name": "configuring-hostname-and-password-raspberry-pi-for-developers.jpg",
      "alt": "Configuring Hostname and Password - Raspberry Pi for Developers",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/configuring-hostname-and-password-raspberry-pi-for-developers/images/configuring-hostname-and-password-raspberry-pi-for-developers.jpg"
    },
    "status": "published",
    "description": "Entire Series: https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd",
    "tags": [],
    "dirPath": "content/videos/videos/configuring-hostname-and-password-raspberry-pi-for-developers",
    "indexPath": "content/videos/videos/configuring-hostname-and-password-raspberry-pi-for-developers/index.mdx",
    "imagesPath": "content/videos/videos/configuring-hostname-and-password-raspberry-pi-for-developers/images",
    "hash": "e459596f8145097ce5521ad86cd358ac81ea5714",
    "text": "Entire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\nHelp support videos like this: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\nIn this video, I will show you how to use the raspi-config tool to configure your Raspberry Pi's hostname and password.\n\nThis is the third in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\nEntire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLm5hRFlYa0k1VVlF",
    "videoId": "naDYXkI5UYE",
    "title": "Connecting to Wi-Fi and Using SSH - Raspberry Pi for Developers",
    "date": "2019-04-12T15:43:44Z",
    "slug": "connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers",
    "image": {
      "name": "connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers.jpg",
      "alt": "Connecting to Wi-Fi and Using SSH - Raspberry Pi for Developers",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers/images/connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers.jpg"
    },
    "status": "published",
    "description": "Entire Series: https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd",
    "tags": [],
    "dirPath": "content/videos/videos/connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers",
    "indexPath": "content/videos/videos/connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers/index.mdx",
    "imagesPath": "content/videos/videos/connecting-to-wifi-and-using-ssh-raspberry-pi-for-developers/images",
    "hash": "cf82a578ea8ee0ac8649991df9d15fcf7efd7bd9",
    "text": "Entire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\nHelp support videos like this: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\nIn this video, I will show you how to connect your raspberry pi to a wifi network and log in to the pi to control it wirelessly using SSH. This is called a headless setup.\n\nThis is the second in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\nEntire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\nIn the previous video, I showed you how to set up your raspberry pi and install Raspbian: [https://youtu.be/hArqrFTq5vQ](https://youtu.be/hArqrFTq5vQ)\n\nFor this video, you will need a raspberry pi with Raspbian Linux installed."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmhBcnFyRlRxNXZR",
    "videoId": "hArqrFTq5vQ",
    "title": "Setting Up The Pi - Raspberry Pi for Developers",
    "date": "2019-04-12T15:43:38Z",
    "slug": "setting-up-the-pi-raspberry-pi-for-developers",
    "image": {
      "name": "setting-up-the-pi-raspberry-pi-for-developers.jpg",
      "alt": "Setting Up The Pi - Raspberry Pi for Developers",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/setting-up-the-pi-raspberry-pi-for-developers/images/setting-up-the-pi-raspberry-pi-for-developers.jpg"
    },
    "status": "published",
    "description": "Entire Series: https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd",
    "tags": [],
    "dirPath": "content/videos/videos/setting-up-the-pi-raspberry-pi-for-developers",
    "indexPath": "content/videos/videos/setting-up-the-pi-raspberry-pi-for-developers/index.mdx",
    "imagesPath": "content/videos/videos/setting-up-the-pi-raspberry-pi-for-developers/images",
    "hash": "5b909469fbd98219aefec032f92eed8fda04d42d",
    "text": "Entire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\nHelp support videos like this: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\nIn this video, I will show you how to set up your Raspberry Pi by installing Raspbian Lite.\n\nThis is the first in a video series about how to get started making things with a raspberry pi. It is targeted at existing developers but will be helpful to you no matter what your background is.\n\nEntire Series: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\nIn the next video, we get this thing connected to the Internet and learn how to control the pi wirelessly: [https://youtu.be/hArqrFTq5vQ](https://youtu.be/hArqrFTq5vQ)\n\nFor this video, you will need:\n* Raspberry pi & its power supply\n* Micro sd card with a capacity of at least 8gb is recommended\n* Optionally a keyboard, and a monitor. But we're going to learn how to control a pi without these in the next video."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLi1wUGkza3ZwSWxj",
    "videoId": "-pPi3kvpIlc",
    "title": "Raspberry Pi & JavaScript: Getting Started With IoT - Lunch&&Learn",
    "date": "2019-04-11T17:19:44Z",
    "slug": "raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn",
    "image": {
      "name": "raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn.jpg",
      "alt": "Raspberry Pi & JavaScript: Getting Started With IoT - Lunch&&Learn",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn/images/raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn.jpg"
    },
    "status": "published",
    "description": "This is the recorded video from a lunch and learn event hosted by devhub.ca",
    "tags": [],
    "dirPath": "content/videos/videos/raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn",
    "indexPath": "content/videos/videos/raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn/index.mdx",
    "imagesPath": "content/videos/videos/raspberry-pi-&-javascript:-getting-started-with-iot-lunch&&learn/images",
    "hash": "53268685988ad4ff97a9408201598db5a2ba285f",
    "text": "This is the recorded video from a lunch and learn event hosted by devhub.ca\n\nI introduce IoT and demonstrate using JavaScript to control a Raspberry Pi. For more videos on getting started with a raspberry pi, check out my playlist [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n\n* Event: [https://www.meetup.com/DevhubVancouver/events/260119133/](https://www.meetup.com/DevhubVancouver/events/260119133/)\n* Slides: [https://docs.google.com/presentation/d/1BKPkoXndFRaoG0dtPJvWOFpRdtthP5DUU5_W9XfI5ms/edit?usp=sharing](https://docs.google.com/presentation/d/1BKPkoXndFRaoG0dtPJvWOFpRdtthP5DUU5_W9XfI5ms/edit?usp=sharing)\n* My videos on getting started with a raspberry pi: [https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd](https://www.youtube.com/playlist?list=PL0X6fGhFFNTfW6RL46Rtd0VSqVtj-yBSd)\n* Patreon: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\nI will be adding more videos to this playlist and my youtube channel, so please subscribe."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLmtlZ29pSVMzdE53",
    "videoId": "kegoiIS3tNw",
    "title": "Internet Controlled Hand for Remote Lectures",
    "date": "2019-03-17T17:08:48Z",
    "slug": "internet-controlled-hand-for-remote-lectures",
    "image": {
      "name": "internet-controlled-hand-for-remote-lectures.jpg",
      "alt": "Internet Controlled Hand for Remote Lectures",
      "width": 1280,
      "height": 720,
      "url": "content/videos/projects/internet-controlled-hand-for-remote-lectures/images/internet-controlled-hand-for-remote-lectures.jpg"
    },
    "status": "published",
    "description": "A cohort in Calgary was getting upset that I was neglecting them during a lecture, so I made them a present. A hand that connects to slack and waves in front of me every time someone in Calgary has a question. You’re welcome neglected Calgary students.",
    "tags": [],
    "dirPath": "content/videos/projects/internet-controlled-hand-for-remote-lectures",
    "indexPath": "content/videos/projects/internet-controlled-hand-for-remote-lectures/index.mdx",
    "imagesPath": "content/videos/projects/internet-controlled-hand-for-remote-lectures/images",
    "hash": "2f3d7b896d2368f62dfd1fb3416cd4db255a94e2",
    "text": "A cohort in Calgary was getting upset that I was neglecting them during a lecture, so I made them a present. A hand that connects to slack and waves in front of me every time someone in Calgary has a question. You’re welcome neglected Calgary students.\n\nBy day, I give web lectures to students at Lighthouse Labs Coding Bootcamp in Vancouver. I lecture to students locally in Vancouver, and the lectures get streamed to remote cohorts around Canada. They can watch the lecture live and ask questions through Slack.\n\nA cohort in Calgary was getting upset that I was neglecting them during a lecture, so I made them a present. A hand that connects to slack and waves in front of me every time someone in Calgary has a question. You’re welcome neglected Calgary students.\n\nI used an Arduino UNO knock off board and attached to a high torque servo with a hand on the end. The code was written in 100% JavaScript with the help of the johnny-five library.\n\n## Hardware\n\n*   An [Arduino UNO](https://amzn.to/2LGDifI)\n*   A [hobby servo.](https://amzn.to/2LJdOhT)\n\n## How To Do This\n\nCreate a hand.\n\nThe first step is to create a hand that will wave. I used a wooden dowel that I had left over from my [razor blade advent calendar](/razor-blade-advent-calender/), and a paper hand that I modeled after my own left hand ?. Then I used a lot of tape to attach it to the servo.\n\nConnect the Arduino to the servo.\n\nI used the exact configuration on the [Johnny Five Example](http://johnny-five.io/examples/servo/). The code to then get the servo working is pretty simple. Just call `servo.to()` to set a value between 0 and 180 degrees.\n\n```js\nconst five = require(\"johnny-five\");\nconst board = new five.Board();\n\nboard.on(\"ready\", function() {\n  const servo = new five.Servo(10);\n  servo.to(160)\n});\n\n```\n\nCode the app.\n\nHere is where things get interesting. The app basically has to follow these steps:\n\n1.  Wait for a message to come in on slack.\n2.  Have the servo go from 20 degrees to 160 degrees and back again to simulate waving.\n3.  Have my laptop say the slack message out loud.\n\nSlack has a public API that can be used to detect new messages, but I only had a couple of hours to build this thing, so I didn’t have time to read the documentation. I figured that the fastest way to get this working would be to inject some javascript into a browser window running slack that could listen for a new message.\n\nHere’s the code I wrote for the browser. You can just open up dev tools on a slack message and paste this right in:\n\n```js\n(function() {\n\n  function postMessage(message) {\n    $.ajax({\n      type: \"POST\",\n      url: 'http://localhost:8008',\n      data: { message: message },\n    })\n    .then((data) => console.log(data))\n  }\n\n    let old = $(\".c-message__body\").last().text();\n    setInterval(() => {\n        const current = $(\".c-message__body\").last().text();\n        if (old !== current) {\n            old = current;\n            postMessage(current);\n\t\t}\n  }, 500);\n})()\n```\n\nSo the idea here is that a small amount of javascript will sit on chrome listening for a new message to come in. When it detects a new message, it will send an HTTP request to a node app running on my laptop. Then that node app will control the Arduino and say the message out loud. It’s overcomplicated, but it works.\n\nHere’s the server code:\n\n```js\nvar express = require('express')\nvar cors = require('cors')\nvar bodyParser = require('body-parser')\n\nconst servo = require('./servo');\nconst say = require('./say');\n\nvar app = express()\n\napp.use(cors())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true}));\n\napp.post('/', function (req, res) {\n  console.log(req.body);\n  \n  res.send(\"?\");\n\n  say(req.body.message);\n  servo.cycle();\n})\n\napp.listen(8008, function () {\n  console.log('?')\n})\n```\n\nIt’s literally just waiting for a request, then activating the servo and say functions. This is where the talking code and Arduino code live. You can view all of the code here: [https://github.com/Sam-Meech-Ward/Slack-Hand](https://github.com/Sam-Meech-Ward/Slack-Hand)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLk1idGpiMWFUSFU0",
    "videoId": "Mbtjb1aTHU4",
    "title": "World's First Razor Blade Advent Calendar",
    "date": "2018-12-07T18:01:15Z",
    "slug": "world's-first-razor-blade-advent-calendar",
    "image": {
      "name": "world's-first-razor-blade-advent-calendar.jpg",
      "alt": "World's First Razor Blade Advent Calendar",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/world's-first-razor-blade-advent-calendar/images/world's-first-razor-blade-advent-calendar.jpg"
    },
    "status": "published",
    "description": "An advent calendar that uses razor blades to unlock doors, not an advent calendar filled with razor blades.",
    "tags": [],
    "dirPath": "content/videos/videos/world's-first-razor-blade-advent-calendar",
    "indexPath": "content/videos/videos/world's-first-razor-blade-advent-calendar/index.mdx",
    "imagesPath": "content/videos/videos/world's-first-razor-blade-advent-calendar/images",
    "hash": "0a149b94a433d0db3dbe7c74caf2dfa9cf99747a",
    "text": "An advent calendar that uses razor blades to unlock doors, not an advent calendar filled with razor blades.\n\nThis year, I decided to make my girlfriend April an advent calendar full of her favorite candy. But I had to make sure that she wouldn't be able to just open up a door and take candy whenever she wanted. I needed the calendar to lock each door and only unlock one door each day in December.\n\nMy semi-successful solution was to tie each door to the calendar using a peice of string. Then I connected a razor blade to some CNC parts and had the stepper motor move the motor and cut the string, releasing the door for that day.\n\nMore information on how I built this: [https://www.sammeechward.com/youtube-projects/advent-calendar-2018](https://www.sammeechward.com/youtube-projects/advent-calendar-2018)\n\nCode I wrote:\n* [Computer Serial]([https://github.com/Sam-Meech-Ward/Calendar_Computer_Serial)](https://github.com/Sam-Meech-Ward/Calendar_Computer_Serial))\n* [Arduino Code]([https://github.com/Sam-Meech-Ward/Advent_Calendar_2018)](https://github.com/Sam-Meech-Ward/Advent_Calendar_2018))\n\nWiring diagram and instructions on how to use the A4988 driver: [https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/](https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/)\n\nJingle Bells 7 by Kevin MacLeod is licensed under a Creative Commons Attribution license ([https://creativecommons.org/licenses/by/4.0/)](https://creativecommons.org/licenses/by/4.0/))\nArtist: [http://incompetech.com/](http://incompetech.com/)\n\nHip Hop Christmas by Twin Musicom is licensed under a Creative Commons Attribution license ([https://creativecommons.org/licenses/by/4.0/)](https://creativecommons.org/licenses/by/4.0/))\nArtist: http://www.twinmusicom.org/"
  },
  {
    "type": "article",
    "wp_id": 319,
    "title": "Razor Blade Advent Calendar",
    "date": "2018-12-05T11:45:03",
    "slug": "razor-blade-advent-calendar",
    "image": {
      "name": "razor-blade-advent-calendar.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/razor-blade-advent-calendar/images/razor-blade-advent-calendar.png"
    },
    "status": "published",
    "description": "Problem: Build an advent calendar that automatically unlocks candy each day. Solution: Use razor blades… Obviously!",
    "tags": [
      "arduino",
      "C",
      "christmas",
      "node js"
    ],
    "dirPath": "content/articles/razor-blade-advent-calendar",
    "indexPath": "content/articles/razor-blade-advent-calendar/index.mdx",
    "imagesPath": "content/articles/razor-blade-advent-calendar/images",
    "hash": "740ea2c150b34540df36ad7c764a833d065fee94",
    "text": "Problem: Build an advent calendar that automatically unlocks candy each day.  \nSolution: Use razor blades… Obviously!\n\nThis year, I decided to make my girlfriend April an advent calendar full of her favorite candy. But I had to make sure that she wouldn’t be able to just open up a door and take candy whenever she wanted. I needed the calendar to lock each door and only unlock one door each day in December.\n\nMy semi-successful solution was to tie each door to the calendar using a piece of string. Then I connected a razor blade to some CNC parts and had the stepper motor move the motor and cut the string, releasing the door for that day.\n\n<Image src=\"images/calendar_1-1024x520.png\" width={1024} height={520} quality={100} />\n\n## YouTube Video\n\n## How To Build\n\n### Required Hardware\n\n*   [Arduino UNO](https://www.ebay.ca/itm/282789077942)\n*   [A4988 Stepper Motor Driver](https://www.ebay.com/itm/221921771119)\n*   [NEMA 17 Stepper motor](https://www.ebay.ca/itm/131622995166)\n*   [CNC Stepper Motor Coupler Connector](https://www.ebay.ca/itm/131904158434)\n*   [T8 500mm Lead Screw Rod W/Nut Shaft Coupling Mounting Support for 3d Printer Set](https://www.ebay.ca/itm/182887854654)\n*   [Lots of hardboard](https://www.homedepot.ca/en/home/p.standard-hardboard-18-x-4-x-8.1000167412.html)\n\n### Steps\n\n  \nMake the calendar strurcture.  \n\nFirst I cut out a bunch of wood to make the calendar structure. it was supposed to have 26 slots for candy (25 days in December + one bonus day when I showed off the calendar). At the end of the project, only 22 were used because the CNC parts got in the way.\n\n![](blob:https://sammeechward.com/2bdaba29-30cd-4c94-ac50-4c4b377d4a59)\n\n  \nAttatch the CNC parts to razor blades  \n\nI didn’t want to try controlling 25 separate locks, I wanted it to be simpler than that. I had purchased the following pieces to make a small laser cutter, but haven’t gotten around to actually making that yet:\n\n*   [NEMA 17 Stepper motor](https://www.ebay.ca/itm/131622995166)\n*   [CNC Stepper Motor Coupler Connector](https://www.ebay.ca/itm/131904158434)\n\nSo I attached razor blades to these pieces, with hot glue of course, so that I could just control the stepper motors that would cut some string holding on the calendar doors.\n\n<Image src=\"images/razor_glue-1024x680.jpg\" width={1024} height={680} quality={100} />\n\nI used a cheap plastic rail that I found at home depot, and some blank circuit boards hot glued to the nut. This worked way better than expected to guide the nut in a straight line.\n\n  \nWire up an arduino to the stepper motors.  \n\nWith the calendar setup and the razor blades in place, I needed to put together the circuit to control the motors from my Arduino. I purchased some [A4988 stepper motor drivers](https://www.ebay.com/itm/221921771119) and used the following blog post to help me wire everything and write the first piece of code. https://howtomechatronics.com/tutorials/arduino/how-to-control-stepper-motor-with-a4988-driver-and-arduino/\n\n<Image src=\"images/circuit-1024x536.jpg\" width={1024} height={536} quality={100} />\n\n  \nProgram the arduino  \n\nWith the calendar setup and the motors and razor blades in place, I needed the code to actually make this thing work.\n\nOne big problem I faced with this, is that the Arduino won’t be able to know the current date and time after it’s been powered down. So I needed a way of telling the Arduino what the current time is, every time it gets turned on / plugged in.\n\nMy original plan was to use an Arduino pro mini to keep track of the time that could be connected to a 9v battery. So even when the calendar was unplugged, the pro mini would continue running. Then when the Arduino UNO needed to know the time, it would just ask the pro mini.\n\nAfter an hour of failing to get the [SoftwareSerial](https://www.arduino.cc/en/Reference/SoftwareSerial) library to work, I decided to give up and just use my laptop to sync up the date and time to the Arduino. The consequence of this is that every time we unplug the calendar, the Arduino needs to be plugged into a computer that can run the following script to sync the date: [Computer Serial](https://github.com/Sam-Meech-Ward/Calendar_Computer_Serial) code.\n\nAll of the code for the Arduino can be found on github: https://github.com/Sam-Meech-Ward/Advent\\_Calendar\\_2018\n\n  \nAdd candy and tie up all of the doors  \n\nNow that the calendar is pretty much completely setup, the only thing left to do is add candy and tie up the doors.\n\nApril’s favorite candies right now are the herbaland gummy candies, so I bought a bunch of those. To mix things up, I also got some lint chocolates and a fidget spinner.\n\n<Image src=\"images/candy-1024x647.jpg\" width={1024} height={647} quality={100} />\n\nPutting the candy in the calendar was easy, tying up all of the doors was a long and mundane task. I could never be a sewer, I don’t have the patience to thread anything.\n\n  \nGive the advent calendar to a loved one  \n\nBecause of bad string tying skills, a limited amount of time until December 1st, and an overall lack of planning and experience; the calendar ended up looking like this:\n\n![](blob:https://sammeechward.com/6c3e87de-d3c4-48a0-9f2f-f9504890d24e)\n\nBut at least it works… kind of.\n\nThat’s why you give this calendar to a loved one, they’re the ones that appreciate “homemade” gifts.\n\n## Conclusion\n\nThis calendar is kind of a perfect visualization of any piece of software ever built. Most software engineers start out with a vision for something that’s going to look great and work great and end up with code that looks and functions like this calendar."
  },
  {
    "type": "article",
    "wp_id": 10,
    "title": "Making My First C Library",
    "date": "2018-08-15T09:48:54",
    "slug": "making-my-first-c-library",
    "image": {
      "name": "making-my-first-c-library.png",
      "width": 3206,
      "height": 1370,
      "url": "content/articles/making-my-first-c-library/images/making-my-first-c-library.png"
    },
    "status": "published",
    "description": "I’ve been playing around with C code the last couple of weekends. Specifically the libav\\* libraries from FFmpeg. And it occurred to me that I’ve never made my own C library.",
    "tags": [
      "C",
      "FFmpeg",
      "library",
      "programming",
      "sockets"
    ],
    "dirPath": "content/articles/making-my-first-c-library",
    "indexPath": "content/articles/making-my-first-c-library/index.mdx",
    "imagesPath": "content/articles/making-my-first-c-library/images",
    "hash": "ea0bf22ac94b2f0434746f83e4882b479ffe286e",
    "text": "I’ve been playing around with C code the last couple of weekends. Specifically the libav\\* libraries from FFmpeg. And it occurred to me that I’ve never made my own C library.\n\nThis bugs me a little bit because I prefer to make libraries when I build apps in languages like Swift and JavaScript. But I’ve never done this with `C`, probably because I rarely program in `C`, I mean why would I except for fun?\n\nSo today, for fun, I’m going to make my first C library.\n\n#### Warning:\n\nI am not a professional C programmer, so my C code will probably not follow best practices.\n\nCheck out the final code for this post: [https://github.com/meech-ward/smw\\_socket](https://github.com/meech-ward/smw_socket)\n\n## Unix Domain Socket Stream Server\n\nYou can use Unix sockets to communicate between two different applications on the same machine, similar to how you would use sockets to communicate between two applications over TCP.\n\nSetting up a socket server in C isn’t super difficult, so I figure it’s a good starting point for creating a library. My goal is to make a library that makes setting up a Unix socket server using `<sys/socket.h>` feel more like setting up a socket server using Node’s `Net` library (https://nodejs.org/api/net.html).\n\nI mean, why not?\n\n### The Final Code\n\nHere’s a look what its like to setup a unix domain socket client using my library:\n\n```c\n#include \"smw_socket.h\"\n\nvoid onConnect(SMWUnixSocket *socket) {\n  // Connected to server\n\n  if (smw_unix_socket_send_data(socket, 6, \"Hello\") != SMWUnixServerSocketSendDataErrorNone) {\n    fprintf(stderr, \"Error sending data\\n\");\n  }\n}\n\nvoid onData(SMWUnixSocket *socket, int dataSize, char *data) {\n  // Received data\n}\n\nvoid onClose(SMWUnixSocket *socket) {\n  // Connection closed\n}\n\nint main () {\n  SMWUnixSocket *socket;\n  char *filePath = \"/tmp/socket_server\";\n  if (smw_unix_client_socket_create(filePath, &socket) != SMWUnixClientSocketConnectErrorNone) {\n    fprintf(stderr, \"Error creating socket\\n\");\n    return -1;\n  }\n\n  // Connect to the server\n  if (smw_unix_client_socket_connect(socket, 100, on_connect, on_data, on_close) != SMWUnixClientSocketConnectErrorNone) {\n    fprintf(stderr, \"Error creating connection\\n\");\n    return -1;\n  }\n\n  return 0;\n}\n```\n\nNot too bad. Now compare that to the Node.js version:\n\n```js\nconst net = require('net');\n\nconst socket = net.connect('/tmp/socket_server');\n\nsocket.on('connect', () => {\n  // Connected to server\n\n  // Send some data to the server\n  socket.write(\"Hello\");\n});\n\nsocket.on('data', (data) => {\n  // Received data from the server\n});\n\nsocket.on('close', (data) => {\n  // Connection closed\n});\n```\n\nThe plan was pretty simple, create a node like interface for C sockets.\n\n### Errors\n\nThe first blocker I had was when handling errors. Handling errors in C has never really been done well, and I didn’t like the idea of using `errno` or just returning a number < 0, so I just did what I would do in Swift and used error enums.\n\nEvery function gets an accompanying enum that contains all of the possible errors that can occur in that function. That function then returns an option from the enum, which will hopefully be ErrorNone, which is 0.\n\n### Writing the Code\n\nOnce I had the errors decision out of the way, the rest of the programming was pretty simple. I created all of the files for the library and just compiled them directly using a `test.c` file with a `main` function in it.\n\n```shell\ngcc -g *.c -o test\n```\n\nI didn’t really run into any issues here.\n\n### Makefile\n\nWhen I was ready to compile the code into a library and link against it, I just googled the correct `gcc` commands and ran them. There were a couple of commands so I just put them into a shell script so I could easily test it out and make changes quickly.\n\n```shell\n#!/bin/bash\n\nLIBRARY_NAME=\"libsmw_socket.a\"\n\n# Build library\necho \"Building Library\"\ngcc -g -c *.c\nar r $LIBRARY_NAME *.o\nrm *.o\n\n# Build the examples\necho \"Building Examples\"\ngcc -g ./examples/client.c  $LIBRARY_NAME -I. -o ./examples/client\ngcc -g ./examples/server.c  $LIBRARY_NAME -I. -o ./examples/server\n```\n\nThis works just fine, it compiles the source files into a library named `libsmw_socket.a` and them compiles the examples I had written. But this is not the `C` way of doing things. I shouldn’t have a bash script doing the compilation for me, I should have a Makefile doing it for me.\n\nNow, my experience with make and higher level tools like cmake is very limited, but I really wanted this to be complete with it’s own Makefile. This actually took way longer than expected because I had a hard time finding exactly what I needed on the internet. Every make tutorial or piece of documentation was either way too basic, the equivilent of running `gcc -g -c *.c`, or way too advanced, like only helpful if I was deciphering the Makefile for opencv or something.\n\nAnyway, in the end I read a chapter 28 of [learn c the hard way](https://www.safaribooksonline.com/library/view/learn-c-the/9780133124385/) and I completed the Makefile:\n\n```shell\nCC = gcc\nCFLAGS= -g -I./build/ -I./src/ -Wall\n\nSOURCES=$(wildcard src/*.c) \nOBJECTS=$(patsubst %.c,%.o,$(SOURCES))\n\nTARGET=build/libsmw_socket.a\n\nall: $(TARGET) \n\n$(TARGET): CFLAGS += -fPIC\n\n$(TARGET): build $(OBJECTS)\n    ar rcs $@ $(OBJECTS)\n    ranlib $@\n\nbuild:\n    @mkdir -p build\n    @mkdir -p bin\n\nexamples: all\n    $(CC) $(CFLAGS) examples/client.c  $(TARGET) -o bin/client_example\n    $(CC) $(CFLAGS) examples/server.c  $(TARGET) -o bin/server_example\n\nclean:\n    rm -rf build bin $(OBJECTS) $(TESTS)\n```\n\nIt has separate options for compiling the library, the examples, and cleaning up. It’s exactly what I wanted for this project.\n\n## Summary\n\nIn the end, I achieved what I set out to do, create a usable C library. Although this library is usable, it is in no way complete. It doesn’t handle all of the errors that could arise from using sockets, and absolutely no considerations for multithreading were taken into account. That being said, I am quite happy with this library and I might even use it in a project in the future."
  },
  {
    "type": "article",
    "wp_id": 192,
    "title": "Let’s Build a Temperature Sensor with a Raspberry Pi – Part 2",
    "date": "2018-07-15T19:43:40",
    "slug": "lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2",
    "image": {
      "name": "lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/images/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2.png"
    },
    "status": "published",
    "description": "I set up a raspberry pi to emit temperature and humidity data using BLE advertising packets. Then I made an iPhone app that can read that data and display it to me.",
    "tags": [
      "ble",
      "ios",
      "node js",
      "raspberry pi",
      "swift"
    ],
    "dirPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2",
    "indexPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/index.mdx",
    "imagesPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/images",
    "hash": "dc2f55f38d8cc9b8a2d13a3af181b4960b190df8",
    "text": "I set up a raspberry pi to emit temperature and humidity data using BLE advertising packets. Then I made an iPhone app that can read that data and display it to me.\n\nThis is part two of the two part temperature sensor project. Make sure you check out [Part 1](/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1) first.\n\nIn this part, I set up the pi to emit the temperature and humidity data using BLE advertising packets. I also made an iPhone app that can read that data and display it to me.\n\n## YouTube Video\n\n## Hardware\n\n*   The raspberry pi and temperature sensor from the last [post](/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/).\n*   An iPhone and a Mac.\n\n## How To Do This\n\nThe first thing to do is to set up the raspberry pi as the Bluetooth peripheral (the thing advertising it’s data). Then I will set up the iPhone app which acts as the central device (the thing that reads data from the peripheral)\n\nBLE peripherals can either be advertising themselves, or they can be connected to a central device. If they are advertising themselves, then lots of central devices can “see” them and choose to try and connect to them. Once connected, the peripheral device can only communicate with a single central device.\n\nWhen a peripheral is advertising, it is emitting a small amount of data in all directions for any other device to see. This is usually data about the device like the name and what it is, but this advertising data could really be anything. So you could just advertise temperature and humidity data and never actually have to “connect” to the device. This will allow any device to read the temperature and humidity, and makes the code easier to write.\n\n#### Raspberry Pi (Bluetooth Peripheral)\n\nInstall [bleno](https://github.com/noble/bleno)\n\nI used [bleno](https://github.com/noble/bleno), a Node.js module for implementing BLE (Bluetooth Low Energy) peripherals. bleno uses the linux Bluez, so before you can use bleno, you need to install the bluez prerequisite software.\n\n```c\nsudo apt-get install -y bluetooth bluez libbluetooth-dev libudev-dev\n```\n\nThen you can install bleno.\n\n```c\nnpm install bleno\n```\n\nCode the app.\n\nI created a new file and added the following code which is basically coppied from [bleno](https://github.com/noble/bleno)‘s documentation:\n\n```js\nconst bleno = require('bleno');\n\n// bleno.state must be poweredOn before advertising is started. \nlet state;\nbleno.on('stateChange', (s) => {\n  state = s;\n  if (state !== 'poweredOn') {\n    bleno.stopAdvertising();    \n  }\n});\n\n/**\n * Start or restart advertising with custom data.\n * @param {A 31 byte buffer compatible with the ble advertising spec} buffer \n */\nfunction startAdvertising(buffer) { \n  return new Promise((resolve, reject) => {\n    bleno.stopAdvertising();  \n    if (state !== 'poweredOn') {\n      reject(new Error(\"not powered on\"));\n      return;\n    }\n    bleno.startAdvertisingWithEIRData(buffer, (error) => {\n      if (error) {\n        reject(error);\n        return;\n      } \n      resolve(\"?\");\n    });\n  });\n}\n```\n\nI can advertise 31 bytes of data using the `startAdvertising` function and passing in a 31 byte buffer.\n\n#### Note:\n\nIf you’re interested, here’s some data on how the 31 bytes should be set up.\n\n*   [Custom GAP advertising packet](https://docs.mbed.com/docs/ble-intros/en/latest/Advanced/CustomGAP/)\n*   [GAP Data Types](https://www.bluetooth.com/specifications/assigned-numbers/generic-access-profile)\n\nAll that’s left to do here, is pass the temperature and humidity data to this function as a 31 byte buffer. So I wrote the following function that takes in two doubles, and creates a new buffer. The code is a little bit long because of the way an advertising packet works, but here it is:\n\n```js\n/**\n * Create a new 31 byte buffer with temperature and humidity data.\n * For more information about how this function works, check out the following links:\n * https://www.bluetooth.com/specifications/assigned-numbers/generic-access-profile\n * https://www.silabs.com/community/wireless/bluetooth/knowledge-base.entry.html/2017/02/10/bluetooth_advertisin-hGsf\n * @param {A Double} temperature \n * @param {A Double} humidity \n */\nfunction advertisementData(temperature, humidity) {\n  if (typeof temperature !== 'number' || typeof humidity !== 'number') {\n    throw 'a fit';\n  }\n\n  const buffer = Buffer.alloc(31); // maximum 31 bytes\n\n  let bufferIndex = 0;\n\n  // flags\n  buffer.writeUInt8(2, bufferIndex++);\n  buffer.writeUInt8(0x01, bufferIndex++);\n  buffer.writeUInt8(0x06, bufferIndex++);\n\n  // Complete Local Name\n  const name = \"Sensei\" // Change this\n  buffer.writeUInt8(1+name.length, bufferIndex++);\n  buffer.writeUInt8(0x09, bufferIndex++);\n  buffer.write(name, bufferIndex);\n  bufferIndex += name.length;\n\n  // Manufacturer Specific Data\n  // 4 bytes for each number\n  buffer.writeUInt8(1+8+8, bufferIndex++);\n  buffer.writeUInt8(0xFF, bufferIndex++);\n  buffer.writeDoubleLE(temperature, bufferIndex);\n  bufferIndex+=8;\n  buffer.writeDoubleLE(humidity, bufferIndex);\n  bufferIndex+=8;\n\n  return buffer;\n}\n```\n\nThis will create a new 31 byte buffer with temperature and humidity data assigned to the Manufacturer Specific Data. [https://www.bluetooth.com/specifications/assigned-numbers/generic-access-profile](https://www.bluetooth.com/specifications/assigned-numbers/generic-access-profile)\n\n```c\nManufacturer Specific Data: 0xFF\ntemperature: 8 byte little endian double\nhumidity: 8 byte little endian double\n```\n\nTo start advertising temperature and humidity, you could call the function like this:\n\n```js\nconst buffer = advertisementData(24.4, 65.6);\nstartAdvertising(buffer);\n```\n\nThis is just using some hardcoded numbers. I’ll let you figure out how you want to connect this to the real temperature data from the [previous post](/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/).\n\nMy version of the peripheral code for this can be found here: [https://github.com/Sam-Meech-Ward/Sensei-Peripheral-JS](https://github.com/Sam-Meech-Ward/Sensei-Peripheral-JS)\n\nOnce you’ve got the raspberry pi advertising, you can use an app like [LightBlue® Explorer](https://itunes.apple.com/ca/app/lightblue-explorer/id557428110?mt=8) to verify that it’s working.\n\n#### Bluetooth Central (iOS)\n\n#### Warning:\n\nBLE apps must run this on a real iPhone, not the simulator!\n\nCreate a new iPhone app.\n\nTo interact with other ble devices from an iOS app, you will have to use the `CoreBluetooth` framework. This is a pretty well documented framework, so it was pretty easy to setup my iPhone as a central device. It still requires more code than I thought was necessary.\n\n  \nCreate a new `TemperatureDetector` class.  \n\nI made a `TemperatureDetector` class and added the following code:\n\n```swift\nimport Foundation\nimport CoreBluetooth\n\nclass TemperatureDetector: NSObject {\n\n  // The Central Manager is what will listen for advertising ble devices.\n  var myCentralManager: CBCentralManager!\n\n  override init() {\n    super.init()\n    myCentralManager = CBCentralManager(delegate: self, queue: nil)\n  }\n\n}\n\nextension TemperatureDetector: CBCentralManagerDelegate {\n  func centralManagerDidUpdateState(_ central: CBCentralManager) {\n    // If ble is supported and available, start scanning; otherwise, stop scanning\n    if central.state == .poweredOn {\n      myCentralManager.scanForPeripherals(withServices: nil, options: nil)\n    } else {\n      myCentralManager.stopScan()\n    }\n  }\n\n  func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {\n\n    // Only continue if we find a peripheral with the name \"Sensei\"\n    // Change this to whatever you've called your peripheral\n    guard let name = advertisementData[\"kCBAdvDataLocalName\"] as? String, name == \"Sensei\" else {\n      return\n    }\n\n    // Get the Manufacturer Data, that's where we stored the temperature and humidity\n    guard let manData = advertisementData[\"kCBAdvDataManufacturerData\"] as? Data else {\n      return\n    }\n\n    // The data was stored in binary, now we have to read that data as an 8 byte double.\n    // Temperature is the first 8 bytes\n    let temperature: Double = manData.subdata(in: 0..<8).withUnsafeBytes { $0.pointee }\n    // Humidity is the second 8 bytes\n    let humidity: Double = manData.subdata(in: 8..<16).withUnsafeBytes { $0.pointee }\n\n    print(\"Temperature: \\(temperature), Humidity: \\(humidity)\")\n  } \n}\n```\n\nWhen you create a new instance of `TemperatureDetector`, it will start scanning for BLE peripherals. If it finds the temperature sensor “Sensei” (oh yeah, the sensor’s name is “Sensei”), it will print out the temperature and humidity data.\n\nHere’s the code for my completed iPhone app: [https://github.com/Sam-Meech-Ward/Sensei-Central-iOS](https://github.com/Sam-Meech-Ward/Sensei-Central-iOS)"
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLlRpOE1YZ1RGSTdz",
    "videoId": "Ti8MXgTFI7s",
    "title": "Let's Build a Temperature Sensor with a Raspberry Pi Part 2",
    "date": "2018-07-15T20:52:46Z",
    "slug": "let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2",
    "image": {
      "name": "let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2.jpg",
      "alt": "Let's Build a Temperature Sensor with a Raspberry Pi Part 2",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2/images/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2.jpg"
    },
    "status": "published",
    "description": "Instructions on how to build this: https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/",
    "tags": [],
    "dirPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2",
    "indexPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2/index.mdx",
    "imagesPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-2/images",
    "hash": "8e11344d9b29b89d21d247dca710b5c3b977fe63",
    "text": "Instructions on how to build this: [https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/](https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/)\n\nI finished the temperature sensor using a raspberry pi, now I can read the temperature using my iPhone 🤗.\n\nPart 1: [https://www.youtube.com/watch?v=va5JBp5LVE4&t=1s](https://www.youtube.com/watch?v=va5JBp5LVE4&t=1s)\n\nHelp support videos like this: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\n\n\nInstructions on how to build this: [https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/](https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/)\nThe code I wrote in the video: \n*     * Raspberry pi Code: [https://github.com/Sam-Meech-Ward/Sensei-Peripheral-JS](https://github.com/Sam-Meech-Ward/Sensei-Peripheral-JS)\n*     * iOS Code: [https://github.com/Sam-Meech-Ward/Sensei-Central-iOS](https://github.com/Sam-Meech-Ward/Sensei-Central-iOS)\nOpen browser tabs at the end of the video: [https://gist.github.com/meech-ward/1ca6ecb64460327b2b096e4ed89ac4ad](https://gist.github.com/meech-ward/1ca6ecb64460327b2b096e4ed89ac4ad)\nMy website: https://www.sammeechward.com"
  },
  {
    "type": "article",
    "wp_id": 8,
    "title": "Let’s Build a Temperature Sensor with a Raspberry Pi – Part 1",
    "date": "2018-07-05T09:34:30",
    "slug": "lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1",
    "image": {
      "name": "lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1.png",
      "width": 1280,
      "height": 720,
      "url": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/images/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1.png"
    },
    "status": "published",
    "description": "I had a temperature sensor in my box of things, and I wanted to know the temperature.",
    "tags": [
      "ble",
      "node js",
      "raspberry pi",
      "temperature sensor"
    ],
    "dirPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1",
    "indexPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/index.mdx",
    "imagesPath": "content/articles/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/images",
    "hash": "e5e488672dc8e4fb90368793f54242a9cfc3ba90",
    "text": "I had a temperature sensor in my box of things, and I wanted to know the temperature.\n\nThis is a two-part project. In this part, I connect a raspberry pi to a temperature & humidity sensor so that I can read the current temperature in my apartment.\n\n[In part 2](http://192.168.33.20/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/), I set up the pi to emit the temperature and humidity data using BLE. I also made an iPhone app that can read that data.\n\n## YouTube Video\n\n## Hardware\n\n*   Raspberry Pi with built-in Bluetooth. I used a zero w.\n*   [DHT22 temperature-humidity sensor](https://www.adafruit.com/product/385)\n\n## How To Do This\n\nSetup the Raspberry Pi with Raspbian and Node.js.\n\nI setup my raspberry pi zero and installed node.js following the same process in that’s in my [Raspberry Pi for Developers: Getting Started course](https://sammeechward.com/courses/raspberry-pi-for-developers-getting-started/)\n\nWire up the pi to the sensor.\n\nThe next step was to wire up the temperature sensor to the pi. I used the DHT22 temperature and humidity sensor, which is a super common sensor, so there’s a diagram and instructions on [adafruit.](https://learn.adafruit.com/dht/connecting-to-a-dhtxx-sensor) Here’s my setup:\n\n*   Plug the left pin (red pin) into 5v.\n*   Plug the right pin (black pin) into ground.\n*   Plug the inner left pin (green pin) into a gpio pin, I chose 4. (I origianlly chose 14, but my faulty soldering made that pin unreliable)\n\n[Raspberry pi pins](https://www.raspberrypi.org/documentation/usage/gpio/)\n\nPlug in the pi, and connect to it using ssh.\n\nI used the following link to do this before I plugged in the pi: [Prepare SD card for Wifi on Headless Pi](https://raspberrypi.stackexchange.com/questions/10251/prepare-sd-card-for-wifi-on-headless-pi).\n\nHere’s the official documentation on how to connect to a pi using ssh: [https://www.raspberrypi.org/documentation/remote-access/ssh/](https://www.raspberrypi.org/documentation/remote-access/ssh/)\n\nInstall `[node-dht-sensor](https://www.npmjs.com/package/node-dht-sensor)`\n\nThere’s a great library that makes it super easy to connect a raspberry pi to a DHT sensor. Before you can use the `node-dht-sensor` library, you have to install the bcm2835 c library that gives easy access to the gpio pins for libraries like `node-dht-sensor`. You can follow the instructions on npm, but here’s the code I ran on the pi to install it:\n\n```c\nwget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.56.tar.gz\ntar zxvf bcm2835-1.56.tar.gz\ncd bcm2835-1.56\n./configure\nmake\nsudo make check\nsudo make install\n```\n\nCode the app.\n\nNow for the fun part. This app could have been written in 4 lines of javascript, so it’s really not complex at all. I just `npm install node-dht-sensor` and wrote the following code.\n\n```js\nconst sensor = require('node-dht-sensor');\n\nconst sensorNumber = 22;\nconst pinNumber = 4;\nsensor.read(sensorNumber, pinNumber, (err, temperature, humidity) => {\n  if (err) {\n    console.log(\"AHHHHHHHH error\", err);\n    return;\n  }\n\n  console.log('temp: ' + temperature.toFixed(1) + '°C, ' + 'humidity: ' + humidity.toFixed(1) +  '%');\n});\n```\n\nThat’s it, that’s all it took to start reading the temperature and humidity in my apartment. That was good and fun, but I can only read this data if I log on to the pi and run the script. In my [next post](/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-2/), I will advertise this data using BLE and read the data using my iPhone."
  },
  {
    "type": "video",
    "yt_id": "VVU2YVRMdUlfajQtMHdpRFN6bWFQY3RRLnZhNUpCcDVMVkU0",
    "videoId": "va5JBp5LVE4",
    "title": "Let's Build a Temperature Sensor with a Raspberry Pi Part 1",
    "date": "2018-07-05T15:25:39Z",
    "slug": "let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1",
    "image": {
      "name": "let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1.jpg",
      "alt": "Let's Build a Temperature Sensor with a Raspberry Pi Part 1",
      "width": 1280,
      "height": 720,
      "url": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1/images/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1.jpg"
    },
    "status": "published",
    "description": "I made a temperature sensor using a raspberry pi, now I know the temperature of my apartment 🤗.",
    "tags": [],
    "dirPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1",
    "indexPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1/index.mdx",
    "imagesPath": "content/videos/videos/let's-build-a-temperature-sensor-with-a-raspberry-pi-part-1/images",
    "hash": "ebae3cce4cd2372b7c6d7e6569551f2bb98f8b25",
    "text": "I made a temperature sensor using a raspberry pi, now I know the temperature of my apartment 🤗.\n\nInstructions on how to build this: [https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/](https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/)\n\nHelp support videos like this: [https://www.patreon.com/meech_ward](https://www.patreon.com/meech_ward)\n\nPart 2: [https://www.youtube.com/watch?v=Ti8MXgTFI7s&t=487s](https://www.youtube.com/watch?v=Ti8MXgTFI7s&t=487s)\n\nInstructions on how to build this: [https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/](https://sammeechward.com/lets-build-a-temperature-sensor-with-a-raspberry-pi-part-1/)\nThe code I wrote in the video: [https://gist.github.com/meech-ward/d7974f565113719ab192e5f6bce3e271#file-app-js](https://gist.github.com/meech-ward/d7974f565113719ab192e5f6bce3e271#file-app-js)\nOpen browser tabs at the end of the video: [https://gist.github.com/meech-ward/d7974f565113719ab192e5f6bce3e271#file-open-tabs-md](https://gist.github.com/meech-ward/d7974f565113719ab192e5f6bce3e271#file-open-tabs-md)\nAll of my projects: [https://www.sammeechward.com/youtube-projects](https://www.sammeechward.com/youtube-projects)\nMy website: https://www.sammeechward.com"
  }
]